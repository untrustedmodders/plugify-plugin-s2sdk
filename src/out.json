[
    {
        "name": "GetPlayerSlotFromEntityPointer",
        "group": "Clients",
        "description": "Retrieves the player slot from a given entity pointer.",
        "funcName": "GetPlayerSlotFromEntityPointer",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the entity (CBaseEntity*)."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The player slot if valid, otherwise -1."
        }
    },
    {
        "name": "GetClientBaseFromPlayerSlot",
        "group": "Clients",
        "description": "Retrieves the client object from a given player slot.",
        "funcName": "GetClientBaseFromPlayerSlot",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot (0-based)."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the client object if found, otherwise nullptr."
        }
    },
    {
        "name": "GetPlayerSlotFromClientBase",
        "group": "Clients",
        "description": "Retrieves the index of a given client object.",
        "funcName": "GetPlayerSlotFromClientBase",
        "paramTypes": [
            {
                "name": "client",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the client object (CServerSideClient*)."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The player slot if found, otherwise -1."
        }
    },
    {
        "name": "GetClientAuthId",
        "group": "Clients",
        "description": "Retrieves a client's authentication string (SteamID).",
        "funcName": "GetClientAuthId",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot whose authentication string is being retrieved."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The authentication string."
        }
    },
    {
        "name": "GetClientAccountId",
        "group": "Clients",
        "description": "Returns the client's Steam account ID, a unique number identifying a given Steam account.",
        "funcName": "GetClientAccountId",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "uint64_t Steam account ID."
        }
    },
    {
        "name": "GetClientIp",
        "group": "Clients",
        "description": "Retrieves a client's IP address.",
        "funcName": "GetClientIp",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The IP address."
        }
    },
    {
        "name": "GetClientName",
        "group": "Clients",
        "description": "Returns the client's name.",
        "funcName": "GetClientName",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The client's name."
        }
    },
    {
        "name": "GetClientTime",
        "group": "Clients",
        "description": "Returns the client's connection time in seconds.",
        "funcName": "GetClientTime",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "float",
            "description": "float Connection time in seconds."
        }
    },
    {
        "name": "GetClientLatency",
        "group": "Clients",
        "description": "Returns the client's current latency (RTT).",
        "funcName": "GetClientLatency",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "float",
            "description": "float Latency value."
        }
    },
    {
        "name": "GetUserFlagBits",
        "group": "Clients",
        "description": "Returns the client's access flags.",
        "funcName": "GetUserFlagBits",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "uint64 Access flags as a bitmask."
        }
    },
    {
        "name": "SetUserFlagBits",
        "group": "Clients",
        "description": "Sets the access flags on a client using a bitmask.",
        "funcName": "SetUserFlagBits",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "flags",
                "type": "uint64",
                "ref": false,
                "description": "Bitmask representing the flags to be set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "AddUserFlags",
        "group": "Clients",
        "description": "Adds access flags to a client.",
        "funcName": "AddUserFlags",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "flags",
                "type": "uint64",
                "ref": false,
                "description": "Bitmask representing the flags to be added."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RemoveUserFlags",
        "group": "Clients",
        "description": "Removes access flags from a client.",
        "funcName": "RemoveUserFlags",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "flags",
                "type": "uint64",
                "ref": false,
                "description": "Bitmask representing the flags to be removed."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "IsClientAuthorized",
        "group": "Clients",
        "description": "Checks if a certain player has been authenticated.",
        "funcName": "IsClientAuthorized",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "true if the player is authenticated, false otherwise."
        }
    },
    {
        "name": "IsClientConnected",
        "group": "Clients",
        "description": "Checks if a certain player is connected.",
        "funcName": "IsClientConnected",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "true if the player is connected, false otherwise."
        }
    },
    {
        "name": "IsClientInGame",
        "group": "Clients",
        "description": "Checks if a certain player has entered the game.",
        "funcName": "IsClientInGame",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "true if the player is in the game, false otherwise."
        }
    },
    {
        "name": "IsClientSourceTV",
        "group": "Clients",
        "description": "Checks if a certain player is the SourceTV bot.",
        "funcName": "IsClientSourceTV",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "true if the client is the SourceTV bot, false otherwise."
        }
    },
    {
        "name": "IsClientAlive",
        "group": "Clients",
        "description": "Checks if the client is alive or dead.",
        "funcName": "IsClientAlive",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "true if the client is alive, false if dead."
        }
    },
    {
        "name": "IsFakeClient",
        "group": "Clients",
        "description": "Checks if a certain player is a fake client.",
        "funcName": "IsFakeClient",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "true if the client is a fake client, false otherwise."
        }
    },
    {
        "name": "GetClientTeam",
        "group": "Clients",
        "description": "Retrieves a client's team index.",
        "funcName": "GetClientTeam",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The team index of the client."
        }
    },
    {
        "name": "GetClientHealth",
        "group": "Clients",
        "description": "Returns the client's health.",
        "funcName": "GetClientHealth",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The health value of the client."
        }
    },
    {
        "name": "GetClientArmor",
        "group": "Clients",
        "description": "Returns the client's armor value.",
        "funcName": "GetClientArmor",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The armor value of the client."
        }
    },
    {
        "name": "GetClientAbsOrigin",
        "group": "Clients",
        "description": "Retrieves the client's origin vector.",
        "funcName": "GetClientAbsOrigin",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A Vector where the client's origin will be stored."
        }
    },
    {
        "name": "GetClientAbsAngles",
        "group": "Clients",
        "description": "Retrieves the client's position angle.",
        "funcName": "GetClientAbsAngles",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A QAngle where the client's position angle will be stored."
        }
    },
    {
        "name": "GetClientEyeAngles",
        "group": "Clients",
        "description": "Retrieves the client's eye angle.",
        "funcName": "GetClientEyeAngles",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A QAngle where the client's eye angle will be stored."
        }
    },
    {
        "name": "ProcessTargetString",
        "group": "Clients",
        "description": "Processes the target string to determine if one user can target another.",
        "funcName": "ProcessTargetString",
        "paramTypes": [
            {
                "name": "caller",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot making the target request."
            },
            {
                "name": "target",
                "type": "string",
                "ref": false,
                "description": "The target string specifying the player or players to be targeted."
            }
        ],
        "retType": {
            "type": "int32[]",
            "description": "A vector where the result of the targeting operation will be stored."
        }
    },
    {
        "name": "ChangeClientTeam",
        "group": "Clients",
        "description": "Changes a client's team.",
        "funcName": "ChangeClientTeam",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "team",
                "type": "int32",
                "ref": false,
                "description": "The team index to assign the client to."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SwitchClientTeam",
        "group": "Clients",
        "description": "Switches the player's team.",
        "funcName": "SwitchClientTeam",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "team",
                "type": "int32",
                "ref": false,
                "description": "The team index to switch the client to."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RespawnClient",
        "group": "Clients",
        "description": "Respawns a player.",
        "funcName": "RespawnClient",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to respawn."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "ForcePlayerSuicide",
        "group": "Clients",
        "description": "Forces a player to commit suicide.",
        "funcName": "ForcePlayerSuicide",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "explode",
                "type": "bool",
                "ref": false,
                "description": "If true, the client will explode upon death."
            },
            {
                "name": "force",
                "type": "bool",
                "ref": false,
                "description": "If true, the suicide will be forced."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "KickClient",
        "group": "Clients",
        "description": "Disconnects a client from the server as soon as the next frame starts.",
        "funcName": "KickClient",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to be kicked."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "BanClient",
        "group": "Clients",
        "description": "Bans a client for a specified duration.",
        "funcName": "BanClient",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to be banned."
            },
            {
                "name": "duration",
                "type": "float",
                "ref": false,
                "description": "Duration of the ban in seconds."
            },
            {
                "name": "kick",
                "type": "bool",
                "ref": false,
                "description": "If true, the client will be kicked immediately after being banned."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "BanIdentity",
        "group": "Clients",
        "description": "Bans an identity (either an IP address or a Steam authentication string).",
        "funcName": "BanIdentity",
        "paramTypes": [
            {
                "name": "steamId",
                "type": "uint64",
                "ref": false,
                "description": "The Steam ID to ban."
            },
            {
                "name": "duration",
                "type": "float",
                "ref": false,
                "description": "Duration of the ban in seconds."
            },
            {
                "name": "kick",
                "type": "bool",
                "ref": false,
                "description": "If true, the client will be kicked immediately after being banned."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientActiveWeapon",
        "group": "Clients",
        "description": "Retrieves the handle of the client's currently active weapon.",
        "funcName": "GetClientActiveWeapon",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle of the active weapon, or INVALID_EHANDLE_INDEX if the client is invalid or has no active weapon."
        }
    },
    {
        "name": "GetClientWeapons",
        "group": "Clients",
        "description": "Retrieves a list of weapon handles owned by the client.",
        "funcName": "GetClientWeapons",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32[]",
            "description": "A vector of entity handles for the client's weapons, or an empty vector if the client is invalid or has no weapons."
        }
    },
    {
        "name": "StripWeapons",
        "group": "Clients",
        "description": "Removes all weapons from a client, with an option to remove the suit as well.",
        "funcName": "StripWeapons",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "removeSuit",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating whether to also remove the client's suit."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "DropWeapon",
        "group": "Clients",
        "description": "Forces a player to drop their weapon.",
        "funcName": "DropWeapon",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to drop."
            },
            {
                "name": "target",
                "type": "vec3",
                "ref": false,
                "description": "Target direction."
            },
            {
                "name": "velocity",
                "type": "vec3",
                "ref": false,
                "description": "Velocity to toss weapon or zero to just drop weapon."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "BumpWeapon",
        "group": "Clients",
        "description": "Bumps a player's weapon.",
        "funcName": "BumpWeapon",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to bump."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SwitchWeapon",
        "group": "Clients",
        "description": "Switches a player's weapon.",
        "funcName": "SwitchWeapon",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to switch."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RemoveWeapon",
        "group": "Clients",
        "description": "Removes a player's weapon.",
        "funcName": "RemoveWeapon",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to remove."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GiveNamedItem",
        "group": "Clients",
        "description": "Gives a named item (e.g., weapon) to a client.",
        "funcName": "GiveNamedItem",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "itemName",
                "type": "string",
                "ref": false,
                "description": "The name of the item to give."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle of the created item, or INVALID_EHANDLE_INDEX if the client or item is invalid."
        }
    },
    {
        "name": "GetClientButtons",
        "group": "Clients",
        "description": "Retrieves the state of a specific button for a client.",
        "funcName": "GetClientButtons",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "buttonIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the button (0-2)."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "uint64_t The state of the specified button, or 0 if the client or button index is invalid."
        }
    },
    {
        "name": "GetClientMoney",
        "group": "Clients",
        "description": "Retrieves the amount of money a client has.",
        "funcName": "GetClientMoney",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The amount of money the client has, or 0 if the player slot is invalid."
        }
    },
    {
        "name": "SetClientMoney",
        "group": "Clients",
        "description": "Sets the amount of money for a client.",
        "funcName": "SetClientMoney",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "money",
                "type": "int32",
                "ref": false,
                "description": "The amount of money to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientKills",
        "group": "Clients",
        "description": "Retrieves the number of kills for a client.",
        "funcName": "GetClientKills",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The number of kills the client has, or 0 if the player slot is invalid."
        }
    },
    {
        "name": "SetClientKills",
        "group": "Clients",
        "description": "Sets the number of kills for a client.",
        "funcName": "SetClientKills",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "kills",
                "type": "int32",
                "ref": false,
                "description": "The number of kills to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientDeaths",
        "group": "Clients",
        "description": "Retrieves the number of deaths for a client.",
        "funcName": "GetClientDeaths",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The number of deaths the client has, or 0 if the player slot is invalid."
        }
    },
    {
        "name": "SetClientDeaths",
        "group": "Clients",
        "description": "Sets the number of deaths for a client.",
        "funcName": "SetClientDeaths",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "deaths",
                "type": "int32",
                "ref": false,
                "description": "The number of deaths to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientAssists",
        "group": "Clients",
        "description": "Retrieves the number of assists for a client.",
        "funcName": "GetClientAssists",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The number of assists the client has, or 0 if the player slot is invalid."
        }
    },
    {
        "name": "SetClientAssists",
        "group": "Clients",
        "description": "Sets the number of assists for a client.",
        "funcName": "SetClientAssists",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "assists",
                "type": "int32",
                "ref": false,
                "description": "The number of assists to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientDamage",
        "group": "Clients",
        "description": "Retrieves the total damage dealt by a client.",
        "funcName": "GetClientDamage",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The total damage dealt by the client, or 0 if the player slot is invalid."
        }
    },
    {
        "name": "SetClientDamage",
        "group": "Clients",
        "description": "Sets the total damage dealt by a client.",
        "funcName": "SetClientDamage",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "damage",
                "type": "int32",
                "ref": false,
                "description": "The amount of damage to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "AddAdminCommand",
        "group": "Commands",
        "description": "Creates a console command as an administrative command.",
        "funcName": "AddAdminCommand",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console command."
            },
            {
                "name": "adminFlags",
                "type": "int64",
                "ref": false,
                "description": "The admin flags that indicate which admin level can use this command."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of what the command does."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Command flags that define the behavior of the command."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "A callback function that is invoked when the command is executed."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "A boolean indicating whether the command was successfully added."
        }
    },
    {
        "name": "AddConsoleCommand",
        "group": "Commands",
        "description": "Creates a console command or hooks an already existing one.",
        "funcName": "AddConsoleCommand",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console command."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of what the command does."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Command flags that define the behavior of the command."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "A callback function that is invoked when the command is executed."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "A boolean indicating whether the command was successfully added."
        }
    },
    {
        "name": "RemoveCommand",
        "group": "Commands",
        "description": "Removes a console command from the system.",
        "funcName": "RemoveCommand",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the command to be removed."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function associated with the command to be removed."
            }
        ],
        "retType": {
            "type": "bool"
        }
    },
    {
        "name": "AddCommandListener",
        "group": "Commands",
        "description": "Adds a callback that will fire when a command is sent to the server.",
        "funcName": "AddCommandListener",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the command."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function that will be invoked when the command is executed."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "A boolean indicating whether the callback was successfully added."
        }
    },
    {
        "name": "RemoveCommandListener",
        "group": "Commands",
        "description": "Removes a callback that fires when a command is sent to the server.",
        "funcName": "RemoveCommandListener",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the command."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function to be removed."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "A boolean indicating whether the callback was successfully removed."
        }
    },
    {
        "name": "ServerCommand",
        "group": "Commands",
        "description": "Executes a server command as if it were run on the server console or through RCON.",
        "funcName": "ServerCommand",
        "paramTypes": [
            {
                "name": "command",
                "type": "string",
                "ref": false,
                "description": "The command to execute on the server."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "ServerCommandEx",
        "group": "Commands",
        "description": "Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer.",
        "funcName": "ServerCommandEx",
        "paramTypes": [
            {
                "name": "command",
                "type": "string",
                "ref": false,
                "description": "The command to execute on the server."
            }
        ],
        "retType": {
            "type": "string",
            "description": "String to store command result into."
        }
    },
    {
        "name": "ClientCommand",
        "group": "Commands",
        "description": "Executes a client command.",
        "funcName": "ClientCommand",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot executing the command."
            },
            {
                "name": "command",
                "type": "string",
                "ref": false,
                "description": "The command to execute on the client."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "FakeClientCommand",
        "group": "Commands",
        "description": "Executes a client command on the server without network communication.",
        "funcName": "FakeClientCommand",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot."
            },
            {
                "name": "command",
                "type": "string",
                "ref": false,
                "description": "The command to be executed by the client."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintToServer",
        "group": "Console",
        "description": "Sends a message to the server console.",
        "funcName": "PrintToServer",
        "paramTypes": [
            {
                "name": "msg",
                "type": "string",
                "ref": false,
                "description": "The message to be sent to the server console."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintToConsole",
        "group": "Console",
        "description": "Sends a message to a client's console.",
        "funcName": "PrintToConsole",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to whom the message will be sent."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be sent to the client's console."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintToChat",
        "group": "Console",
        "description": "Prints a message to a specific client in the chat area.",
        "funcName": "PrintToChat",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to whom the message will be sent."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be printed in the chat area."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintCenterText",
        "group": "Console",
        "description": "Prints a message to a specific client in the center of the screen.",
        "funcName": "PrintCenterText",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to whom the message will be sent."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be printed in the center of the screen."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintAlertText",
        "group": "Console",
        "description": "Prints a message to a specific client with an alert box.",
        "funcName": "PrintAlertText",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to whom the message will be sent."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be printed in the alert box."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintCentreHtml",
        "group": "Console",
        "description": "Prints a html message to a specific client in the center of the screen.",
        "funcName": "PrintCentreHtml",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to whom the message will be sent."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The HTML-formatted message to be printed."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintToConsoleAll",
        "group": "Console",
        "description": "Sends a message to every client's console.",
        "funcName": "PrintToConsoleAll",
        "paramTypes": [
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be sent to all clients' consoles."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintToChatAll",
        "group": "Console",
        "description": "Prints a message to all clients in the chat area.",
        "funcName": "PrintToChatAll",
        "paramTypes": [
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be printed in the chat area for all clients."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintCenterTextAll",
        "group": "Console",
        "description": "Prints a message to all clients in the center of the screen.",
        "funcName": "PrintCenterTextAll",
        "paramTypes": [
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be printed in the center of the screen for all clients."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintAlertTextAll",
        "group": "Console",
        "description": "Prints a message to all clients with an alert box.",
        "funcName": "PrintAlertTextAll",
        "paramTypes": [
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be printed in an alert box for all clients."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintCentreHtmlAll",
        "group": "Console",
        "description": "Prints a html message to all clients in the center of the screen.",
        "funcName": "PrintCentreHtmlAll",
        "paramTypes": [
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The HTML-formatted message to be printed in the center of the screen for all clients."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintToChatColored",
        "group": "Console",
        "description": "Prints a colored message to a specific client in the chat area.",
        "funcName": "PrintToChatColored",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to whom the message will be sent."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to be printed in the chat area with color."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "PrintToChatColoredAll",
        "group": "Console",
        "description": "Prints a colored message to all clients in the chat area.",
        "funcName": "PrintToChatColoredAll",
        "paramTypes": [
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The colored message to be printed in the chat area for all clients."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "CreateConVar",
        "group": "Cvars",
        "description": "Creates a new console variable.",
        "funcName": "CreateConVar",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "string",
                "ref": false,
                "description": "The default value of the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A description of the console variable's purpose."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Additional flags for the console variable."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable."
        }
    },
    {
        "name": "CreateConVarBool",
        "group": "Cvars",
        "description": "Creates a new boolean console variable.",
        "funcName": "CreateConVarBool",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "bool",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "bool",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "bool",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarInt16",
        "group": "Cvars",
        "description": "Creates a new 16-bit signed integer console variable.",
        "funcName": "CreateConVarInt16",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "int16",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "int16",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "int16",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarUInt16",
        "group": "Cvars",
        "description": "Creates a new 16-bit unsigned integer console variable.",
        "funcName": "CreateConVarUInt16",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "uint16",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "uint16",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "uint16",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarInt32",
        "group": "Cvars",
        "description": "Creates a new 32-bit signed integer console variable.",
        "funcName": "CreateConVarInt32",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "int32",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "int32",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "int32",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarUInt32",
        "group": "Cvars",
        "description": "Creates a new 32-bit unsigned integer console variable.",
        "funcName": "CreateConVarUInt32",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "uint32",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "uint32",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "uint32",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarInt64",
        "group": "Cvars",
        "description": "Creates a new 64-bit signed integer console variable.",
        "funcName": "CreateConVarInt64",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "int64",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "int64",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "int64",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarUInt64",
        "group": "Cvars",
        "description": "Creates a new 64-bit unsigned integer console variable.",
        "funcName": "CreateConVarUInt64",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "uint64",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "uint64",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "uint64",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarFloat",
        "group": "Cvars",
        "description": "Creates a new floating-point console variable.",
        "funcName": "CreateConVarFloat",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "float",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "float",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "float",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarDouble",
        "group": "Cvars",
        "description": "Creates a new double-precision console variable.",
        "funcName": "CreateConVarDouble",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "double",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "double",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "double",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarColor",
        "group": "Cvars",
        "description": "Creates a new color console variable.",
        "funcName": "CreateConVarColor",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "int32",
                "ref": false,
                "description": "The default color value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "int32",
                "ref": false,
                "description": "The minimum color value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "int32",
                "ref": false,
                "description": "The maximum color value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarVector2",
        "group": "Cvars",
        "description": "Creates a new 2D vector console variable.",
        "funcName": "CreateConVarVector2",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "vec2",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "vec2",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "vec2",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarVector3",
        "group": "Cvars",
        "description": "Creates a new 3D vector console variable.",
        "funcName": "CreateConVarVector3",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "vec3",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "vec3",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "vec3",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarVector4",
        "group": "Cvars",
        "description": "Creates a new 4D vector console variable.",
        "funcName": "CreateConVarVector4",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "vec4",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "vec4",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "vec4",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "CreateConVarQAngle",
        "group": "Cvars",
        "description": "Creates a new quaternion angle console variable.",
        "funcName": "CreateConVarQAngle",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "defaultValue",
                "type": "vec3",
                "ref": false,
                "description": "The default value for the console variable."
            },
            {
                "name": "description",
                "type": "string",
                "ref": false,
                "description": "A brief description of the console variable."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that define the behavior of the console variable."
            },
            {
                "name": "hasMin",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a minimum value is provided."
            },
            {
                "name": "min",
                "type": "vec3",
                "ref": false,
                "description": "The minimum value if hasMin is true."
            },
            {
                "name": "hasMax",
                "type": "bool",
                "ref": false,
                "description": "Indicates if a maximum value is provided."
            },
            {
                "name": "max",
                "type": "vec3",
                "ref": false,
                "description": "The maximum value if hasMax is true."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A handle to the created console variable data."
        }
    },
    {
        "name": "FindConVar",
        "group": "Cvars",
        "description": "Searches for a console variable.",
        "funcName": "FindConVar",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable to search for."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "Pointer to the console variable data if found; otherwise, nullptr."
        }
    },
    {
        "name": "FindConVar2",
        "group": "Cvars",
        "description": "Searches for a console variable of a specific type.",
        "funcName": "FindConVar2",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable to search for."
            },
            {
                "name": "type",
                "type": "?",
                "ref": false,
                "description": "The type of the console variable to search for."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "Pointer to the console variable data if found; otherwise, nullptr."
        }
    },
    {
        "name": "HookConVarChange",
        "group": "Cvars",
        "description": "Creates a hook for when a console variable's value is changed.",
        "funcName": "HookConVarChange",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable to hook."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function to be executed when the variable's value changes."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "UnhookConVarChange",
        "group": "Cvars",
        "description": "Removes a hook for when a console variable's value is changed.",
        "funcName": "UnhookConVarChange",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable to unhook."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function to be removed."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "IsConVarFlagSet",
        "group": "Cvars",
        "description": "Checks if a specific flag is set for a console variable.",
        "funcName": "IsConVarFlagSet",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "flag",
                "type": "?",
                "ref": false,
                "description": "The flag to check against the console variable."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the flag is set; otherwise, false."
        }
    },
    {
        "name": "AddConVarFlags",
        "group": "Cvars",
        "description": "Adds flags to a console variable.",
        "funcName": "AddConVarFlags",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "The flags to be added."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RemoveConVarFlags",
        "group": "Cvars",
        "description": "Removes flags from a console variable.",
        "funcName": "RemoveConVarFlags",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "The flags to be removed."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetConVarFlags",
        "group": "Cvars",
        "description": "Retrieves the current flags of a console variable.",
        "funcName": "GetConVarFlags",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "?",
            "description": "The current flags set on the console variable."
        }
    },
    {
        "name": "GetConVarBounds",
        "group": "Cvars",
        "description": "Gets the specified bound (max or min) of a console variable and stores it in the output string.",
        "funcName": "GetConVarBounds",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "max",
                "type": "bool",
                "ref": false,
                "description": "Indicates whether to get the maximum (true) or minimum (false) bound."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The bound value."
        }
    },
    {
        "name": "SetConVarBounds",
        "group": "Cvars",
        "description": "Sets the specified bound (max or min) for a console variable.",
        "funcName": "SetConVarBounds",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "max",
                "type": "bool",
                "ref": false,
                "description": "Indicates whether to set the maximum (true) or minimum (false) bound."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The value to set as the bound."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetConVarDefault",
        "group": "Cvars",
        "description": "Retrieves the current default value of a console variable and stores it in the output string.",
        "funcName": "GetConVarDefault",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The output value in string format."
        }
    },
    {
        "name": "GetConVarValue",
        "group": "Cvars",
        "description": "Retrieves the current value of a console variable and stores it in the output string.",
        "funcName": "GetConVarValue",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The output value in string format."
        }
    },
    {
        "name": "GetConVar",
        "group": "Cvars",
        "description": "Retrieves the current value of a console variable and stores it in the output.",
        "funcName": "GetConVar",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "any",
            "description": "The output value."
        }
    },
    {
        "name": "GetConVarBool",
        "group": "Cvars",
        "description": "Retrieves the current value of a boolean console variable.",
        "funcName": "GetConVarBool",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "The current boolean value of the console variable."
        }
    },
    {
        "name": "GetConVarInt16",
        "group": "Cvars",
        "description": "Retrieves the current value of a signed 16-bit integer console variable.",
        "funcName": "GetConVarInt16",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "int16",
            "description": "The current int16 value of the console variable."
        }
    },
    {
        "name": "GetConVarUInt16",
        "group": "Cvars",
        "description": "Retrieves the current value of an unsigned 16-bit integer console variable.",
        "funcName": "GetConVarUInt16",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "uint16",
            "description": "The current uint16 value of the console variable."
        }
    },
    {
        "name": "GetConVarInt32",
        "group": "Cvars",
        "description": "Retrieves the current value of a signed 32-bit integer console variable.",
        "funcName": "GetConVarInt32",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The current int32 value of the console variable."
        }
    },
    {
        "name": "GetConVarUInt32",
        "group": "Cvars",
        "description": "Retrieves the current value of an unsigned 32-bit integer console variable.",
        "funcName": "GetConVarUInt32",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "uint32",
            "description": "The current uint32 value of the console variable."
        }
    },
    {
        "name": "GetConVarInt64",
        "group": "Cvars",
        "description": "Retrieves the current value of a signed 64-bit integer console variable.",
        "funcName": "GetConVarInt64",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "The current int64 value of the console variable."
        }
    },
    {
        "name": "GetConVarUInt64",
        "group": "Cvars",
        "description": "Retrieves the current value of an unsigned 64-bit integer console variable.",
        "funcName": "GetConVarUInt64",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "The current uint64 value of the console variable."
        }
    },
    {
        "name": "GetConVarFloat",
        "group": "Cvars",
        "description": "Retrieves the current value of a float console variable.",
        "funcName": "GetConVarFloat",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "float",
            "description": "The current float value of the console variable."
        }
    },
    {
        "name": "GetConVarDouble",
        "group": "Cvars",
        "description": "Retrieves the current value of a double console variable.",
        "funcName": "GetConVarDouble",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "double",
            "description": "The current double value of the console variable."
        }
    },
    {
        "name": "GetConVarString",
        "group": "Cvars",
        "description": "Retrieves the current value of a string console variable.",
        "funcName": "GetConVarString",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The current string value of the console variable."
        }
    },
    {
        "name": "GetConVarColor",
        "group": "Cvars",
        "description": "Retrieves the current value of a Color console variable.",
        "funcName": "GetConVarColor",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The current Color value of the console variable."
        }
    },
    {
        "name": "GetConVarVector2",
        "group": "Cvars",
        "description": "Retrieves the current value of a Vector2D console variable.",
        "funcName": "GetConVarVector2",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "vec2",
            "description": "The current Vector2D value of the console variable."
        }
    },
    {
        "name": "GetConVarVector",
        "group": "Cvars",
        "description": "Retrieves the current value of a Vector console variable.",
        "funcName": "GetConVarVector",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The current Vector value of the console variable."
        }
    },
    {
        "name": "GetConVarVector4",
        "group": "Cvars",
        "description": "Retrieves the current value of a Vector4D console variable.",
        "funcName": "GetConVarVector4",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "vec4",
            "description": "The current Vector4D value of the console variable."
        }
    },
    {
        "name": "GetConVarQAngle",
        "group": "Cvars",
        "description": "Retrieves the current value of a QAngle console variable.",
        "funcName": "GetConVarQAngle",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The current QAngle value of the console variable."
        }
    },
    {
        "name": "SetConVarValue",
        "group": "Cvars",
        "description": "Sets the value of a console variable.",
        "funcName": "SetConVarValue",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVar",
        "group": "Cvars",
        "description": "Sets the value of a console variable.",
        "funcName": "SetConVar",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "any",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarBool",
        "group": "Cvars",
        "description": "Sets the value of a boolean console variable.",
        "funcName": "SetConVarBool",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "bool",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarInt16",
        "group": "Cvars",
        "description": "Sets the value of a signed 16-bit integer console variable.",
        "funcName": "SetConVarInt16",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "int16",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarUInt16",
        "group": "Cvars",
        "description": "Sets the value of an unsigned 16-bit integer console variable.",
        "funcName": "SetConVarUInt16",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "uint16",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarInt32",
        "group": "Cvars",
        "description": "Sets the value of a signed 32-bit integer console variable.",
        "funcName": "SetConVarInt32",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarUInt32",
        "group": "Cvars",
        "description": "Sets the value of an unsigned 32-bit integer console variable.",
        "funcName": "SetConVarUInt32",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "uint32",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarInt64",
        "group": "Cvars",
        "description": "Sets the value of a signed 64-bit integer console variable.",
        "funcName": "SetConVarInt64",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarUInt64",
        "group": "Cvars",
        "description": "Sets the value of an unsigned 64-bit integer console variable.",
        "funcName": "SetConVarUInt64",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "uint64",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarFloat",
        "group": "Cvars",
        "description": "Sets the value of a floating-point console variable.",
        "funcName": "SetConVarFloat",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "float",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarDouble",
        "group": "Cvars",
        "description": "Sets the value of a double-precision floating-point console variable.",
        "funcName": "SetConVarDouble",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarString",
        "group": "Cvars",
        "description": "Sets the value of a string console variable.",
        "funcName": "SetConVarString",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarColor",
        "group": "Cvars",
        "description": "Sets the value of a color console variable.",
        "funcName": "SetConVarColor",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarVector2",
        "group": "Cvars",
        "description": "Sets the value of a 2D vector console variable.",
        "funcName": "SetConVarVector2",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarVector3",
        "group": "Cvars",
        "description": "Sets the value of a 3D vector console variable.",
        "funcName": "SetConVarVector3",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarVector4",
        "group": "Cvars",
        "description": "Sets the value of a 4D vector console variable.",
        "funcName": "SetConVarVector4",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "vec4",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetConVarQAngle",
        "group": "Cvars",
        "description": "Sets the value of a quaternion angle console variable.",
        "funcName": "SetConVarQAngle",
        "paramTypes": [
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to set for the console variable."
            },
            {
                "name": "replicate",
                "type": "bool",
                "ref": false,
                "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
            },
            {
                "name": "notify",
                "type": "bool",
                "ref": false,
                "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SendConVarValue",
        "group": "Cvars",
        "description": "Replicates a console variable value to a specific client. This does not change the actual console variable value.",
        "funcName": "SendConVarValue",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to replicate the value to."
            },
            {
                "name": "conVarHandle",
                "type": "uint64",
                "ref": false,
                "description": "The handle to the console variable data."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The value to send to the client."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientConVarValue",
        "group": "Cvars",
        "description": "Retrieves the value of a client's console variable and stores it in the output string.",
        "funcName": "GetClientConVarValue",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot whose console variable value is being retrieved."
            },
            {
                "name": "convarName",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable to retrieve."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The output string to store the client's console variable value."
        }
    },
    {
        "name": "SetFakeClientConVarValue",
        "group": "Cvars",
        "description": "Replicates a console variable value to a specific fake client. This does not change the actual console variable value.",
        "funcName": "SetFakeClientConVarValue",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the fake client to replicate the value to."
            },
            {
                "name": "convarName",
                "type": "string",
                "ref": false,
                "description": "The name of the console variable."
            },
            {
                "name": "convarValue",
                "type": "string",
                "ref": false,
                "description": "The value to set for the console variable."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "FindModule",
        "group": "Engine",
        "description": "Finds a module by name.",
        "funcName": "FindModule",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the specified module."
        }
    },
    {
        "name": "FindInterface",
        "group": "Engine",
        "description": "Finds an interface by name.",
        "funcName": "FindInterface",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the interface to find."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the interface."
        }
    },
    {
        "name": "QueryInterface",
        "group": "Engine",
        "description": "Queries an interface from a specified module.",
        "funcName": "QueryInterface",
        "paramTypes": [
            {
                "name": "module",
                "type": "string",
                "ref": false,
                "description": "The name of the module to query the interface from."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the interface to query."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the queried interface."
        }
    },
    {
        "name": "GetGameDirectory",
        "group": "Engine",
        "description": "Returns the path of the game's directory.",
        "funcName": "GetGameDirectory",
        "paramTypes": [],
        "retType": {
            "type": "string"
        }
    },
    {
        "name": "GetCurrentMap",
        "group": "Engine",
        "description": "Returns the current map name.",
        "funcName": "GetCurrentMap",
        "paramTypes": [],
        "retType": {
            "type": "string"
        }
    },
    {
        "name": "IsMapValid",
        "group": "Engine",
        "description": "Returns whether a specified map is valid or not.",
        "funcName": "IsMapValid",
        "paramTypes": [
            {
                "name": "mapname",
                "type": "string",
                "ref": false,
                "description": "The name of the map to check for validity."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the map is valid, false otherwise."
        }
    },
    {
        "name": "GetGameTime",
        "group": "Engine",
        "description": "Returns the game time based on the game tick.",
        "funcName": "GetGameTime",
        "paramTypes": [],
        "retType": {
            "type": "float",
            "description": "The current game time."
        }
    },
    {
        "name": "GetGameTickCount",
        "group": "Engine",
        "description": "Returns the game's internal tick count.",
        "funcName": "GetGameTickCount",
        "paramTypes": [],
        "retType": {
            "type": "int32",
            "description": "The current tick count of the game."
        }
    },
    {
        "name": "GetGameFrameTime",
        "group": "Engine",
        "description": "Returns the time the game took processing the last frame.",
        "funcName": "GetGameFrameTime",
        "paramTypes": [],
        "retType": {
            "type": "float",
            "description": "The frame time of the last processed frame."
        }
    },
    {
        "name": "GetEngineTime",
        "group": "Engine",
        "description": "Returns a high-precision time value for profiling the engine.",
        "funcName": "GetEngineTime",
        "paramTypes": [],
        "retType": {
            "type": "double",
            "description": "A high-precision time value."
        }
    },
    {
        "name": "GetMaxClients",
        "group": "Engine",
        "description": "Returns the maximum number of clients that can connect to the server.",
        "funcName": "GetMaxClients",
        "paramTypes": [],
        "retType": {
            "type": "int32",
            "description": "The maximum client count, or -1 if global variables are not initialized."
        }
    },
    {
        "name": "PrecacheGeneric",
        "group": "Engine",
        "description": "Precaches a given generic file.",
        "funcName": "PrecacheGeneric",
        "paramTypes": [
            {
                "name": "model",
                "type": "string",
                "ref": false,
                "description": "The name of the model to be precached."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer identifier for the generic file."
        }
    },
    {
        "name": "IsGenericPrecache",
        "group": "Engine",
        "description": "Checks if a specified generic file is precached.",
        "funcName": "IsGenericPrecache",
        "paramTypes": [
            {
                "name": "model",
                "type": "string",
                "ref": false,
                "description": "The name of the generic file to check."
            }
        ],
        "retType": {
            "type": "bool"
        }
    },
    {
        "name": "PrecacheModel",
        "group": "Engine",
        "description": "Precaches a specified model.",
        "funcName": "PrecacheModel",
        "paramTypes": [
            {
                "name": "model",
                "type": "string",
                "ref": false,
                "description": "The name of the model to be precached."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer identifier for the model."
        }
    },
    {
        "name": "IsModelPrecache",
        "group": "Engine",
        "description": "Checks if a specified model is precached.",
        "funcName": "IsModelPrecache",
        "paramTypes": [
            {
                "name": "model",
                "type": "string",
                "ref": false,
                "description": "The name of the model to check."
            }
        ],
        "retType": {
            "type": "bool"
        }
    },
    {
        "name": "PrecacheSound",
        "group": "Engine",
        "description": "Precaches a specified sound.",
        "funcName": "PrecacheSound",
        "paramTypes": [
            {
                "name": "sound",
                "type": "string",
                "ref": false,
                "description": "The name of the sound to be precached."
            },
            {
                "name": "preload",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating if the sound should be preloaded."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the sound is successfully precached, false otherwise."
        }
    },
    {
        "name": "IsSoundPrecached",
        "group": "Engine",
        "description": "Checks if a specified sound is precached.",
        "funcName": "IsSoundPrecached",
        "paramTypes": [
            {
                "name": "sound",
                "type": "string",
                "ref": false,
                "description": "The name of the sound to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the sound is precached, false otherwise."
        }
    },
    {
        "name": "PrecacheDecal",
        "group": "Engine",
        "description": "Precaches a specified decal.",
        "funcName": "PrecacheDecal",
        "paramTypes": [
            {
                "name": "decal",
                "type": "string",
                "ref": false,
                "description": "The name of the decal to be precached."
            },
            {
                "name": "preload",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating if the decal should be preloaded."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer identifier for the decal."
        }
    },
    {
        "name": "IsDecalPrecached",
        "group": "Engine",
        "description": "Checks if a specified decal is precached.",
        "funcName": "IsDecalPrecached",
        "paramTypes": [
            {
                "name": "decal",
                "type": "string",
                "ref": false,
                "description": "The name of the decal to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the decal is precached, false otherwise."
        }
    },
    {
        "name": "GetEconItemSystem",
        "group": "Engine",
        "description": "Returns a pointer to the Economy Item System.",
        "funcName": "GetEconItemSystem",
        "paramTypes": [],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the Econ Item System."
        }
    },
    {
        "name": "IsServerPaused",
        "group": "Engine",
        "description": "Checks if the server is currently paused.",
        "funcName": "IsServerPaused",
        "paramTypes": [],
        "retType": {
            "type": "bool",
            "description": "True if the server is paused, false otherwise."
        }
    },
    {
        "name": "QueueTaskForNextFrame",
        "group": "Engine",
        "description": "Queues a task to be executed on the next frame.",
        "funcName": "QueueTaskForNextFrame",
        "paramTypes": [
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "A callback function to be executed on the next frame."
            },
            {
                "name": "userData",
                "type": "any[]",
                "ref": false,
                "description": "An array intended to hold user-related data, allowing for elements of any type."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "QueueTaskForNextWorldUpdate",
        "group": "Engine",
        "description": "Queues a task to be executed on the next world update.",
        "funcName": "QueueTaskForNextWorldUpdate",
        "paramTypes": [
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "A callback function to be executed on the next world update."
            },
            {
                "name": "userData",
                "type": "any[]",
                "ref": false,
                "description": "An array intended to hold user-related data, allowing for elements of any type."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetSoundDuration",
        "group": "Engine",
        "description": "Returns the duration of a specified sound.",
        "funcName": "GetSoundDuration",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the sound to check."
            }
        ],
        "retType": {
            "type": "float",
            "description": "The duration of the sound in seconds."
        }
    },
    {
        "name": "EmitSound",
        "group": "Engine",
        "description": "Emits a sound from a specified entity.",
        "funcName": "EmitSound",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity that will emit the sound."
            },
            {
                "name": "sound",
                "type": "string",
                "ref": false,
                "description": "The name of the sound to emit."
            },
            {
                "name": "pitch",
                "type": "int32",
                "ref": false,
                "description": "The pitch of the sound."
            },
            {
                "name": "volume",
                "type": "float",
                "ref": false,
                "description": "The volume of the sound."
            },
            {
                "name": "delay",
                "type": "float",
                "ref": false,
                "description": "The delay before the sound is played."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "EmitSoundToClient",
        "group": "Engine",
        "description": "Emits a sound to a specific client.",
        "funcName": "EmitSoundToClient",
        "paramTypes": [
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to whom the sound will be emitted."
            },
            {
                "name": "channel",
                "type": "int32",
                "ref": false,
                "description": "The channel through which the sound will be played."
            },
            {
                "name": "sound",
                "type": "string",
                "ref": false,
                "description": "The name of the sound to emit."
            },
            {
                "name": "volume",
                "type": "float",
                "ref": false,
                "description": "The volume of the sound."
            },
            {
                "name": "soundLevel",
                "type": "int32",
                "ref": false,
                "description": "The level of the sound."
            },
            {
                "name": "flags",
                "type": "int32",
                "ref": false,
                "description": "Additional flags for sound playback."
            },
            {
                "name": "pitch",
                "type": "int32",
                "ref": false,
                "description": "The pitch of the sound."
            },
            {
                "name": "origin",
                "type": "vec3",
                "ref": false,
                "description": "The origin of the sound in 3D space."
            },
            {
                "name": "soundTime",
                "type": "float",
                "ref": false,
                "description": "The time at which the sound should be played."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "EntIndexToEntPointer",
        "group": "Entities",
        "description": "Converts an entity index into an entity pointer.",
        "funcName": "EntIndexToEntPointer",
        "paramTypes": [
            {
                "name": "entityIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the entity to convert."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the entity instance, or nullptr if the entity does not exist."
        }
    },
    {
        "name": "EntPointerToEntIndex",
        "group": "Entities",
        "description": "Retrieves the entity index from an entity pointer.",
        "funcName": "EntPointerToEntIndex",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the entity whose index is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The index of the entity, or -1 if the entity is nullptr."
        }
    },
    {
        "name": "EntPointerToEntHandle",
        "group": "Entities",
        "description": "Converts an entity pointer into an entity handle.",
        "funcName": "EntPointerToEntHandle",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the entity to convert."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle as an integer, or INVALID_EHANDLE_INDEX if the entity is nullptr."
        }
    },
    {
        "name": "EntHandleToEntPointer",
        "group": "Entities",
        "description": "Retrieves the entity pointer from an entity handle.",
        "funcName": "EntHandleToEntPointer",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to convert."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the entity instance, or nullptr if the handle is invalid."
        }
    },
    {
        "name": "EntIndexToEntHandle",
        "group": "Entities",
        "description": "Converts an entity index into an entity handle.",
        "funcName": "EntIndexToEntHandle",
        "paramTypes": [
            {
                "name": "entityIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the entity to convert."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle as an integer, or -1 if the entity index is invalid."
        }
    },
    {
        "name": "EntHandleToEntIndex",
        "group": "Entities",
        "description": "Retrieves the entity index from an entity handle.",
        "funcName": "EntHandleToEntIndex",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The entity handle from which to retrieve the index."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The index of the entity, or -1 if the handle is invalid."
        }
    },
    {
        "name": "IsValidEntHandle",
        "group": "Entities",
        "description": "Checks if the provided entity handle is valid.",
        "funcName": "IsValidEntHandle",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the entity handle is valid, false otherwise."
        }
    },
    {
        "name": "IsValidEntPointer",
        "group": "Entities",
        "description": "Checks if the provided entity pointer is valid.",
        "funcName": "IsValidEntPointer",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "The entity pointer to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the entity pointer is valid, false otherwise."
        }
    },
    {
        "name": "GetFirstActiveEntity",
        "group": "Entities",
        "description": "Retrieves the pointer to the first active entity.",
        "funcName": "GetFirstActiveEntity",
        "paramTypes": [],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the first active entity."
        }
    },
    {
        "name": "GetConcreteEntityListPointer",
        "group": "Entities",
        "description": "Retrieves a pointer to the concrete entity list.",
        "funcName": "GetConcreteEntityListPointer",
        "paramTypes": [],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the entity list structure."
        }
    },
    {
        "name": "HookEntityOutput",
        "group": "Entities",
        "description": "Adds an entity output hook on a specified entity class name.",
        "funcName": "HookEntityOutput",
        "paramTypes": [
            {
                "name": "classname",
                "type": "string",
                "ref": false,
                "description": "The class name of the entity to hook the output for."
            },
            {
                "name": "output",
                "type": "string",
                "ref": false,
                "description": "The output event name to hook."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function to invoke when the output is fired."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the hook was successfully added, false otherwise."
        }
    },
    {
        "name": "UnhookEntityOutput",
        "group": "Entities",
        "description": "Removes an entity output hook.",
        "funcName": "UnhookEntityOutput",
        "paramTypes": [
            {
                "name": "classname",
                "type": "string",
                "ref": false,
                "description": "The class name of the entity from which to unhook the output."
            },
            {
                "name": "output",
                "type": "string",
                "ref": false,
                "description": "The output event name to unhook."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function that was previously hooked."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the hook was successfully removed, false otherwise."
        }
    },
    {
        "name": "FindEntityByClassname",
        "group": "Entities",
        "description": "Searches for an entity by classname.",
        "funcName": "FindEntityByClassname",
        "paramTypes": [
            {
                "name": "startEntity",
                "type": "int32",
                "ref": false,
                "description": "The entity handle from which to start the search."
            },
            {
                "name": "classname",
                "type": "string",
                "ref": false,
                "description": "The class name of the entity to search for."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle of the found entity, or INVALID_EHANDLE_INDEX if no entity is found."
        }
    },
    {
        "name": "FindEntityByName",
        "group": "Entities",
        "description": "Searches for an entity by name.",
        "funcName": "FindEntityByName",
        "paramTypes": [
            {
                "name": "startEntity",
                "type": "int32",
                "ref": false,
                "description": "The entity handle from which to start the search."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the entity to search for."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle of the found entity, or INVALID_EHANDLE_INDEX if no entity is found."
        }
    },
    {
        "name": "CreateEntityByName",
        "group": "Entities",
        "description": "Creates an entity by string name but does not spawn it.",
        "funcName": "CreateEntityByName",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The class name of the entity to create."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle of the created entity, or INVALID_EHANDLE_INDEX if the entity could not be created."
        }
    },
    {
        "name": "DispatchSpawn",
        "group": "Entities",
        "description": "Spawns an entity into the game.",
        "funcName": "DispatchSpawn",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity to spawn."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "DispatchSpawn2",
        "group": "Entities",
        "description": "Spawns an entity into the game with key-value properties.",
        "funcName": "DispatchSpawn2",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity to spawn."
            },
            {
                "name": "keys",
                "type": "string[]",
                "ref": false,
                "description": "A vector of keys representing the property names to set on the entity."
            },
            {
                "name": "values",
                "type": "any[]",
                "ref": false,
                "description": "A vector of values corresponding to the keys, representing the property values to set on the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RemoveEntity",
        "group": "Entities",
        "description": "Marks an entity for deletion.",
        "funcName": "RemoveEntity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity to be deleted."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityClassname",
        "group": "Entities",
        "description": "Retrieves the class name of an entity.",
        "funcName": "GetEntityClassname",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose class name is to be retrieved."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the class name will be stored."
        }
    },
    {
        "name": "GetEntityName",
        "group": "Entities",
        "description": "Retrieves the name of an entity.",
        "funcName": "GetEntityName",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose name is to be retrieved."
            }
        ],
        "retType": {
            "type": "string"
        }
    },
    {
        "name": "SetEntityName",
        "group": "Entities",
        "description": "Sets the name of an entity.",
        "funcName": "SetEntityName",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose name is to be set."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The new name to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityMoveType",
        "group": "Entities",
        "description": "Retrieves the movement type of an entity.",
        "funcName": "GetEntityMoveType",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose movement type is to be retrieved."
            }
        ],
        "retType": {
            "type": "?",
            "description": "The movement type of the entity, or 0 if the entity is invalid."
        }
    },
    {
        "name": "SetEntityMoveType",
        "group": "Entities",
        "description": "Sets the movement type of an entity.",
        "funcName": "SetEntityMoveType",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose movement type is to be set."
            },
            {
                "name": "moveType",
                "type": "?",
                "ref": false,
                "description": "The new movement type to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityGravity",
        "group": "Entities",
        "description": "Retrieves the gravity scale of an entity.",
        "funcName": "GetEntityGravity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose gravity scale is to be retrieved."
            }
        ],
        "retType": {
            "type": "float",
            "description": "The gravity scale of the entity, or 0.0f if the entity is invalid."
        }
    },
    {
        "name": "SetEntityGravity",
        "group": "Entities",
        "description": "Sets the gravity scale of an entity.",
        "funcName": "SetEntityGravity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose gravity scale is to be set."
            },
            {
                "name": "gravity",
                "type": "float",
                "ref": false,
                "description": "The new gravity scale to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityFlags",
        "group": "Entities",
        "description": "Retrieves the flags of an entity.",
        "funcName": "GetEntityFlags",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose flags are to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The flags of the entity, or 0 if the entity is invalid."
        }
    },
    {
        "name": "SetEntityFlags",
        "group": "Entities",
        "description": "Sets the flags of an entity.",
        "funcName": "SetEntityFlags",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose flags are to be set."
            },
            {
                "name": "flags",
                "type": "int32",
                "ref": false,
                "description": "The new flags to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityRenderColor",
        "group": "Entities",
        "description": "Retrieves the render color of an entity.",
        "funcName": "GetEntityRenderColor",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose render color is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The raw color value of the entity's render color, or 0 if the entity is invalid."
        }
    },
    {
        "name": "SetEntityRenderColor",
        "group": "Entities",
        "description": "Sets the render color of an entity.",
        "funcName": "SetEntityRenderColor",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose render color is to be set."
            },
            {
                "name": "color",
                "type": "int32",
                "ref": false,
                "description": "The new raw color value to set for the entity's render color."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityRenderMode",
        "group": "Entities",
        "description": "Retrieves the render mode of an entity.",
        "funcName": "GetEntityRenderMode",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose render mode is to be retrieved."
            }
        ],
        "retType": {
            "type": "int8",
            "description": "The render mode of the entity, or 0 if the entity is invalid."
        }
    },
    {
        "name": "SetEntityRenderMode",
        "group": "Entities",
        "description": "Sets the render mode of an entity.",
        "funcName": "SetEntityRenderMode",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose render mode is to be set."
            },
            {
                "name": "renderMode",
                "type": "int8",
                "ref": false,
                "description": "The new render mode to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityHealth",
        "group": "Entities",
        "description": "Retrieves the health of an entity.",
        "funcName": "GetEntityHealth",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose health is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The health of the entity, or 0 if the entity is invalid."
        }
    },
    {
        "name": "SetEntityHealth",
        "group": "Entities",
        "description": "Sets the health of an entity.",
        "funcName": "SetEntityHealth",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose health is to be set."
            },
            {
                "name": "health",
                "type": "int32",
                "ref": false,
                "description": "The new health value to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetTeamEntity",
        "group": "Entities",
        "description": "Retrieves the team number of an entity.",
        "funcName": "GetTeamEntity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose team number is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The team number of the entity, or 0 if the entity is invalid."
        }
    },
    {
        "name": "SetTeamEntity",
        "group": "Entities",
        "description": "Sets the team number of an entity.",
        "funcName": "SetTeamEntity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose team number is to be set."
            },
            {
                "name": "team",
                "type": "int32",
                "ref": false,
                "description": "The new team number to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityOwner",
        "group": "Entities",
        "description": "Retrieves the owner of an entity.",
        "funcName": "GetEntityOwner",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose owner is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The handle of the owner entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
        }
    },
    {
        "name": "SetEntityOwner",
        "group": "Entities",
        "description": "Sets the owner of an entity.",
        "funcName": "SetEntityOwner",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose owner is to be set."
            },
            {
                "name": "ownerHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the new owner entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityParent",
        "group": "Entities",
        "description": "Retrieves the parent of an entity.",
        "funcName": "GetEntityParent",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose parent is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The handle of the parent entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
        }
    },
    {
        "name": "SetEntityParent",
        "group": "Entities",
        "description": "Sets the parent of an entity.",
        "funcName": "SetEntityParent",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose parent is to be set."
            },
            {
                "name": "parentHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the new parent entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityAbsOrigin",
        "group": "Entities",
        "description": "Retrieves the absolute origin of an entity.",
        "funcName": "GetEntityAbsOrigin",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose absolute origin is to be retrieved."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A vector where the absolute origin will be stored."
        }
    },
    {
        "name": "SetEntityAbsOrigin",
        "group": "Entities",
        "description": "Sets the absolute origin of an entity.",
        "funcName": "SetEntityAbsOrigin",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose absolute origin is to be set."
            },
            {
                "name": "origin",
                "type": "vec3",
                "ref": false,
                "description": "The new absolute origin to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityAngRotation",
        "group": "Entities",
        "description": "Retrieves the angular rotation of an entity.",
        "funcName": "GetEntityAngRotation",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose angular rotation is to be retrieved."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A QAngle where the angular rotation will be stored."
        }
    },
    {
        "name": "SetEntityAngRotation",
        "group": "Entities",
        "description": "Sets the angular rotation of an entity.",
        "funcName": "SetEntityAngRotation",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose angular rotation is to be set."
            },
            {
                "name": "angle",
                "type": "vec3",
                "ref": false,
                "description": "The new angular rotation to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityAbsVelocity",
        "group": "Entities",
        "description": "Retrieves the absolute velocity of an entity.",
        "funcName": "GetEntityAbsVelocity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose absolute velocity is to be retrieved."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A vector where the absolute velocity will be stored."
        }
    },
    {
        "name": "SetEntityAbsVelocity",
        "group": "Entities",
        "description": "Sets the absolute velocity of an entity.",
        "funcName": "SetEntityAbsVelocity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose absolute velocity is to be set."
            },
            {
                "name": "velocity",
                "type": "vec3",
                "ref": false,
                "description": "The new absolute velocity to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityModel",
        "group": "Entities",
        "description": "Retrieves the model name of an entity.",
        "funcName": "GetEntityModel",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose model name is to be retrieved."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the model name will be stored."
        }
    },
    {
        "name": "SetEntityModel",
        "group": "Entities",
        "description": "Sets the model name of an entity.",
        "funcName": "SetEntityModel",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose model name is to be set."
            },
            {
                "name": "model",
                "type": "string",
                "ref": false,
                "description": "The new model name to set for the entity."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntityWaterLevel",
        "group": "Entities",
        "description": "Retrieves the water level of an entity.",
        "funcName": "GetEntityWaterLevel",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose water level is to be retrieved."
            }
        ],
        "retType": {
            "type": "float",
            "description": "The water level of the entity, or 0.0f if the entity is invalid."
        }
    },
    {
        "name": "GetEntityGroundEntity",
        "group": "Entities",
        "description": "Retrieves the ground entity of an entity.",
        "funcName": "GetEntityGroundEntity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose ground entity is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The handle of the ground entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
        }
    },
    {
        "name": "GetEntityEffects",
        "group": "Entities",
        "description": "Retrieves the effects of an entity.",
        "funcName": "GetEntityEffects",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity whose effects are to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The effect flags of the entity, or 0 if the entity is invalid."
        }
    },
    {
        "name": "TeleportEntity",
        "group": "Entities",
        "description": "Teleports an entity to a specified location and orientation.",
        "funcName": "TeleportEntity",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity to teleport."
            },
            {
                "name": "origin",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to a Vector representing the new absolute position. Can be nullptr."
            },
            {
                "name": "angles",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to a QAngle representing the new orientation. Can be nullptr."
            },
            {
                "name": "velocity",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to a Vector representing the new velocity. Can be nullptr."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "AcceptInput",
        "group": "Entities",
        "description": "Invokes a named input method on a specified entity.",
        "funcName": "AcceptInput",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the target entity that will receive the input."
            },
            {
                "name": "inputName",
                "type": "string",
                "ref": false,
                "description": "The name of the input action to invoke."
            },
            {
                "name": "activatorHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity that initiated the sequence of actions."
            },
            {
                "name": "callerHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity sending this event. Use -1 to specify"
            },
            {
                "name": "value",
                "type": "any",
                "ref": false,
                "description": "The value associated with the input action."
            },
            {
                "name": "type",
                "type": "?",
                "ref": false,
                "description": "The type or classification of the value."
            },
            {
                "name": "outputId",
                "type": "int32",
                "ref": false,
                "description": "An identifier for tracking the output of this operation."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "HookEvent",
        "group": "Events",
        "description": "Creates a hook for when a game event is fired.",
        "funcName": "HookEvent",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the event to hook."
            },
            {
                "name": "pCallback",
                "type": "?",
                "ref": false,
                "description": "The callback function to call when the event is fired."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer indicating the result of the hook operation."
        }
    },
    {
        "name": "UnhookEvent",
        "group": "Events",
        "description": "Removes a hook for when a game event is fired.",
        "funcName": "UnhookEvent",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the event to unhook."
            },
            {
                "name": "pCallback",
                "type": "?",
                "ref": false,
                "description": "The callback function to remove."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer indicating the result of the unhook operation."
        }
    },
    {
        "name": "CreateEvent",
        "group": "Events",
        "description": "Creates a game event to be fired later.",
        "funcName": "CreateEvent",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the event to create."
            },
            {
                "name": "force",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating whether to force the creation of the event."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the created EventInfo structure."
        }
    },
    {
        "name": "FireEvent",
        "group": "Events",
        "description": "Fires a game event.",
        "funcName": "FireEvent",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "bDontBroadcast",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating whether to broadcast the event."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "FireEventToClient",
        "group": "Events",
        "description": "Fires a game event to a specific client.",
        "funcName": "FireEventToClient",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "playerSlot",
                "type": "int32",
                "ref": false,
                "description": "The index of the player's slot to fire the event to."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "CancelCreatedEvent",
        "group": "Events",
        "description": "Cancels a previously created game event that has not been fired.",
        "funcName": "CancelCreatedEvent",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure of the event to cancel."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEventBool",
        "group": "Events",
        "description": "Retrieves the boolean value of a game event's key.",
        "funcName": "GetEventBool",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the boolean value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "The boolean value associated with the key."
        }
    },
    {
        "name": "GetEventFloat",
        "group": "Events",
        "description": "Retrieves the float value of a game event's key.",
        "funcName": "GetEventFloat",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the float value."
            }
        ],
        "retType": {
            "type": "float",
            "description": "The float value associated with the key."
        }
    },
    {
        "name": "GetEventInt",
        "group": "Events",
        "description": "Retrieves the integer value of a game event's key.",
        "funcName": "GetEventInt",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the integer value."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The integer value associated with the key."
        }
    },
    {
        "name": "GetEventUInt64",
        "group": "Events",
        "description": "Retrieves the long integer value of a game event's key.",
        "funcName": "GetEventUInt64",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the long integer value."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "The long integer value associated with the key."
        }
    },
    {
        "name": "GetEventString",
        "group": "Events",
        "description": "Retrieves the string value of a game event's key.",
        "funcName": "GetEventString",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the string value."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the result will be stored."
        }
    },
    {
        "name": "GetEventPtr",
        "group": "Events",
        "description": "Retrieves the pointer value of a game event's key.",
        "funcName": "GetEventPtr",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the pointer value."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "The pointer value associated with the key."
        }
    },
    {
        "name": "GetEventPlayerController",
        "group": "Events",
        "description": "Retrieves the player controller address of a game event's key.",
        "funcName": "GetEventPlayerController",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the player controller address."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the player controller associated with the key."
        }
    },
    {
        "name": "GetEventPlayerIndex",
        "group": "Events",
        "description": "Retrieves the player index of a game event's key.",
        "funcName": "GetEventPlayerIndex",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the player index."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The player index associated with the key."
        }
    },
    {
        "name": "GetEventPlayerPawn",
        "group": "Events",
        "description": "Retrieves the player pawn address of a game event's key.",
        "funcName": "GetEventPlayerPawn",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the player pawn address."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the player pawn associated with the key."
        }
    },
    {
        "name": "GetEventEntity",
        "group": "Events",
        "description": "Retrieves the entity address of a game event's key.",
        "funcName": "GetEventEntity",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the entity address."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the entity associated with the key."
        }
    },
    {
        "name": "GetEventEntityIndex",
        "group": "Events",
        "description": "Retrieves the entity index of a game event's key.",
        "funcName": "GetEventEntityIndex",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the entity index."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity index associated with the key."
        }
    },
    {
        "name": "GetEventEntityHandle",
        "group": "Events",
        "description": "Retrieves the entity handle of a game event's key.",
        "funcName": "GetEventEntityHandle",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to retrieve the entity handle."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle associated with the key."
        }
    },
    {
        "name": "GetEventName",
        "group": "Events",
        "description": "Retrieves the name of a game event.",
        "funcName": "GetEventName",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the result will be stored."
        }
    },
    {
        "name": "SetEventBool",
        "group": "Events",
        "description": "Sets the boolean value of a game event's key.",
        "funcName": "SetEventBool",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the boolean value."
            },
            {
                "name": "value",
                "type": "bool",
                "ref": false,
                "description": "The boolean value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventFloat",
        "group": "Events",
        "description": "Sets the floating point value of a game event's key.",
        "funcName": "SetEventFloat",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the float value."
            },
            {
                "name": "value",
                "type": "float",
                "ref": false,
                "description": "The float value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventInt",
        "group": "Events",
        "description": "Sets the integer value of a game event's key.",
        "funcName": "SetEventInt",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the integer value."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The integer value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventUInt64",
        "group": "Events",
        "description": "Sets the long integer value of a game event's key.",
        "funcName": "SetEventUInt64",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the long integer value."
            },
            {
                "name": "value",
                "type": "uint64",
                "ref": false,
                "description": "The long integer value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventString",
        "group": "Events",
        "description": "Sets the string value of a game event's key.",
        "funcName": "SetEventString",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the string value."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventPtr",
        "group": "Events",
        "description": "Sets the pointer value of a game event's key.",
        "funcName": "SetEventPtr",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the pointer value."
            },
            {
                "name": "value",
                "type": "ptr64",
                "ref": false,
                "description": "The pointer value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventPlayerController",
        "group": "Events",
        "description": "Sets the player controller address of a game event's key.",
        "funcName": "SetEventPlayerController",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the player controller address."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "A handle to the player controller to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventPlayerIndex",
        "group": "Events",
        "description": "Sets the player index value of a game event's key.",
        "funcName": "SetEventPlayerIndex",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the player index value."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The player index value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventEntity",
        "group": "Events",
        "description": "Sets the entity address of a game event's key.",
        "funcName": "SetEventEntity",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the entity address."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "A handle to the entity to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventEntityIndex",
        "group": "Events",
        "description": "Sets the entity index of a game event's key.",
        "funcName": "SetEventEntityIndex",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the entity index."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity index value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventEntityHandle",
        "group": "Events",
        "description": "Sets the entity handle of a game event's key.",
        "funcName": "SetEventEntityHandle",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "key",
                "type": "string",
                "ref": false,
                "description": "The key for which to set the entity handle."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle value to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetEventBroadcast",
        "group": "Events",
        "description": "Sets whether an event's broadcasting will be disabled or not.",
        "funcName": "SetEventBroadcast",
        "paramTypes": [
            {
                "name": "pInfo",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the EventInfo structure containing event data."
            },
            {
                "name": "dontBroadcast",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating whether to disable broadcasting."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "LoadEventsFromFile",
        "group": "Events",
        "description": "Load game event descriptions from a file (e.g., \"resource/gameevents.res\").",
        "funcName": "LoadEventsFromFile",
        "paramTypes": [
            {
                "name": "path",
                "type": "string",
                "ref": false,
                "description": "The path to the file containing event descriptions."
            },
            {
                "name": "searchAll",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating whether to search all paths for the file."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer indicating the result of the loading operation."
        }
    },
    {
        "name": "CloseGameConfigFile",
        "group": "Gameconfig",
        "description": "Closes a game configuration file.",
        "funcName": "CloseGameConfigFile",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object to be closed."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "LoadGameConfigFile",
        "group": "Gameconfig",
        "description": "Loads a game configuration file.",
        "funcName": "LoadGameConfigFile",
        "paramTypes": [
            {
                "name": "paths",
                "type": "string[]",
                "ref": false,
                "description": "The paths to the game configuration file to be loaded."
            }
        ],
        "retType": {
            "type": "uint32",
            "description": "A handle to the loaded CGameConfig object, or nullptr if loading fails."
        }
    },
    {
        "name": "GetGameConfigPaths",
        "group": "Gameconfig",
        "description": "Retrieves the path of a game configuration.",
        "funcName": "GetGameConfigPaths",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object whose path is to be retrieved."
            }
        ],
        "retType": {
            "type": "string[]",
            "description": "Am array of paths where the configuration is stored."
        }
    },
    {
        "name": "GetGameConfigLibrary",
        "group": "Gameconfig",
        "description": "Retrieves a library associated with the game configuration.",
        "funcName": "GetGameConfigLibrary",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object from which to retrieve the library."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the library to be retrieved."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the library will be stored."
        }
    },
    {
        "name": "GetGameConfigSignature",
        "group": "Gameconfig",
        "description": "Retrieves the signature associated with the game configuration.",
        "funcName": "GetGameConfigSignature",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object from which to retrieve the signature."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the signature to be retrieved."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the signature will be stored."
        }
    },
    {
        "name": "GetGameConfigSymbol",
        "group": "Gameconfig",
        "description": "Retrieves a symbol associated with the game configuration.",
        "funcName": "GetGameConfigSymbol",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object from which to retrieve the symbol."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the symbol to be retrieved."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the symbol will be stored."
        }
    },
    {
        "name": "GetGameConfigPatch",
        "group": "Gameconfig",
        "description": "Retrieves a patch associated with the game configuration.",
        "funcName": "GetGameConfigPatch",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object from which to retrieve the patch."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the patch to be retrieved."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string where the patch will be stored."
        }
    },
    {
        "name": "GetGameConfigOffset",
        "group": "Gameconfig",
        "description": "Retrieves the offset associated with a name from the game configuration.",
        "funcName": "GetGameConfigOffset",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object from which to retrieve the offset."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name whose offset is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The offset associated with the specified name."
        }
    },
    {
        "name": "GetGameConfigAddress",
        "group": "Gameconfig",
        "description": "Retrieves the address associated with a name from the game configuration.",
        "funcName": "GetGameConfigAddress",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object from which to retrieve the address."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name whose address is to be retrieved."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the address associated with the specified name."
        }
    },
    {
        "name": "GetGameConfigMemSig",
        "group": "Gameconfig",
        "description": "Retrieves the memory signature associated with a name from the game configuration.",
        "funcName": "GetGameConfigMemSig",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "An id to the GameConfig object from which to retrieve the memory signature."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name whose memory signature is to be resolved and retrieved."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the memory signature associated with the specified name."
        }
    },
    {
        "name": "GetGameRules",
        "group": "Gamerules",
        "description": "Retrieves the pointer to the current game rules instance.",
        "funcName": "GetGameRules",
        "paramTypes": [],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the game rules object."
        }
    },
    {
        "name": "TerminateRound",
        "group": "Gamerules",
        "description": "Forces the round to end with a specified reason and delay.",
        "funcName": "TerminateRound",
        "paramTypes": [
            {
                "name": "delay",
                "type": "float",
                "ref": false,
                "description": "Time (in seconds) to delay before the next round starts."
            },
            {
                "name": "reason",
                "type": "?",
                "ref": false,
                "description": "The reason for ending the round, defined by the CSRoundEndReason enum."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RegisterLoggingChannel",
        "group": "Logger",
        "description": "Registers a new logging channel with specified properties.",
        "funcName": "RegisterLoggingChannel",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the logging channel."
            },
            {
                "name": "iFlags",
                "type": "int32",
                "ref": false,
                "description": "Flags associated with the logging channel."
            },
            {
                "name": "verbosity",
                "type": "?",
                "ref": false,
                "description": "The verbosity level for the logging channel."
            },
            {
                "name": "color",
                "type": "int32",
                "ref": false,
                "description": "The color for messages logged to this channel."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The ID of the newly created logging channel."
        }
    },
    {
        "name": "AddLoggerTagToChannel",
        "group": "Logger",
        "description": "Adds a tag to a specified logging channel.",
        "funcName": "AddLoggerTagToChannel",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel to which the tag will be added."
            },
            {
                "name": "tagName",
                "type": "string",
                "ref": false,
                "description": "The name of the tag to add to the channel."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "HasLoggerTag",
        "group": "Logger",
        "description": "Checks if a specified tag exists in a logging channel.",
        "funcName": "HasLoggerTag",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "tag",
                "type": "string",
                "ref": false,
                "description": "The name of the tag to check for."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the tag exists in the channel, otherwise false."
        }
    },
    {
        "name": "IsLoggerChannelEnabledBySeverity",
        "group": "Logger",
        "description": "Checks if a logging channel is enabled based on severity.",
        "funcName": "IsLoggerChannelEnabledBySeverity",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "severity",
                "type": "?",
                "ref": false,
                "description": "The severity level to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the channel is enabled for the specified severity, otherwise false."
        }
    },
    {
        "name": "IsLoggerChannelEnabledByVerbosity",
        "group": "Logger",
        "description": "Checks if a logging channel is enabled based on verbosity.",
        "funcName": "IsLoggerChannelEnabledByVerbosity",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "verbosity",
                "type": "?",
                "ref": false,
                "description": "The verbosity level to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the channel is enabled for the specified verbosity, otherwise false."
        }
    },
    {
        "name": "GetLoggerChannelVerbosity",
        "group": "Logger",
        "description": "Retrieves the verbosity level of a logging channel.",
        "funcName": "GetLoggerChannelVerbosity",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The verbosity level of the specified logging channel."
        }
    },
    {
        "name": "SetLoggerChannelVerbosity",
        "group": "Logger",
        "description": "Sets the verbosity level of a logging channel.",
        "funcName": "SetLoggerChannelVerbosity",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "verbosity",
                "type": "?",
                "ref": false,
                "description": "The new verbosity level to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetLoggerChannelVerbosityByName",
        "group": "Logger",
        "description": "Sets the verbosity level of a logging channel by name.",
        "funcName": "SetLoggerChannelVerbosityByName",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the logging channel."
            },
            {
                "name": "verbosity",
                "type": "?",
                "ref": false,
                "description": "The new verbosity level to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SetLoggerChannelVerbosityByTag",
        "group": "Logger",
        "description": "Sets the verbosity level of a logging channel by tag.",
        "funcName": "SetLoggerChannelVerbosityByTag",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "tag",
                "type": "string",
                "ref": false,
                "description": "The name of the tag."
            },
            {
                "name": "verbosity",
                "type": "?",
                "ref": false,
                "description": "The new verbosity level to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetLoggerChannelColor",
        "group": "Logger",
        "description": "Retrieves the color setting of a logging channel.",
        "funcName": "GetLoggerChannelColor",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The color value of the specified logging channel."
        }
    },
    {
        "name": "SetLoggerChannelColor",
        "group": "Logger",
        "description": "Sets the color setting of a logging channel.",
        "funcName": "SetLoggerChannelColor",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "color",
                "type": "int32",
                "ref": false,
                "description": "The new color value to set for the channel."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetLoggerChannelFlags",
        "group": "Logger",
        "description": "Retrieves the flags of a logging channel.",
        "funcName": "GetLoggerChannelFlags",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The flags of the specified logging channel."
        }
    },
    {
        "name": "SetLoggerChannelFlags",
        "group": "Logger",
        "description": "Sets the flags of a logging channel.",
        "funcName": "SetLoggerChannelFlags",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "eFlags",
                "type": "?",
                "ref": false,
                "description": "The new flags to set for the channel."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "Log",
        "group": "Logger",
        "description": "Logs a message to a specified channel with a severity level.",
        "funcName": "Log",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "severity",
                "type": "?",
                "ref": false,
                "description": "The severity level for the log message."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to log."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer indicating the result of the logging operation."
        }
    },
    {
        "name": "LogColored",
        "group": "Logger",
        "description": "Logs a colored message to a specified channel with a severity level.",
        "funcName": "LogColored",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "severity",
                "type": "?",
                "ref": false,
                "description": "The severity level for the log message."
            },
            {
                "name": "color",
                "type": "int32",
                "ref": false,
                "description": "The color for the log message."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to log."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer indicating the result of the logging operation."
        }
    },
    {
        "name": "LogFull",
        "group": "Logger",
        "description": "Logs a detailed message to a specified channel, including source code info.",
        "funcName": "LogFull",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "severity",
                "type": "?",
                "ref": false,
                "description": "The severity level for the log message."
            },
            {
                "name": "file",
                "type": "string",
                "ref": false,
                "description": "The file name where the log call occurred."
            },
            {
                "name": "line",
                "type": "int32",
                "ref": false,
                "description": "The line number where the log call occurred."
            },
            {
                "name": "function",
                "type": "string",
                "ref": false,
                "description": "The name of the function where the log call occurred."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to log."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer indicating the result of the logging operation."
        }
    },
    {
        "name": "LogFullColored",
        "group": "Logger",
        "description": "Logs a detailed colored message to a specified channel, including source code info.",
        "funcName": "LogFullColored",
        "paramTypes": [
            {
                "name": "channelID",
                "type": "int32",
                "ref": false,
                "description": "The ID of the logging channel."
            },
            {
                "name": "severity",
                "type": "?",
                "ref": false,
                "description": "The severity level for the log message."
            },
            {
                "name": "file",
                "type": "string",
                "ref": false,
                "description": "The file name where the log call occurred."
            },
            {
                "name": "line",
                "type": "int32",
                "ref": false,
                "description": "The line number where the log call occurred."
            },
            {
                "name": "function",
                "type": "string",
                "ref": false,
                "description": "The name of the function where the log call occurred."
            },
            {
                "name": "color",
                "type": "int32",
                "ref": false,
                "description": "The color for the log message."
            },
            {
                "name": "message",
                "type": "string",
                "ref": false,
                "description": "The message to log."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "An integer indicating the result of the logging operation."
        }
    },
    {
        "name": "GetModule",
        "group": "Modules",
        "description": "Retrieves a module by name.",
        "funcName": "GetModule",
        "paramTypes": [
            {
                "name": "name",
                "type": "string",
                "ref": false,
                "description": "The name of the module."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the module."
        }
    },
    {
        "name": "GetModuleVirtualTableByName",
        "group": "Modules",
        "description": "Retrieves the virtual table of a module by name.",
        "funcName": "GetModuleVirtualTableByName",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            },
            {
                "name": "tableName",
                "type": "string",
                "ref": false,
                "description": "Name of the virtual table."
            },
            {
                "name": "decorated",
                "type": "bool",
                "ref": false,
                "description": "Whether the table name is decorated."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the virtual table."
        }
    },
    {
        "name": "GetModuleFunctionByName",
        "group": "Modules",
        "description": "Retrieves a function from a module by name.",
        "funcName": "GetModuleFunctionByName",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            },
            {
                "name": "functionName",
                "type": "string",
                "ref": false,
                "description": "Name of the function."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the function."
        }
    },
    {
        "name": "GetModuleSectionNameByName",
        "group": "Modules",
        "description": "Retrieves the name of a section in a module.",
        "funcName": "GetModuleSectionNameByName",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            },
            {
                "name": "sectionName",
                "type": "string",
                "ref": false,
                "description": "Name of the section."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The name of the section as a string."
        }
    },
    {
        "name": "GetModuleSectionBaseByName",
        "group": "Modules",
        "description": "Retrieves the base address of a section in a module.",
        "funcName": "GetModuleSectionBaseByName",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            },
            {
                "name": "sectionName",
                "type": "string",
                "ref": false,
                "description": "Name of the section."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the base address of the section."
        }
    },
    {
        "name": "GetModuleSectionSizeByName",
        "group": "Modules",
        "description": "Retrieves the size of a section in a module.",
        "funcName": "GetModuleSectionSizeByName",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            },
            {
                "name": "sectionName",
                "type": "string",
                "ref": false,
                "description": "Name of the section."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "The size of the section as a 64-bit unsigned integer."
        }
    },
    {
        "name": "GetModuleHandle",
        "group": "Modules",
        "description": "Retrieves the handle of a module.",
        "funcName": "GetModuleHandle",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the module handle."
        }
    },
    {
        "name": "GetModuleBase",
        "group": "Modules",
        "description": "Retrieves the base address of a module.",
        "funcName": "GetModuleBase",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the module base address."
        }
    },
    {
        "name": "GetModulePath",
        "group": "Modules",
        "description": "Retrieves the file path of a module.",
        "funcName": "GetModulePath",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The file path of the module as a string."
        }
    },
    {
        "name": "GetModuleName",
        "group": "Modules",
        "description": "Retrieves the name of a module.",
        "funcName": "GetModuleName",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The name of the module as a string."
        }
    },
    {
        "name": "GetModuleLastError",
        "group": "Modules",
        "description": "Retrieves the last error message from a module.",
        "funcName": "GetModuleLastError",
        "paramTypes": [
            {
                "name": "module",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the module."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The last error message as a string."
        }
    },
    {
        "name": "GetSchemaOffset",
        "group": "Schema",
        "description": "Get the offset of a member in a given schema class.",
        "funcName": "GetSchemaOffset",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member whose offset is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The offset of the member in the class."
        }
    },
    {
        "name": "GetSchemaChainOffset",
        "group": "Schema",
        "description": "Get the offset of a chain in a given schema class.",
        "funcName": "GetSchemaChainOffset",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The offset of the chain entity in the class."
        }
    },
    {
        "name": "IsSchemaFieldNetworked",
        "group": "Schema",
        "description": "Check if a schema field is networked.",
        "funcName": "IsSchemaFieldNetworked",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the member is networked, false otherwise."
        }
    },
    {
        "name": "GetSchemaClassSize",
        "group": "Schema",
        "description": "Get the size of a schema class.",
        "funcName": "GetSchemaClassSize",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The size of the class in bytes, or -1 if the class is not found."
        }
    },
    {
        "name": "GetEntData2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the integer value at the given offset.",
        "funcName": "GetEntData2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "The integer value at the given memory location."
        }
    },
    {
        "name": "SetEntData2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the integer value at the given offset.",
        "funcName": "SetEntData2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataFloat2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the float value at the given offset.",
        "funcName": "GetEntDataFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "double",
            "description": "The float value at the given memory location."
        }
    },
    {
        "name": "SetEntDataFloat2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the float value at the given offset.",
        "funcName": "SetEntDataFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataString2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the string value at the given offset.",
        "funcName": "GetEntDataString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The string value at the given memory location."
        }
    },
    {
        "name": "SetEntDataString2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the string at the given offset.",
        "funcName": "SetEntDataString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataVector2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the vector value at the given offset.",
        "funcName": "GetEntDataVector2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The vector value at the given memory location."
        }
    },
    {
        "name": "SetEntDataVector2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the vector at the given offset.",
        "funcName": "SetEntDataVector2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataEnt2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and retrieves the entity handle at the given offset.",
        "funcName": "GetEntDataEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle at the given memory location."
        }
    },
    {
        "name": "SetEntDataEnt2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the entity handle at the given offset.",
        "funcName": "SetEntDataEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "ChangeEntityState2",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity pointer.",
        "funcName": "ChangeEntityState2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntData",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the integer value at the given offset.",
        "funcName": "GetEntData",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "The integer value at the given memory location."
        }
    },
    {
        "name": "SetEntData",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the integer value at the given offset.",
        "funcName": "SetEntData",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataFloat",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the float value at the given offset.",
        "funcName": "GetEntDataFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "double",
            "description": "The float value at the given memory location."
        }
    },
    {
        "name": "SetEntDataFloat",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the float value at the given offset.",
        "funcName": "SetEntDataFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataString",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the string value at the given offset.",
        "funcName": "GetEntDataString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The string value at the given memory location."
        }
    },
    {
        "name": "SetEntDataString",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the string at the given offset.",
        "funcName": "SetEntDataString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataVector",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the vector value at the given offset.",
        "funcName": "GetEntDataVector",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The vector value at the given memory location."
        }
    },
    {
        "name": "SetEntDataVector",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the vector at the given offset.",
        "funcName": "SetEntDataVector",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataEnt",
        "group": "Schema",
        "description": "Peeks into an entity's object data and retrieves the entity handle at the given offset.",
        "funcName": "GetEntDataEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle at the given memory location."
        }
    },
    {
        "name": "SetEntDataEnt",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the entity handle at the given offset.",
        "funcName": "SetEntDataEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "ChangeEntityState",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity handle.",
        "funcName": "ChangeEntityState",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntSchemaArraySize2",
        "group": "Schema",
        "description": "Retrieves the count of values that an entity schema's array can store.",
        "funcName": "GetEntSchemaArraySize2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "Size of array (in elements) or 0 if schema is not an array."
        }
    },
    {
        "name": "GetEntSchema2",
        "group": "Schema",
        "description": "Retrieves an integer value from an entity's schema.",
        "funcName": "GetEntSchema2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchema2",
        "group": "Schema",
        "description": "Sets an integer value in an entity's schema.",
        "funcName": "SetEntSchema2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaFloat2",
        "group": "Schema",
        "description": "Retrieves a float value from an entity's schema.",
        "funcName": "GetEntSchemaFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "double",
            "description": "A float value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaFloat2",
        "group": "Schema",
        "description": "Sets a float value in an entity's schema.",
        "funcName": "SetEntSchemaFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An float value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaString2",
        "group": "Schema",
        "description": "Retrieves a string value from an entity's schema.",
        "funcName": "GetEntSchemaString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaString2",
        "group": "Schema",
        "description": "Sets a string value in an entity's schema.",
        "funcName": "SetEntSchemaString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An string value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector3D2",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector3D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A vector value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector3D2",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector3D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector2D2",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector2D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec2",
            "description": "A vector value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector2D2",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector2D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector4D2",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector4D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec4",
            "description": "A vector value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector4D2",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector4D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec4",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaEnt2",
        "group": "Schema",
        "description": "Retrieves an entity handle from an entity's schema.",
        "funcName": "GetEntSchemaEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaEnt2",
        "group": "Schema",
        "description": "Sets an entity handle in an entity's schema.",
        "funcName": "SetEntSchemaEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An entity handle at the given schema offset."
        }
    },
    {
        "name": "NetworkStateChanged2",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity pointer.",
        "funcName": "NetworkStateChanged2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class that contains the member."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member to be set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntSchemaArraySize",
        "group": "Schema",
        "description": "Retrieves the count of values that an entity schema's array can store.",
        "funcName": "GetEntSchemaArraySize",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "Size of array (in elements) or 0 if schema is not an array."
        }
    },
    {
        "name": "GetEntSchema",
        "group": "Schema",
        "description": "Retrieves an integer value from an entity's schema.",
        "funcName": "GetEntSchema",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchema",
        "group": "Schema",
        "description": "Sets an integer value in an entity's schema.",
        "funcName": "SetEntSchema",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaFloat",
        "group": "Schema",
        "description": "Retrieves a float value from an entity's schema.",
        "funcName": "GetEntSchemaFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "double",
            "description": "A float value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaFloat",
        "group": "Schema",
        "description": "Sets a float value in an entity's schema.",
        "funcName": "SetEntSchemaFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An float value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaString",
        "group": "Schema",
        "description": "Retrieves a string value from an entity's schema.",
        "funcName": "GetEntSchemaString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaString",
        "group": "Schema",
        "description": "Sets a string value in an entity's schema.",
        "funcName": "SetEntSchemaString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An string value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector3D",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector3D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector3D",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector3D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector2D",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector2D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec2",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector2D",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector2D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector4D",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector4D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec4",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector4D",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector4D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec4",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaEnt",
        "group": "Schema",
        "description": "Retrieves an entity handle from an entity's schema.",
        "funcName": "GetEntSchemaEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaEnt",
        "group": "Schema",
        "description": "Sets an entity handle in an entity's schema.",
        "funcName": "SetEntSchemaEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An entity handle at the given schema offset."
        }
    },
    {
        "name": "NetworkStateChanged",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity handle.",
        "funcName": "NetworkStateChanged",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class that contains the member."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member to be set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "CreateTimer",
        "group": "Timers",
        "description": "Creates a new timer that executes a callback function at specified delays.",
        "funcName": "CreateTimer",
        "paramTypes": [
            {
                "name": "delay",
                "type": "double",
                "ref": false,
                "description": "The time delay in seconds between each callback execution."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The function to be called when the timer expires."
            },
            {
                "name": "flags",
                "type": "?",
                "ref": false,
                "description": "Flags that modify the behavior of the timer (e.g., no-map change, repeating)."
            },
            {
                "name": "userData",
                "type": "any[]",
                "ref": false,
                "description": "An array intended to hold user-related data, allowing for elements of any type."
            }
        ],
        "retType": {
            "type": "uint32",
            "description": "A handle of the newly created CTimer object, or -1 if the timer could not be created."
        }
    },
    {
        "name": "KillsTimer",
        "group": "Timers",
        "description": "Stops and removes an existing timer.",
        "funcName": "KillsTimer",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RescheduleTimer",
        "group": "Timers",
        "description": "Reschedules an existing timer with a new delay.",
        "funcName": "RescheduleTimer",
        "paramTypes": [
            {
                "name": "id",
                "type": "uint32",
                "ref": false,
                "description": "A handle of the CTimer object to be rescheduled."
            },
            {
                "name": "newDelay",
                "type": "double",
                "ref": false,
                "description": "The new delay in seconds between each callback execution."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetTickInterval",
        "group": "Timers",
        "description": "Returns the number of seconds in between game server ticks.",
        "funcName": "GetTickInterval",
        "paramTypes": [],
        "retType": {
            "type": "double",
            "description": "The tick interval value."
        }
    },
    {
        "name": "GetTickedTime",
        "group": "Timers",
        "description": "Returns the simulated game time.",
        "funcName": "GetTickedTime",
        "paramTypes": [],
        "retType": {
            "type": "double",
            "description": "The ticked time value."
        }
    },
    {
        "name": "HookUserMessage",
        "group": "Protobuf",
        "description": "Hooks a user message with a callback.",
        "funcName": "HookUserMessage",
        "paramTypes": [
            {
                "name": "messageId",
                "type": "uint16",
                "ref": false,
                "description": "The ID of the message to hook."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function to invoke when the message is received."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether to hook the message in the post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the hook was successfully added, false otherwise."
        }
    },
    {
        "name": "UnhookUserMessage",
        "group": "Protobuf",
        "description": "Unhooks a previously hooked user message.",
        "funcName": "UnhookUserMessage",
        "paramTypes": [
            {
                "name": "messageId",
                "type": "uint16",
                "ref": false,
                "description": "The ID of the message to unhook."
            },
            {
                "name": "callback",
                "type": "?",
                "ref": false,
                "description": "The callback function to remove."
            },
            {
                "name": "mode",
                "type": "?",
                "ref": false,
                "description": "Whether the hook was in post mode (after processing) or pre mode (before processing)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the hook was successfully removed, false otherwise."
        }
    },
    {
        "name": "UserMessageCreateFromSerializable",
        "group": "Protobuf",
        "description": "Creates a UserMessage from a serializable message.",
        "funcName": "UserMessageCreateFromSerializable",
        "paramTypes": [
            {
                "name": "msgSerializable",
                "type": "ptr64",
                "ref": false,
                "description": "The serializable message."
            },
            {
                "name": "message",
                "type": "ptr64",
                "ref": false,
                "description": "The network message."
            },
            {
                "name": "nRecipientCount",
                "type": "int32",
                "ref": false,
                "description": "The number of recipients."
            },
            {
                "name": "recipientMask",
                "type": "ptr64",
                "ref": false,
                "description": "The recipient mask."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the newly created UserMessage."
        }
    },
    {
        "name": "UserMessageCreateFromName",
        "group": "Protobuf",
        "description": "Creates a UserMessage from a message name.",
        "funcName": "UserMessageCreateFromName",
        "paramTypes": [
            {
                "name": "messageName",
                "type": "string",
                "ref": false,
                "description": "The name of the message."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the newly created UserMessage."
        }
    },
    {
        "name": "UserMessageCreateFromId",
        "group": "Protobuf",
        "description": "Creates a UserMessage from a message ID.",
        "funcName": "UserMessageCreateFromId",
        "paramTypes": [
            {
                "name": "messageId",
                "type": "uint16",
                "ref": false,
                "description": "The ID of the message."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the newly created UserMessage."
        }
    },
    {
        "name": "UserMessageDestroy",
        "group": "Protobuf",
        "description": "Destroys a UserMessage and frees its memory.",
        "funcName": "UserMessageDestroy",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage to destroy."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "UserMessageSend",
        "group": "Protobuf",
        "description": "Sends a UserMessage to the specified recipients.",
        "funcName": "UserMessageSend",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage to send."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "UserMessageGetMessageName",
        "group": "Protobuf",
        "description": "Gets the name of the message.",
        "funcName": "UserMessageGetMessageName",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The name of the message as a string."
        }
    },
    {
        "name": "UserMessageGetMessageID",
        "group": "Protobuf",
        "description": "Gets the ID of the message.",
        "funcName": "UserMessageGetMessageID",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            }
        ],
        "retType": {
            "type": "uint16",
            "description": "The ID of the message."
        }
    },
    {
        "name": "UserMessageHasField",
        "group": "Protobuf",
        "description": "Checks if the message has a specific field.",
        "funcName": "UserMessageHasField",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field exists, false otherwise."
        }
    },
    {
        "name": "UserMessageGetProtobufMessage",
        "group": "Protobuf",
        "description": "Gets the protobuf message associated with the UserMessage.",
        "funcName": "UserMessageGetProtobufMessage",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the protobuf message."
        }
    },
    {
        "name": "UserMessageGetSerializableMessage",
        "group": "Protobuf",
        "description": "Gets the serializable message associated with the UserMessage.",
        "funcName": "UserMessageGetSerializableMessage",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the serializable message."
        }
    },
    {
        "name": "UserMessageFindMessageIdByName",
        "group": "Protobuf",
        "description": "Finds a message ID by its name.",
        "funcName": "UserMessageFindMessageIdByName",
        "paramTypes": [
            {
                "name": "messageName",
                "type": "string",
                "ref": false,
                "description": "The name of the message."
            }
        ],
        "retType": {
            "type": "uint16",
            "description": "The ID of the message, or 0 if the message was not found."
        }
    },
    {
        "name": "UserMessageGetRecipientMask",
        "group": "Protobuf",
        "description": "Gets the recipient mask for the UserMessage.",
        "funcName": "UserMessageGetRecipientMask",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "A the recipient mask."
        }
    },
    {
        "name": "UserMessageSetRecipientMask",
        "group": "Protobuf",
        "description": "Sets the recipient mask for the UserMessage.",
        "funcName": "UserMessageSetRecipientMask",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "mask",
                "type": "uint64",
                "ref": false,
                "description": "The recipient mask to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "UserMessageIsManuallyAllocated",
        "group": "Protobuf",
        "description": "Checks if the UserMessage was manually allocated.",
        "funcName": "UserMessageIsManuallyAllocated",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the message was manually allocated, false otherwise."
        }
    },
    {
        "name": "UserMessageGetMessage",
        "group": "Protobuf",
        "description": "Gets a nested message from a field in the UserMessage.",
        "funcName": "UserMessageGetMessage",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "message",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to store the retrieved message."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the message was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "UserMessageGetRepeatedMessage",
        "group": "Protobuf",
        "description": "Gets a repeated nested message from a field in the UserMessage.",
        "funcName": "UserMessageGetRepeatedMessage",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "message",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to store the retrieved message."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the message was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "UserMessageAddMessage",
        "group": "Protobuf",
        "description": "Adds a nested message to a repeated field in the UserMessage.",
        "funcName": "UserMessageAddMessage",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "message",
                "type": "ptr64",
                "ref": false,
                "description": "A pointer to the message to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the message was successfully added, false otherwise."
        }
    },
    {
        "name": "UserMessageGetRepeatedFieldCount",
        "group": "Protobuf",
        "description": "Gets the count of repeated fields in a field of the UserMessage.",
        "funcName": "UserMessageGetRepeatedFieldCount",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The count of repeated fields, or -1 if the field is not repeated or does not exist."
        }
    },
    {
        "name": "UserMessageRemoveRepeatedFieldValue",
        "group": "Protobuf",
        "description": "Removes a value from a repeated field in the UserMessage.",
        "funcName": "UserMessageRemoveRepeatedFieldValue",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the value to remove."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully removed, false otherwise."
        }
    },
    {
        "name": "UserMessageGetDebugString",
        "group": "Protobuf",
        "description": "Gets the debug string representation of the UserMessage.",
        "funcName": "UserMessageGetDebugString",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The debug string as a string."
        }
    },
    {
        "name": "PbReadEnum",
        "group": "Protobuf",
        "description": "Reads an enum value from a UserMessage.",
        "funcName": "PbReadEnum",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The integer representation of the enum value, or 0 if invalid."
        }
    },
    {
        "name": "PbReadInt32",
        "group": "Protobuf",
        "description": "Reads a 32-bit integer from a UserMessage.",
        "funcName": "PbReadInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The int32_t value read, or 0 if invalid."
        }
    },
    {
        "name": "PbReadInt64",
        "group": "Protobuf",
        "description": "Reads a 64-bit integer from a UserMessage.",
        "funcName": "PbReadInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "The int64_t value read, or 0 if invalid."
        }
    },
    {
        "name": "PbReadUInt32",
        "group": "Protobuf",
        "description": "Reads an unsigned 32-bit integer from a UserMessage.",
        "funcName": "PbReadUInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "uint32",
            "description": "The uint32_t value read, or 0 if invalid."
        }
    },
    {
        "name": "PbReadUInt64",
        "group": "Protobuf",
        "description": "Reads an unsigned 64-bit integer from a UserMessage.",
        "funcName": "PbReadUInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "The uint64_t value read, or 0 if invalid."
        }
    },
    {
        "name": "PbReadFloat",
        "group": "Protobuf",
        "description": "Reads a floating-point value from a UserMessage.",
        "funcName": "PbReadFloat",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "float",
            "description": "The float value read, or 0.0 if invalid."
        }
    },
    {
        "name": "PbReadDouble",
        "group": "Protobuf",
        "description": "Reads a double-precision floating-point value from a UserMessage.",
        "funcName": "PbReadDouble",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "double",
            "description": "The double value read, or 0.0 if invalid."
        }
    },
    {
        "name": "PbReadBool",
        "group": "Protobuf",
        "description": "Reads a boolean value from a UserMessage.",
        "funcName": "PbReadBool",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "The boolean value read, or false if invalid."
        }
    },
    {
        "name": "PbReadString",
        "group": "Protobuf",
        "description": "Reads a string from a UserMessage.",
        "funcName": "PbReadString",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The string value read, or an empty string if invalid."
        }
    },
    {
        "name": "PbReadColor",
        "group": "Protobuf",
        "description": "Reads a color value from a UserMessage.",
        "funcName": "PbReadColor",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The color value read, or an empty value if invalid."
        }
    },
    {
        "name": "PbReadVector2",
        "group": "Protobuf",
        "description": "Reads a 2D vector from a UserMessage.",
        "funcName": "PbReadVector2",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "vec2",
            "description": "The 2D vector value read, or an empty value if invalid."
        }
    },
    {
        "name": "PbReadVector3",
        "group": "Protobuf",
        "description": "Reads a 3D vector from a UserMessage.",
        "funcName": "PbReadVector3",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The 3D vector value read, or an empty value if invalid."
        }
    },
    {
        "name": "PbReadQAngle",
        "group": "Protobuf",
        "description": "Reads a QAngle (rotation vector) from a UserMessage.",
        "funcName": "PbReadQAngle",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the UserMessage object."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "Name of the field to read."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "Index of the repeated field (use -1 for non-repeated fields)."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The QAngle value read, or an empty value if invalid."
        }
    },
    {
        "name": "PbGetEnum",
        "group": "Protobuf",
        "description": "Gets a enum value from a field in the UserMessage.",
        "funcName": "PbGetEnum",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetEnum",
        "group": "Protobuf",
        "description": "Sets a enum value for a field in the UserMessage.",
        "funcName": "PbSetEnum",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetInt32",
        "group": "Protobuf",
        "description": "Gets a 32-bit integer value from a field in the UserMessage.",
        "funcName": "PbGetInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetInt32",
        "group": "Protobuf",
        "description": "Sets a 32-bit integer value for a field in the UserMessage.",
        "funcName": "PbSetInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetInt64",
        "group": "Protobuf",
        "description": "Gets a 64-bit integer value from a field in the UserMessage.",
        "funcName": "PbGetInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetInt64",
        "group": "Protobuf",
        "description": "Sets a 64-bit integer value for a field in the UserMessage.",
        "funcName": "PbSetInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetUInt32",
        "group": "Protobuf",
        "description": "Gets an unsigned 32-bit integer value from a field in the UserMessage.",
        "funcName": "PbGetUInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetUInt32",
        "group": "Protobuf",
        "description": "Sets an unsigned 32-bit integer value for a field in the UserMessage.",
        "funcName": "PbSetUInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "uint32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetUInt64",
        "group": "Protobuf",
        "description": "Gets an unsigned 64-bit integer value from a field in the UserMessage.",
        "funcName": "PbGetUInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetUInt64",
        "group": "Protobuf",
        "description": "Sets an unsigned 64-bit integer value for a field in the UserMessage.",
        "funcName": "PbSetUInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "uint64",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetBool",
        "group": "Protobuf",
        "description": "Gets a bool value from a field in the UserMessage.",
        "funcName": "PbGetBool",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetBool",
        "group": "Protobuf",
        "description": "Sets a bool value for a field in the UserMessage.",
        "funcName": "PbSetBool",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "bool",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetFloat",
        "group": "Protobuf",
        "description": "Gets a float value from a field in the UserMessage.",
        "funcName": "PbGetFloat",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetFloat",
        "group": "Protobuf",
        "description": "Sets a float value for a field in the UserMessage.",
        "funcName": "PbSetFloat",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "float",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetDouble",
        "group": "Protobuf",
        "description": "Gets a double value from a field in the UserMessage.",
        "funcName": "PbGetDouble",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetDouble",
        "group": "Protobuf",
        "description": "Sets a double value for a field in the UserMessage.",
        "funcName": "PbSetDouble",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetString",
        "group": "Protobuf",
        "description": "Gets a string value from a field in the UserMessage.",
        "funcName": "PbGetString",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "string",
                "ref": true,
                "description": "The output string."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetString",
        "group": "Protobuf",
        "description": "Sets a string value for a field in the UserMessage.",
        "funcName": "PbSetString",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetColor",
        "group": "Protobuf",
        "description": "Gets a color value from a field in the UserMessage.",
        "funcName": "PbGetColor",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output string."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetColor",
        "group": "Protobuf",
        "description": "Sets a color value for a field in the UserMessage.",
        "funcName": "PbSetColor",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetVector2",
        "group": "Protobuf",
        "description": "Gets a Vector2 value from a field in the UserMessage.",
        "funcName": "PbGetVector2",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output string."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetVector2",
        "group": "Protobuf",
        "description": "Sets a Vector2 value for a field in the UserMessage.",
        "funcName": "PbSetVector2",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetVector3",
        "group": "Protobuf",
        "description": "Gets a Vector3 value from a field in the UserMessage.",
        "funcName": "PbGetVector3",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output string."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetVector3",
        "group": "Protobuf",
        "description": "Sets a Vector3 value for a field in the UserMessage.",
        "funcName": "PbSetVector3",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetQAngle",
        "group": "Protobuf",
        "description": "Gets a QAngle value from a field in the UserMessage.",
        "funcName": "PbGetQAngle",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output string."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetQAngle",
        "group": "Protobuf",
        "description": "Sets a QAngle value for a field in the UserMessage.",
        "funcName": "PbSetQAngle",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedEnum",
        "group": "Protobuf",
        "description": "Gets a repeated enum value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedEnum",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedEnum",
        "group": "Protobuf",
        "description": "Sets a repeated enum value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedEnum",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddEnum",
        "group": "Protobuf",
        "description": "Adds a enum value to a repeated field in the UserMessage.",
        "funcName": "PbAddEnum",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedInt32",
        "group": "Protobuf",
        "description": "Gets a repeated int32_t value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedInt32",
        "group": "Protobuf",
        "description": "Sets a repeated int32_t value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddInt32",
        "group": "Protobuf",
        "description": "Adds a 32-bit integer value to a repeated field in the UserMessage.",
        "funcName": "PbAddInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedInt64",
        "group": "Protobuf",
        "description": "Gets a repeated int64_t value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedInt64",
        "group": "Protobuf",
        "description": "Sets a repeated int64_t value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddInt64",
        "group": "Protobuf",
        "description": "Adds a 64-bit integer value to a repeated field in the UserMessage.",
        "funcName": "PbAddInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedUInt32",
        "group": "Protobuf",
        "description": "Gets a repeated uint32_t value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedUInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedUInt32",
        "group": "Protobuf",
        "description": "Sets a repeated uint32_t value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedUInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "uint32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddUInt32",
        "group": "Protobuf",
        "description": "Adds an unsigned 32-bit integer value to a repeated field in the UserMessage.",
        "funcName": "PbAddUInt32",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "uint32",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedUInt64",
        "group": "Protobuf",
        "description": "Gets a repeated uint64_t value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedUInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedUInt64",
        "group": "Protobuf",
        "description": "Sets a repeated uint64_t value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedUInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "uint64",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddUInt64",
        "group": "Protobuf",
        "description": "Adds an unsigned 64-bit integer value to a repeated field in the UserMessage.",
        "funcName": "PbAddUInt64",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "uint64",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedBool",
        "group": "Protobuf",
        "description": "Gets a repeated bool value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedBool",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedBool",
        "group": "Protobuf",
        "description": "Sets a repeated bool value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedBool",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "bool",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddBool",
        "group": "Protobuf",
        "description": "Adds a bool value to a repeated field in the UserMessage.",
        "funcName": "PbAddBool",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "bool",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedFloat",
        "group": "Protobuf",
        "description": "Gets a repeated float value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedFloat",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedFloat",
        "group": "Protobuf",
        "description": "Sets a repeated float value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedFloat",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "float",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddFloat",
        "group": "Protobuf",
        "description": "Adds a float value to a repeated field in the UserMessage.",
        "funcName": "PbAddFloat",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "float",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedDouble",
        "group": "Protobuf",
        "description": "Gets a repeated double value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedDouble",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output value."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedDouble",
        "group": "Protobuf",
        "description": "Sets a repeated double value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedDouble",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddDouble",
        "group": "Protobuf",
        "description": "Adds a double value to a repeated field in the UserMessage.",
        "funcName": "PbAddDouble",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedString",
        "group": "Protobuf",
        "description": "Gets a repeated string value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedString",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "string",
                "ref": true,
                "description": "The output string."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedString",
        "group": "Protobuf",
        "description": "Sets a repeated string value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedString",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddString",
        "group": "Protobuf",
        "description": "Adds a string value to a repeated field in the UserMessage.",
        "funcName": "PbAddString",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedColor",
        "group": "Protobuf",
        "description": "Gets a repeated color value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedColor",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output color."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedColor",
        "group": "Protobuf",
        "description": "Sets a repeated color value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedColor",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddColor",
        "group": "Protobuf",
        "description": "Adds a color value to a repeated field in the UserMessage.",
        "funcName": "PbAddColor",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedVector2",
        "group": "Protobuf",
        "description": "Gets a repeated Vector2 value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedVector2",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output vector2."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedVector2",
        "group": "Protobuf",
        "description": "Sets a repeated Vector2 value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedVector2",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddVector2",
        "group": "Protobuf",
        "description": "Adds a Vector2 value to a repeated field in the UserMessage.",
        "funcName": "PbAddVector2",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedVector3",
        "group": "Protobuf",
        "description": "Gets a repeated Vector3 value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedVector3",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output vector2."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedVector3",
        "group": "Protobuf",
        "description": "Sets a repeated Vector3 value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedVector3",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddVector3",
        "group": "Protobuf",
        "description": "Adds a Vector3 value to a repeated field in the UserMessage.",
        "funcName": "PbAddVector3",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "PbGetRepeatedQAngle",
        "group": "Protobuf",
        "description": "Gets a repeated QAngle value from a field in the UserMessage.",
        "funcName": "PbGetRepeatedQAngle",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "out",
                "type": "ptr64",
                "ref": false,
                "description": "The output vector2."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully retrieved, false otherwise."
        }
    },
    {
        "name": "PbSetRepeatedQAngle",
        "group": "Protobuf",
        "description": "Sets a repeated QAngle value for a field in the UserMessage.",
        "funcName": "PbSetRepeatedQAngle",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "index",
                "type": "int32",
                "ref": false,
                "description": "The index of the repeated field."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to set."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the field was successfully set, false otherwise."
        }
    },
    {
        "name": "PbAddQAngle",
        "group": "Protobuf",
        "description": "Adds a QAngle value to a repeated field in the UserMessage.",
        "funcName": "PbAddQAngle",
        "paramTypes": [
            {
                "name": "userMessage",
                "type": "ptr64",
                "ref": false,
                "description": "The UserMessage instance."
            },
            {
                "name": "fieldName",
                "type": "string",
                "ref": false,
                "description": "The name of the field."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The value to add."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the value was successfully added, false otherwise."
        }
    },
    {
        "name": "GetWeaponVData",
        "group": "Weapons",
        "description": "Retrieves the weapon VData for a given weapon.",
        "funcName": "GetWeaponVData",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which to retrieve the weapon VData."
            }
        ],
        "retType": {
            "type": "ptr64",
            "description": "A pointer to the `CCSWeaponBaseVData` if the entity handle is valid and"
        }
    },


    {
        "name": "GetWeaponDefIndex",
        "group": "Weapons",
        "description": "Retrieves the weapon definition index for a given entity handle.",
        "funcName": "GetWeaponDefIndex",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which to retrieve the weapon def index."
            }
        ],
        "retType": {
            "type": "uint16",
            "description": "The weapon definition index as a `uint16_t`, or 0 if the entity handle is invalid."
        }
    }
]