{
  "fileVersion": 1,
  "version": ${S2SDK_VERSION},
  "versionName": "v${S2SDK_VERSION}",
  "friendlyName": "CS2-SDK",
  "description": "Provides functionality for other plugins from Source 2 engine",
  "createdBy": "untrustedmodders",
  "createdByURL": "https://github.com/untrustedmodders/",
  "docsURL": "https://github.com/untrustedmodders/plugify-source-2",
  "downloadURL": "https://github.com/untrustedmodders/plugify-source-2/releases/download/v${S2SDK_VERSION}/${S2SDK_PACKAGE}.zip",
  "updateURL": "https://untrustedmodders.github.io/plugify-source-2/s2sdk.json",
  "entryPoint": "bin/s2sdk",
  "supportedPlatforms": [],
  "resourceDirectories": [
    "configs",
    "gamedata"
  ],
  "languageModule": {
    "name": "cpp"
  },
  "dependencies": [
    {
      "name": "polyhook"
    }
  ],
  "exportedMethods": [
    {
      "name": "GetClientIndexFromEntityPointer",
      "group": "Clients",
      "description": "Retrieves the client index from a given entity pointer.",
      "funcName": "GetClientIndexFromEntityPointer",
      "paramTypes": [
        {
          "name": "entity",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the entity (CBaseEntity*)."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The client index if valid, otherwise -1."
      }
    },
    {
      "name": "GetClientFromIndex",
      "group": "Clients",
      "description": "Retrieves the client object from a given client index.",
      "funcName": "GetClientFromIndex",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the client object if found, otherwise nullptr."
      }
    },
    {
      "name": "GetIndexFromClient",
      "group": "Clients",
      "description": "Retrieves the index of a given client object.",
      "funcName": "GetIndexFromClient",
      "paramTypes": [
        {
          "name": "client",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the client object (CServerSideClient*)."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The client index if found, otherwise -1."
      }
    },
    {
      "name": "GetClientAuthId",
      "group": "Clients",
      "description": "Retrieves a client's authentication string (SteamID).",
      "funcName": "GetClientAuthId",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client whose authentication string is being retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The authentication string."
      }
    },
    {
      "name": "GetClientAccountId",
      "group": "Clients",
      "description": "Returns the client's Steam account ID, a unique number identifying a given Steam account.",
      "funcName": "GetClientAccountId",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "Steam account ID."
      }
    },
    {
      "name": "GetClientIp",
      "group": "Clients",
      "description": "Retrieves a client's IP address.",
      "funcName": "GetClientIp",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The IP address."
      }
    },
    {
      "name": "GetClientName",
      "group": "Clients",
      "description": "Returns the client's name.",
      "funcName": "GetClientName",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The client's name."
      }
    },
    {
      "name": "GetClientTime",
      "group": "Clients",
      "description": "Returns the client's connection time in seconds.",
      "funcName": "GetClientTime",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "float",
        "description": "float Connection time in seconds."
      }
    },
    {
      "name": "GetClientLatency",
      "group": "Clients",
      "description": "Returns the client's current latency (RTT).",
      "funcName": "GetClientLatency",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "float",
        "description": "float Latency value."
      }
    },
    {
      "name": "GetUserFlagBits",
      "group": "Clients",
      "description": "Returns the client's access flags.",
      "funcName": "GetUserFlagBits",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "uint64 Access flags as a bitmask."
      }
    },
    {
      "name": "SetUserFlagBits",
      "group": "Clients",
      "description": "Sets the access flags on a client using a bitmask.",
      "funcName": "SetUserFlagBits",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "flags",
          "type": "uint64",
          "ref": false,
          "description": "Bitmask representing the flags to be set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AddUserFlags",
      "group": "Clients",
      "description": "Adds access flags to a client.",
      "funcName": "AddUserFlags",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "flags",
          "type": "uint64",
          "ref": false,
          "description": "Bitmask representing the flags to be added."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveUserFlags",
      "group": "Clients",
      "description": "Removes access flags from a client.",
      "funcName": "RemoveUserFlags",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "flags",
          "type": "uint64",
          "ref": false,
          "description": "Bitmask representing the flags to be removed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "IsClientAuthorized",
      "group": "Clients",
      "description": "Checks if a certain player has been authenticated.",
      "funcName": "IsClientAuthorized",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the player is authenticated, false otherwise."
      }
    },
    {
      "name": "IsClientConnected",
      "group": "Clients",
      "description": "Checks if a certain player is connected.",
      "funcName": "IsClientConnected",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the player is connected, false otherwise."
      }
    },
    {
      "name": "IsClientInGame",
      "group": "Clients",
      "description": "Checks if a certain player has entered the game.",
      "funcName": "IsClientInGame",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the player is in the game, false otherwise."
      }
    },
    {
      "name": "IsClientSourceTV",
      "group": "Clients",
      "description": "Checks if a certain player is the SourceTV bot.",
      "funcName": "IsClientSourceTV",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the client is the SourceTV bot, false otherwise."
      }
    },
    {
      "name": "IsClientAlive",
      "group": "Clients",
      "description": "Checks if the client is alive or dead.",
      "funcName": "IsClientAlive",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the client is alive, false if dead."
      }
    },
    {
      "name": "IsFakeClient",
      "group": "Clients",
      "description": "Checks if a certain player is a fake client.",
      "funcName": "IsFakeClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the client is a fake client, false otherwise."
      }
    },
    {
      "name": "GetClientTeam",
      "group": "Clients",
      "description": "Retrieves a client's team index.",
      "funcName": "GetClientTeam",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "int The team index of the client."
      }
    },
    {
      "name": "GetClientHealth",
      "group": "Clients",
      "description": "Returns the client's health.",
      "funcName": "GetClientHealth",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "int The health value of the client."
      }
    },
    {
      "name": "GetClientArmor",
      "group": "Clients",
      "description": "Returns the client's armor value.",
      "funcName": "GetClientArmor",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "int The armor value of the client."
      }
    },
    {
      "name": "GetClientAbsOrigin",
      "group": "Clients",
      "description": "Retrieves the client's origin vector.",
      "funcName": "GetClientAbsOrigin",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A Vector where the client's origin will be stored."
      }
    },
    {
      "name": "GetClientAbsAngles",
      "group": "Clients",
      "description": "Retrieves the client's position angle.",
      "funcName": "GetClientAbsAngles",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A QAngle where the client's position angle will be stored."
      }
    },
    {
        "name": "GetClientEyeAngles",
        "group": "Clients",
        "description": "Retrieves the client's eye angle.",
        "funcName": "GetClientEyeAngles",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "Index of the client."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A QAngle where the client's eye angle will be stored."
        }
    },
    {
      "name": "ProcessTargetString",
      "group": "Clients",
      "description": "Processes the target string to determine if one user can target another.",
      "funcName": "ProcessTargetString",
      "paramTypes": [
        {
          "name": "caller",
          "type": "int32",
          "ref": false,
          "description": "Index of the client making the target request."
        },
        {
          "name": "target",
          "type": "string",
          "ref": false,
          "description": "The target string specifying the player or players to be targeted."
        }
      ],
      "retType": {
        "type": "int32[]",
        "description": "A vector where the result of the targeting operation will be stored."
      }
    },
    {
      "name": "ChangeClientTeam",
      "group": "Clients",
      "description": "Changes a client's team.",
      "funcName": "ChangeClientTeam",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "team",
          "type": "int32",
          "ref": false,
          "description": "The team index to assign the client to.",
          "enum": {
            "name": "CSTeam",
            "description": "Enum representing the possible teams in Counter-Strike.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "No team."
              },
              {
                "value": 1,
                "name": "Spectator",
                "description": "Spectator team."
              },
              {
                "value": 2,
                "name": "T",
                "description": "Terrorist team."
              },
              {
                "value": 3,
                "name": "CT",
                "description": "Counter-Terrorist team."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SwitchClientTeam",
      "group": "Clients",
      "description": "Switches the player's team.",
      "funcName": "SwitchClientTeam",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "team",
          "type": "int32",
          "ref": false,
          "description": "The team index to switch the client to.",
          "enum": {
            "name": "CSTeam",
            "description": "Enum representing the possible teams in Counter-Strike.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "No team."
              },
              {
                "value": 1,
                "name": "Spectator",
                "description": "Spectator team."
              },
              {
                "value": 2,
                "name": "T",
                "description": "Terrorist team."
              },
              {
                "value": 3,
                "name": "CT",
                "description": "Counter-Terrorist team."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RespawnClient",
      "group": "Clients",
      "description": "Respawns a player.",
      "funcName": "RespawnClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to respawn."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "ForcePlayerSuicide",
      "group": "Clients",
      "description": "Forces a player to commit suicide.",
      "funcName": "ForcePlayerSuicide",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "explode",
          "type": "bool",
          "ref": false,
          "description": "If true, the client will explode upon death."
        },
        {
          "name": "force",
          "type": "bool",
          "ref": false,
          "description": "If true, the suicide will be forced."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "KickClient",
      "group": "Clients",
      "description": "Disconnects a client from the server as soon as the next frame starts.",
      "funcName": "KickClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to be kicked."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "BanClient",
      "group": "Clients",
      "description": "Bans a client for a specified duration.",
      "funcName": "BanClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to be banned."
        },
        {
          "name": "duration",
          "type": "float",
          "ref": false,
          "description": "Duration of the ban in seconds."
        },
        {
          "name": "kick",
          "type": "bool",
          "ref": false,
          "description": "If true, the client will be kicked immediately after being banned."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "BanIdentity",
      "group": "Clients",
      "description": "Bans an identity (either an IP address or a Steam authentication string).",
      "funcName": "BanIdentity",
      "paramTypes": [
        {
          "name": "steamId",
          "type": "uint64",
          "ref": false,
          "description": "The Steam ID to ban."
        },
        {
          "name": "duration",
          "type": "float",
          "ref": false,
          "description": "Duration of the ban in seconds."
        },
        {
          "name": "kick",
          "type": "bool",
          "ref": false,
          "description": "If true, the client will be kicked immediately after being banned."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
        "name": "GetClientActiveWeapon",
        "group": "Clients",
        "description": "Retrieves the handle of the client's currently active weapon.",
        "funcName": "GetClientActiveWeapon",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle of the active weapon, or INVALID_EHANDLE_INDEX if the client is invalid or has no active weapon."
        }
    },
    {
        "name": "GetClientWeapons",
        "group": "Clients",
        "description": "Retrieves a list of weapon handles owned by the client.",
        "funcName": "GetClientWeapons",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            }
        ],
        "retType": {
            "type": "int32[]",
            "description": "A vector of entity handles for the client's weapons, or an empty vector if the client is invalid or has no weapons."
        }
    },
    {
        "name": "DropWeapon",
        "group": "Clients",
        "description": "Forces a player to drop their weapon.",
        "funcName": "DropWeapon",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "Index of the client."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to drop."
            },
            {
                "name": "target",
                "type": "vec3",
                "ref": false,
                "description": "Target direction."
            },
            {
                "name": "velocity",
                "type": "vec3",
                "ref": false,
                "description": "Velocity to toss weapon or zero to just drop weapon."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "StripWeapons",
        "group": "Clients",
        "description": "Removes all weapons from a client, with an option to remove the suit as well.",
        "funcName": "StripWeapons",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "removeSuit",
                "type": "bool",
                "ref": false,
                "description": "A boolean indicating whether to also remove the client's suit."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "BumpWeapon",
        "group": "Clients",
        "description": "Bumps a player's weapon.",
        "funcName": "BumpWeapon",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to bump."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "SwitchWeapon",
        "group": "Clients",
        "description": "Switches a player's weapon.",
        "funcName": "SwitchWeapon",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to switch."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "RemoveWeapon",
        "group": "Clients",
        "description": "Removes a player's weapon.",
        "funcName": "RemoveWeapon",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "weaponHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of weapon to remove."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GiveNamedItem",
        "group": "Clients",
        "description": "Gives a named item (e.g., weapon) to a client.",
        "funcName": "GiveNamedItem",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "itemName",
                "type": "string",
                "ref": false,
                "description": "The name of the item to give."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle of the created item, or INVALID_EHANDLE_INDEX if the client or item is invalid."
        }
    },
    {
        "name": "GetClientButtons",
        "group": "Clients",
        "description": "Retrieves the state of a specific button for a client.",
        "funcName": "GetClientButtons",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "buttonIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the button (0-2)."
            }
        ],
        "retType": {
            "type": "uint64",
            "description": "The state of the specified button, or 0 if the client or button index is invalid."
        }
    },
    {
        "name": "GetClientMoney",
        "group": "Clients",
        "description": "Retrieves the amount of money a client has.",
        "funcName": "GetClientMoney",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The amount of money the client has, or 0 if the client index is invalid."
        }
    },
    {
        "name": "SetClientMoney",
        "group": "Clients",
        "description": "Sets the amount of money for a client.",
        "funcName": "SetClientMoney",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "money",
                "type": "int32",
                "ref": false,
                "description": "The amount of money to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientKills",
        "group": "Clients",
        "description": "Retrieves the number of kills for a client.",
        "funcName": "GetClientKills",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The number of kills the client has, or 0 if the client index is invalid."
        }
    },
    {
        "name": "SetClientKills",
        "group": "Clients",
        "description": "Sets the number of kills for a client.",
        "funcName": "SetClientKills",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "kills",
                "type": "int32",
                "ref": false,
                "description": "The number of kills to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientDeaths",
        "group": "Clients",
        "description": "Retrieves the number of deaths for a client.",
        "funcName": "GetClientDeaths",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The number of deaths the client has, or 0 if the client index is invalid."
        }
    },
    {
        "name": "SetClientDeaths",
        "group": "Clients",
        "description": "Sets the number of deaths for a client.",
        "funcName": "SetClientDeaths",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "deaths",
                "type": "int32",
                "ref": false,
                "description": "The number of deaths to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientAssists",
        "group": "Clients",
        "description": "Retrieves the number of assists for a client.",
        "funcName": "GetClientAssists",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The number of assists the client has, or 0 if the client index is invalid."
        }
    },
    {
        "name": "SetClientAssists",
        "group": "Clients",
        "description": "Sets the number of assists for a client.",
        "funcName": "SetClientAssists",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "assists",
                "type": "int32",
                "ref": false,
                "description": "The number of assists to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetClientDamage",
        "group": "Clients",
        "description": "Retrieves the total damage dealt by a client.",
        "funcName": "GetClientDamage",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The total damage dealt by the client, or 0 if the client index is invalid."
        }
    },
    {
        "name": "SetClientDamage",
        "group": "Clients",
        "description": "Sets the total damage dealt by a client.",
        "funcName": "SetClientDamage",
        "paramTypes": [
            {
                "name": "clientIndex",
                "type": "int32",
                "ref": false,
                "description": "The index of the client."
            },
            {
                "name": "damage",
                "type": "int32",
                "ref": false,
                "description": "The amount of damage to set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
      "name": "AddAdminCommand",
      "group": "Commands",
      "description": "Creates a console command as an administrative command.",
      "funcName": "AddAdminCommand",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console command."
        },
        {
          "name": "adminFlags",
          "type": "int64",
          "ref": false,
          "description": "The admin flags that indicate which admin level can use this command."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of what the command does."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Command flags that define the behavior of the command.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function that is invoked when the command is executed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AddConsoleCommand",
      "group": "Commands",
      "description": "Creates a console command or hooks an already existing one.",
      "funcName": "AddConsoleCommand",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console command."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of what the command does."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Command flags that define the behavior of the command.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function that is invoked when the command is executed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveCommand",
      "group": "Commands",
      "description": "Removes a console command from the system.",
      "funcName": "RemoveCommand",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the command to be removed."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function associated with the command to be removed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AddCommandListener",
      "group": "Commands",
      "description": "Adds a callback that will fire when a command is sent to the server.",
      "funcName": "AddCommandListener",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the command."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function that will be invoked when the command is executed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the callback should fire after the command is executed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveCommandListener",
      "group": "Commands",
      "description": "Removes a callback that fires when a command is sent to the server.",
      "funcName": "RemoveCommandListener",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the command."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to be removed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the callback should be removed for post-execution."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "ServerCommand",
      "group": "Commands",
      "description": "Executes a server command as if it were run on the server console or through RCON.",
      "funcName": "ServerCommand",
      "paramTypes": [
        {
          "name": "command",
          "type": "string",
          "ref": false,
          "description": "The command to execute on the server."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "ServerCommandEx",
      "group": "Commands",
      "description": "Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer.",
      "funcName": "ServerCommandEx",
      "paramTypes": [
        {
          "name": "command",
          "type": "string",
          "ref": false,
          "description": "The command to execute on the server."
        }
      ],
      "retType": {
        "type": "string",
        "description": "String to store command result into."
      }
    },
    {
      "name": "ClientCommand",
      "group": "Commands",
      "description": "Executes a client command.",
      "funcName": "ClientCommand",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client executing the command."
        },
        {
          "name": "command",
          "type": "string",
          "ref": false,
          "description": "The command to execute on the client."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "FakeClientCommand",
      "group": "Commands",
      "description": "Executes a client command on the server without network communication.",
      "funcName": "FakeClientCommand",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client."
        },
        {
          "name": "command",
          "type": "string",
          "ref": false,
          "description": "The command to be executed by the client."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToServer",
      "group": "Console",
      "description": "Sends a message to the server console.",
      "funcName": "PrintToServer",
      "paramTypes": [
        {
          "name": "msg",
          "type": "string",
          "ref": false,
          "description": "The message to be sent to the server console."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToConsole",
      "group": "Console",
      "description": "Sends a message to a client's console.",
      "funcName": "PrintToConsole",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be sent to the client's console."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChat",
      "group": "Console",
      "description": "Prints a message to a specific client in the chat area.",
      "funcName": "PrintToChat",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the chat area."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCenterText",
      "group": "Console",
      "description": "Prints a message to a specific client in the center of the screen.",
      "funcName": "PrintCenterText",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the center of the screen."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintAlertText",
      "group": "Console",
      "description": "Prints a message to a specific client with an alert box.",
      "funcName": "PrintAlertText",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the alert box."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCentreHtml",
      "group": "Console",
      "description": "Prints a html message to a specific client in the center of the screen.",
      "funcName": "PrintCentreHtml",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The HTML-formatted message to be printed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToConsoleAll",
      "group": "Console",
      "description": "Sends a message to every client's console.",
      "funcName": "PrintToConsoleAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be sent to all clients' consoles."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChatAll",
      "group": "Console",
      "description": "Prints a message to all clients in the chat area.",
      "funcName": "PrintToChatAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the chat area for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCenterTextAll",
      "group": "Console",
      "description": "Prints a message to all clients in the center of the screen.",
      "funcName": "PrintCenterTextAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the center of the screen for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintAlertTextAll",
      "group": "Console",
      "description": "Prints a message to all clients with an alert box.",
      "funcName": "PrintAlertTextAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in an alert box for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCentreHtmlAll",
      "group": "Console",
      "description": "Prints a html message to all clients in the center of the screen.",
      "funcName": "PrintCentreHtmlAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The HTML-formatted message to be printed in the center of the screen for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChatColored",
      "group": "Console",
      "description": "Prints a colored message to a specific client in the chat area.",
      "funcName": "PrintToChatColored",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the chat area with color."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChatColoredAll",
      "group": "Console",
      "description": "Prints a colored message to all clients in the chat area.",
      "funcName": "PrintToChatColoredAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The colored message to be printed in the chat area for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "CreateConVar",
      "group": "Cvars",
      "description": "Creates a new console variable.",
      "funcName": "CreateConVar",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "string",
          "ref": false,
          "description": "The default value of the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A description of the console variable's purpose."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Additional flags for the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable."
      }
    },
    {
      "name": "CreateConVarBool",
      "group": "Cvars",
      "description": "Creates a new boolean console variable.",
      "funcName": "CreateConVarBool",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "bool",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "bool",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "bool",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarInt16",
      "group": "Cvars",
      "description": "Creates a new 16-bit signed integer console variable.",
      "funcName": "CreateConVarInt16",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int16",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int16",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int16",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarUInt16",
      "group": "Cvars",
      "description": "Creates a new 16-bit unsigned integer console variable.",
      "funcName": "CreateConVarUInt16",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "uint16",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "uint16",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "uint16",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarInt32",
      "group": "Cvars",
      "description": "Creates a new 32-bit signed integer console variable.",
      "funcName": "CreateConVarInt32",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int32",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int32",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int32",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarUInt32",
      "group": "Cvars",
      "description": "Creates a new 32-bit unsigned integer console variable.",
      "funcName": "CreateConVarUInt32",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "uint32",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "uint32",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "uint32",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarInt64",
      "group": "Cvars",
      "description": "Creates a new 64-bit signed integer console variable.",
      "funcName": "CreateConVarInt64",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int64",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int64",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int64",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarUInt64",
      "group": "Cvars",
      "description": "Creates a new 64-bit unsigned integer console variable.",
      "funcName": "CreateConVarUInt64",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "uint64",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "uint64",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "uint64",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarFloat",
      "group": "Cvars",
      "description": "Creates a new floating-point console variable.",
      "funcName": "CreateConVarFloat",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "float",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "float",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "float",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarDouble",
      "group": "Cvars",
      "description": "Creates a new double-precision console variable.",
      "funcName": "CreateConVarDouble",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "double",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "double",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "double",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarColor",
      "group": "Cvars",
      "description": "Creates a new color console variable.",
      "funcName": "CreateConVarColor",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int32",
          "ref": false,
          "description": "The default color value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int32",
          "ref": false,
          "description": "The minimum color value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int32",
          "ref": false,
          "description": "The maximum color value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarVector2",
      "group": "Cvars",
      "description": "Creates a new 2D vector console variable.",
      "funcName": "CreateConVarVector2",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec2",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec2",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec2",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarVector3",
      "group": "Cvars",
      "description": "Creates a new 3D vector console variable.",
      "funcName": "CreateConVarVector3",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec3",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec3",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec3",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarVector4",
      "group": "Cvars",
      "description": "Creates a new 4D vector console variable.",
      "funcName": "CreateConVarVector4",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec4",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec4",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec4",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "CreateConVarQAngle",
      "group": "Cvars",
      "description": "Creates a new quaternion angle console variable.",
      "funcName": "CreateConVarQAngle",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec3",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Flags that define the behavior of the console variable.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec3",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec3",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the created console variable data."
      }
    },
    {
      "name": "FindConVar",
      "group": "Cvars",
      "description": "Searches for a console variable.",
      "funcName": "FindConVar",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to search for."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the console variable data if found; otherwise, nullptr."
      }
    },
    {
      "name": "HookConVarChange",
      "group": "Cvars",
      "description": "Creates a hook for when a console variable's value is changed.",
      "funcName": "HookConVarChange",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to hook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to be executed when the variable's value changes.",
          "prototype": {
            "name": "ChangeCallback",
            "description": "Handles changes to a console variable's value. This function is called whenever the value of a specific console variable is modified.",
            "paramTypes": [
              {
                "name": "conVarHandle",
                "type": "uint64",
                "description": "A handle to the console variable that is being changed. This provides access to the variable's metadata and current state."
              },
              {
                "name": "newValue",
                "type": "string",
                "description": "The new value being assigned to the console variable. This string contains the updated value after the change."
              },
              {
                "name": "oldValue",
                "type": "string",
                "description": "The previous value of the console variable before the change. This string contains the value that was overridden."
              }
            ],
            "retType": {
              "type": "void",
              "description": "This function does not return a value. It performs any necessary processing related to the value change directly."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "UnhookConVarChange",
      "group": "Cvars",
      "description": "Removes a hook for when a console variable's value is changed.",
      "funcName": "UnhookConVarChange",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to unhook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to be removed.",
          "prototype": {
            "name": "ChangeCallback",
            "description": "Handles changes to a console variable's value. This function is called whenever the value of a specific console variable is modified.",
            "paramTypes": [
              {
                "name": "conVarHandle",
                "type": "uint64",
                "description": "A handle to the console variable that is being changed. This provides access to the variable's metadata and current state."
              },
              {
                "name": "newValue",
                "type": "string",
                "description": "The new value being assigned to the console variable. This string contains the updated value after the change."
              },
              {
                "name": "oldValue",
                "type": "string",
                "description": "The previous value of the console variable before the change. This string contains the value that was overridden."
              }
            ],
            "retType": {
              "type": "void",
              "description": "This function does not return a value. It performs any necessary processing related to the value change directly."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "IsConVarFlagSet",
      "group": "Cvars",
      "description": "Checks if a specific flag is set for a console variable.",
      "funcName": "IsConVarFlagSet",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "flag",
          "type": "int64",
          "ref": false,
          "description": "The flag to check against the console variable."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the flag is set; otherwise, false."
      }
    },
    {
      "name": "AddConVarFlags",
      "group": "Cvars",
      "description": "Adds flags to a console variable.",
      "funcName": "AddConVarFlags",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "The flags to be added.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveConVarFlags",
      "group": "Cvars",
      "description": "Removes flags from a console variable.",
      "funcName": "RemoveConVarFlags",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "The flags to be removed.",
          "enum": {
            "name": "ConVarFlag",
            "description": "Enum representing various flags for ConVars and ConCommands.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "The default, no flags at all."
              },
              {
                "value": 1,
                "name": "LinkedConcommand",
                "description": "Linked to a ConCommand."
              },
              {
                "value": 2,
                "name": "DevelopmentOnly",
                "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
              },
              {
                "value": 4,
                "name": "GameDll",
                "description": "Defined by the game DLL."
              },
              {
                "value": 8,
                "name": "ClientDll",
                "description": "Defined by the client DLL."
              },
              {
                "value": 16,
                "name": "Hidden",
                "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
              },
              {
                "value": 32,
                "name": "Protected",
                "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
              },
              {
                "value": 64,
                "name": "SpOnly",
                "description": "This cvar cannot be changed by clients connected to a multiplayer server."
              },
              {
                "value": 128,
                "name": "Archive",
                "description": "Saved to vars.rc."
              },
              {
                "value": 256,
                "name": "Notify",
                "description": "Notifies players when changed."
              },
              {
                "value": 512,
                "name": "UserInfo",
                "description": "Changes the client's info string."
              },
              {
                "value": 1024,
                "name": "Missing0",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 2048,
                "name": "Unlogged",
                "description": "If this is a server cvar, changes are not logged to the file or console."
              },
              {
                "value": 4096,
                "name": "Missing1",
                "description": "Hides the cvar from lookups."
              },
              {
                "value": 8192,
                "name": "Replicated",
                "description": "Server-enforced setting on clients."
              },
              {
                "value": 16384,
                "name": "Cheat",
                "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
              },
              {
                "value": 32768,
                "name": "PerUser",
                "description": "Causes auto-generated varnameN for splitscreen slots."
              },
              {
                "value": 65536,
                "name": "Demo",
                "description": "Records this cvar when starting a demo file."
              },
              {
                "value": 131072,
                "name": "DontRecord",
                "description": "Excluded from demo files."
              },
              {
                "value": 262144,
                "name": "Missing2",
                "description": "Reserved for future use."
              },
              {
                "value": 524288,
                "name": "Release",
                "description": "Cvars tagged with this are available to customers."
              },
              {
                "value": 1048576,
                "name": "MenuBarItem",
                "description": "Marks the cvar as a menu bar item."
              },
              {
                "value": 2097152,
                "name": "Missing3",
                "description": "Reserved for future use."
              },
              {
                "value": 4194304,
                "name": "NotConnected",
                "description": "Cannot be changed by a client connected to a server."
              },
              {
                "value": 8388608,
                "name": "VconsoleFuzzyMatching",
                "description": "Enables fuzzy matching for vconsole."
              },
              {
                "value": 16777216,
                "name": "ServerCanExecute",
                "description": "The server can execute this command on clients."
              },
              {
                "value": 33554432,
                "name": "ClientCanExecute",
                "description": "Allows clients to execute this command."
              },
              {
                "value": 67108864,
                "name": "ServerCannotQuery",
                "description": "The server cannot query this cvar's value."
              },
              {
                "value": 134217728,
                "name": "VconsoleSetFocus",
                "description": "Sets focus in the vconsole."
              },
              {
                "value": 268435456,
                "name": "ClientCmdCanExecute",
                "description": "IVEngineClient::ClientCmd can execute this command."
              },
              {
                "value": 536870912,
                "name": "ExecutePerTick",
                "description": "Executes the cvar every tick."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetConVarFlags",
      "group": "Cvars",
      "description": "Retrieves the current flags of a console variable.",
      "funcName": "GetConVarFlags",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "int64",
        "description": "The current flags set on the console variable.",
        "enum": {
          "name": "ConVarFlag",
          "description": "Enum representing various flags for ConVars and ConCommands.",
          "values": [
            {
              "value": 0,
              "name": "None",
              "description": "The default, no flags at all."
            },
            {
              "value": 1,
              "name": "LinkedConcommand",
              "description": "Linked to a ConCommand."
            },
            {
              "value": 2,
              "name": "DevelopmentOnly",
              "description": "Hidden in released products. Automatically removed if ALLOW_DEVELOPMENT_CVARS is defined."
            },
            {
              "value": 4,
              "name": "GameDll",
              "description": "Defined by the game DLL."
            },
            {
              "value": 8,
              "name": "ClientDll",
              "description": "Defined by the client DLL."
            },
            {
              "value": 16,
              "name": "Hidden",
              "description": "Hidden. Doesn't appear in find or auto-complete. Like DEVELOPMENTONLY but cannot be compiled out."
            },
            {
              "value": 32,
              "name": "Protected",
              "description": "Server cvar; data is not sent since it's sensitive (e.g., passwords)."
            },
            {
              "value": 64,
              "name": "SpOnly",
              "description": "This cvar cannot be changed by clients connected to a multiplayer server."
            },
            {
              "value": 128,
              "name": "Archive",
              "description": "Saved to vars.rc."
            },
            {
              "value": 256,
              "name": "Notify",
              "description": "Notifies players when changed."
            },
            {
              "value": 512,
              "name": "UserInfo",
              "description": "Changes the client's info string."
            },
            {
              "value": 1024,
              "name": "Missing0",
              "description": "Hides the cvar from lookups."
            },
            {
              "value": 2048,
              "name": "Unlogged",
              "description": "If this is a server cvar, changes are not logged to the file or console."
            },
            {
              "value": 4096,
              "name": "Missing1",
              "description": "Hides the cvar from lookups."
            },
            {
              "value": 8192,
              "name": "Replicated",
              "description": "Server-enforced setting on clients."
            },
            {
              "value": 16384,
              "name": "Cheat",
              "description": "Only usable in singleplayer/debug or multiplayer with sv_cheats."
            },
            {
              "value": 32768,
              "name": "PerUser",
              "description": "Causes auto-generated varnameN for splitscreen slots."
            },
            {
              "value": 65536,
              "name": "Demo",
              "description": "Records this cvar when starting a demo file."
            },
            {
              "value": 131072,
              "name": "DontRecord",
              "description": "Excluded from demo files."
            },
            {
              "value": 262144,
              "name": "Missing2",
              "description": "Reserved for future use."
            },
            {
              "value": 524288,
              "name": "Release",
              "description": "Cvars tagged with this are available to customers."
            },
            {
              "value": 1048576,
              "name": "MenuBarItem",
              "description": "Marks the cvar as a menu bar item."
            },
            {
              "value": 2097152,
              "name": "Missing3",
              "description": "Reserved for future use."
            },
            {
              "value": 4194304,
              "name": "NotConnected",
              "description": "Cannot be changed by a client connected to a server."
            },
            {
              "value": 8388608,
              "name": "VconsoleFuzzyMatching",
              "description": "Enables fuzzy matching for vconsole."
            },
            {
              "value": 16777216,
              "name": "ServerCanExecute",
              "description": "The server can execute this command on clients."
            },
            {
              "value": 33554432,
              "name": "ClientCanExecute",
              "description": "Allows clients to execute this command."
            },
            {
              "value": 67108864,
              "name": "ServerCannotQuery",
              "description": "The server cannot query this cvar's value."
            },
            {
              "value": 134217728,
              "name": "VconsoleSetFocus",
              "description": "Sets focus in the vconsole."
            },
            {
              "value": 268435456,
              "name": "ClientCmdCanExecute",
              "description": "IVEngineClient::ClientCmd can execute this command."
            },
            {
              "value": 536870912,
              "name": "ExecutePerTick",
              "description": "Executes the cvar every tick."
            }
          ]
        }
      }
    },
    {
      "name": "GetConVarBounds",
      "group": "Cvars",
      "description": "Gets the specified bound (max or min) of a console variable and stores it in the output string.",
      "funcName": "GetConVarBounds",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "max",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether to get the maximum (true) or minimum (false) bound."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The bound value."
      }
    },
    {
      "name": "SetConVarBounds",
      "group": "Cvars",
      "description": "Sets the specified bound (max or min) for a console variable.",
      "funcName": "SetConVarBounds",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "max",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether to set the maximum (true) or minimum (false) bound."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to set as the bound."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetConVarDefault",
      "group": "Cvars",
      "description": "Retrieves the default value of a console variable and stores it in the output string.",
      "funcName": "GetConVarDefault",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The output value in string format."
      }
    },
    {
      "name": "GetConVarValue",
      "group": "Cvars",
      "description": "Retrieves the current value of a console variable and stores it in the output string.",
      "funcName": "GetConVarValue",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The output value in string format."
      }
    },
    {
      "name": "GetConVar",
      "group": "Cvars",
      "description": "Retrieves the current value of a console variable and stores it in the output.",
      "funcName": "GetConVar",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "any",
        "description": "The output value."
      }
    },
    {
      "name": "GetConVarBool",
      "group": "Cvars",
      "description": "Retrieves the current value of a boolean console variable.",
      "funcName": "GetConVarBool",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "The current boolean value of the console variable."
      }
    },
    {
      "name": "GetConVarInt16",
      "group": "Cvars",
      "description": "Retrieves the current value of a signed 16-bit integer console variable.",
      "funcName": "GetConVarInt16",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "int16",
        "description": "The current int16_t value of the console variable."
      }
    },
    {
      "name": "GetConVarUInt16",
      "group": "Cvars",
      "description": "Retrieves the current value of an unsigned 16-bit integer console variable.",
      "funcName": "GetConVarUInt16",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "uint16",
        "description": "The current uint16_t value of the console variable."
      }
    },
    {
      "name": "GetConVarInt32",
      "group": "Cvars",
      "description": "Retrieves the current value of a signed 32-bit integer console variable.",
      "funcName": "GetConVarInt32",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The current int32_t value of the console variable."
      }
    },
    {
      "name": "GetConVarUInt32",
      "group": "Cvars",
      "description": "Retrieves the current value of an unsigned 32-bit integer console variable.",
      "funcName": "GetConVarUInt32",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "uint32",
        "description": "The current uint32_t value of the console variable."
      }
    },
    {
      "name": "GetConVarInt64",
      "group": "Cvars",
      "description": "Retrieves the current value of a signed 64-bit integer console variable.",
      "funcName": "GetConVarInt64",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "int64",
        "description": "The current int64_t value of the console variable."
      }
    },
    {
      "name": "GetConVarUInt64",
      "group": "Cvars",
      "description": "Retrieves the current value of an unsigned 64-bit integer console variable.",
      "funcName": "GetConVarUInt64",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "The current uint64_t value of the console variable."
      }
    },
    {
      "name": "GetConVarFloat",
      "group": "Cvars",
      "description": "Retrieves the current value of a float console variable.",
      "funcName": "GetConVarFloat",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The current float value of the console variable."
      }
    },
    {
      "name": "GetConVarDouble",
      "group": "Cvars",
      "description": "Retrieves the current value of a double console variable.",
      "funcName": "GetConVarDouble",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "double",
        "description": "The current double value of the console variable."
      }
    },
    {
      "name": "GetConVarString",
      "group": "Cvars",
      "description": "Retrieves the current value of a string console variable.",
      "funcName": "GetConVarString",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The current string value of the console variable."
      }
    },
    {
      "name": "GetConVarColor",
      "group": "Cvars",
      "description": "Retrieves the current value of a Color console variable.",
      "funcName": "GetConVarColor",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The current Color value of the console variable."
      }
    },
    {
      "name": "GetConVarVector2",
      "group": "Cvars",
      "description": "Retrieves the current value of a Vector2D console variable.",
      "funcName": "GetConVarVector2",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "vec2",
        "description": "The current Vector2D value of the console variable."
      }
    },
    {
      "name": "GetConVarVector",
      "group": "Cvars",
      "description": "Retrieves the current value of a Vector console variable.",
      "funcName": "GetConVarVector",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "The current Vector value of the console variable."
      }
    },
    {
      "name": "GetConVarVector4",
      "group": "Cvars",
      "description": "Retrieves the current value of a Vector4D console variable.",
      "funcName": "GetConVarVector4",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "vec4",
        "description": "The current Vector4D value of the console variable."
      }
    },
    {
      "name": "GetConVarQAngle",
      "group": "Cvars",
      "description": "Retrieves the current value of a QAngle console variable.",
      "funcName": "GetConVarQAngle",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "The current QAngle value of the console variable."
      }
    },
    {
      "name": "SetConVarValue",
      "group": "Cvars",
      "description": "Sets the value of a console variable.",
      "funcName": "SetConVarValue",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The string value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVar",
      "group": "Cvars",
      "description": "Sets the value of a console variable.",
      "funcName": "SetConVar",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "any",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarBool",
      "group": "Cvars",
      "description": "Sets the value of a boolean console variable.",
      "funcName": "SetConVarBool",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "bool",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarInt16",
      "group": "Cvars",
      "description": "Sets the value of a signed 16-bit integer console variable.",
      "funcName": "SetConVarInt16",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "int16",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarUInt16",
      "group": "Cvars",
      "description": "Sets the value of an unsigned 16-bit integer console variable.",
      "funcName": "SetConVarUInt16",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "uint16",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarInt32",
      "group": "Cvars",
      "description": "Sets the value of a signed 32-bit integer console variable.",
      "funcName": "SetConVarInt32",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarUInt32",
      "group": "Cvars",
      "description": "Sets the value of an unsigned 32-bit integer console variable.",
      "funcName": "SetConVarUInt32",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "uint32",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarInt64",
      "group": "Cvars",
      "description": "Sets the value of a signed 64-bit integer console variable.",
      "funcName": "SetConVarInt64",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "int64",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarUInt64",
      "group": "Cvars",
      "description": "Sets the value of an unsigned 64-bit integer console variable.",
      "funcName": "SetConVarUInt64",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "uint64",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarFloat",
      "group": "Cvars",
      "description": "Sets the value of a floating-point console variable.",
      "funcName": "SetConVarFloat",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "float",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarDouble",
      "group": "Cvars",
      "description": "Sets the value of a double-precision floating-point console variable.",
      "funcName": "SetConVarDouble",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "double",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarString",
      "group": "Cvars",
      "description": "Sets the value of a string console variable.",
      "funcName": "SetConVarString",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarColor",
      "group": "Cvars",
      "description": "Sets the value of a color console variable.",
      "funcName": "SetConVarColor",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarVector2",
      "group": "Cvars",
      "description": "Sets the value of a 2D vector console variable.",
      "funcName": "SetConVarVector2",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "vec2",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarVector3",
      "group": "Cvars",
      "description": "Sets the value of a 3D vector console variable.",
      "funcName": "SetConVarVector3",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "vec3",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarVector4",
      "group": "Cvars",
      "description": "Sets the value of a 4D vector console variable.",
      "funcName": "SetConVarVector4",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "vec4",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarQAngle",
      "group": "Cvars",
      "description": "Sets the value of a quaternion angle console variable.",
      "funcName": "SetConVarQAngle",
      "paramTypes": [
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "vec3",
          "ref": false,
          "description": "The value to set for the console variable."
        },
        {
          "name": "replicate",
          "type": "bool",
          "ref": false,
          "description": "If set to true, the new convar value will be set on all clients. This will only work if the convar has the FCVAR_REPLICATED flag and actually exists on clients."
        },
        {
          "name": "notify",
          "type": "bool",
          "ref": false,
          "description": "If set to true, clients will be notified that the convar has changed. This will only work if the convar has the FCVAR_NOTIFY flag."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SendConVarValue",
      "group": "Cvars",
      "description": "Replicates a console variable value to a specific client. This does not change the actual console variable value.",
      "funcName": "SendConVarValue",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client to replicate the value to."
        },
        {
          "name": "conVarHandle",
          "type": "uint64",
          "ref": false,
          "description": "The handle to the console variable data."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to send to the client."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetClientConVarValue",
      "group": "Cvars",
      "description": "Retrieves the value of a client's console variable and stores it in the output string.",
      "funcName": "GetClientConVarValue",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client whose console variable value is being retrieved."
        },
        {
          "name": "convarName",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to retrieve."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The output string to store the client's console variable value."
      }
    },
    {
      "name": "SetFakeClientConVarValue",
      "group": "Cvars",
      "description": "Replicates a console variable value to a specific fake client. This does not change the actual console variable value.",
      "funcName": "SetFakeClientConVarValue",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the fake client to replicate the value to."
        },
        {
          "name": "convarName",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "convarValue",
          "type": "string",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetGameDirectory",
      "group": "Engine",
      "description": "Returns the path of the game's directory.",
      "funcName": "GetGameDirectory",
      "paramTypes": [
        {
          "name": "result",
          "type": "string",
          "ref": true,
          "description": "A reference to a string where the game directory path will be stored."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetCurrentMap",
      "group": "Engine",
      "description": "Returns the current map name.",
      "funcName": "GetCurrentMap",
      "paramTypes": [
        {
          "name": "result",
          "type": "string",
          "ref": true,
          "description": "A reference to a string where the current map name will be stored."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "IsMapValid",
      "group": "Engine",
      "description": "Returns whether a specified map is valid or not.",
      "funcName": "IsMapValid",
      "paramTypes": [
        {
          "name": "mapname",
          "type": "string",
          "ref": false,
          "description": "The name of the map to check for validity."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the map is valid, false otherwise."
      }
    },
    {
      "name": "GetGameTime",
      "group": "Engine",
      "description": "Returns the game time based on the game tick.",
      "funcName": "GetGameTime",
      "paramTypes": [],
      "retType": {
        "type": "float",
        "description": "The current game time."
      }
    },
    {
      "name": "GetGameTickCount",
      "group": "Engine",
      "description": "Returns the game's internal tick count.",
      "funcName": "GetGameTickCount",
      "paramTypes": [],
      "retType": {
        "type": "int32",
        "description": "The current tick count of the game."
      }
    },
    {
      "name": "GetGameFrameTime",
      "group": "Engine",
      "description": "Returns the time the game took processing the last frame.",
      "funcName": "GetGameFrameTime",
      "paramTypes": [],
      "retType": {
        "type": "float",
        "description": "The frame time of the last processed frame."
      }
    },
    {
      "name": "GetEngineTime",
      "group": "Engine",
      "description": "Returns a high-precision time value for profiling the engine.",
      "funcName": "GetEngineTime",
      "paramTypes": [],
      "retType": {
        "type": "double",
        "description": "A high-precision time value."
      }
    },
    {
      "name": "GetMaxClients",
      "group": "Engine",
      "description": "Returns the maximum number of clients that can connect to the server.",
      "funcName": "GetMaxClients",
      "paramTypes": [],
      "retType": {
        "type": "int32",
        "description": "The maximum client count, or -1 if global variables are not initialized."
      }
    },
    {
      "name": "PrecacheGeneric",
      "group": "Engine",
      "description": "Precaches a given generic file.",
      "funcName": "PrecacheGeneric",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the model to be precached."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer identifier for the generic file."
      }
    },
    {
      "name": "IsGenericPrecache",
      "group": "Engine",
      "description": "Checks if a specified generic file is precached.",
      "funcName": "IsGenericPrecache",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the generic file to check."
        }
      ],
      "retType": {
        "type": "bool"
      }
    },
    {
      "name": "PrecacheModel",
      "group": "Engine",
      "description": "Precaches a specified model.",
      "funcName": "PrecacheModel",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the model to be precached."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer identifier for the model."
      }
    },
    {
      "name": "IsModelPrecache",
      "group": "Engine",
      "description": "Checks if a specified model is precached.",
      "funcName": "IsModelPrecache",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the model to check."
        }
      ],
      "retType": {
        "type": "bool"
      }
    },
    {
      "name": "PrecacheSound",
      "group": "Engine",
      "description": "Precaches a specified sound.",
      "funcName": "PrecacheSound",
      "paramTypes": [
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to be precached."
        },
        {
          "name": "preload",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating if the sound should be preloaded."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the sound is successfully precached, false otherwise."
      }
    },
    {
      "name": "IsSoundPrecached",
      "group": "Engine",
      "description": "Checks if a specified sound is precached.",
      "funcName": "IsSoundPrecached",
      "paramTypes": [
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the sound is precached, false otherwise."
      }
    },
    {
      "name": "PrecacheDecal",
      "group": "Engine",
      "description": "Precaches a specified decal.",
      "funcName": "PrecacheDecal",
      "paramTypes": [
        {
          "name": "decal",
          "type": "string",
          "ref": false,
          "description": "The name of the decal to be precached."
        },
        {
          "name": "preload",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating if the decal should be preloaded."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer identifier for the decal."
      }
    },
    {
      "name": "IsDecalPrecached",
      "group": "Engine",
      "description": "Checks if a specified decal is precached.",
      "funcName": "IsDecalPrecached",
      "paramTypes": [
        {
          "name": "decal",
          "type": "string",
          "ref": false,
          "description": "The name of the decal to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the decal is precached, false otherwise."
      }
    },
    {
      "name": "GetEconItemSystem",
      "group": "Engine",
      "description": "Returns a pointer to the Economy Item System.",
      "funcName": "GetEconItemSystem",
      "paramTypes": [],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the Econ Item System."
      }
    },
    {
      "name": "IsServerPaused",
      "group": "Engine",
      "description": "Checks if the server is currently paused.",
      "funcName": "IsServerPaused",
      "paramTypes": [],
      "retType": {
        "type": "bool",
        "description": "True if the server is paused, false otherwise."
      }
    },
    {
      "name": "QueueTaskForNextFrame",
      "group": "Engine",
      "description": "Queues a task to be executed on the next frame.",
      "funcName": "QueueTaskForNextFrame",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function to be executed on the next frame.",
          "prototype": {
            "name": "TaskCallback",
            "description": "Defines a QueueTask Callback.",
            "paramTypes": [
			  {
                "name": "userData",
                "type": "any[]",
                "ref": false,
                "description": "An array intended to hold user-related data, allowing for elements of any type."
              }
			],
            "retType": {
              "type": "void"
            }
          }
        },
        {
          "name": "userData",
          "type": "any[]",
          "ref": false,
          "description": "An array intended to hold user-related data, allowing for elements of any type."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "QueueTaskForNextWorldUpdate",
      "group": "Engine",
      "description": "Queues a task to be executed on the next world update.",
      "funcName": "QueueTaskForNextWorldUpdate",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function to be executed on the next world update.",
          "prototype": {
            "name": "TaskCallback",
            "description": "Defines a QueueTask Callback.",
            "paramTypes": [
			  {
                "name": "userData",
                "type": "any[]",
                "ref": false,
                "description": "An array intended to hold user-related data, allowing for elements of any type."
              }
			],
            "retType": {
              "type": "void"
            }
          }
        },
        {
          "name": "userData",
          "type": "any[]",
          "ref": false,
          "description": "An array intended to hold user-related data, allowing for elements of any type."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetSoundDuration",
      "group": "Engine",
      "description": "Returns the duration of a specified sound.",
      "funcName": "GetSoundDuration",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to check."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The duration of the sound in seconds."
      }
    },
    {
      "name": "EmitSound",
      "group": "Engine",
      "description": "Emits a sound from a specified entity.",
      "funcName": "EmitSound",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity that will emit the sound."
        },
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to emit."
        },
        {
          "name": "pitch",
          "type": "int32",
          "ref": false,
          "description": "The pitch of the sound."
        },
        {
          "name": "volume",
          "type": "float",
          "ref": false,
          "description": "The volume of the sound."
        },
        {
          "name": "delay",
          "type": "float",
          "ref": false,
          "description": "The delay before the sound is played."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "EmitSoundToClient",
      "group": "Engine",
      "description": "Emits a sound to a specific client.",
      "funcName": "EmitSoundToClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client to whom the sound will be emitted."
        },
        {
          "name": "channel",
          "type": "int32",
          "ref": false,
          "description": "The channel through which the sound will be played."
        },
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to emit."
        },
        {
          "name": "volume",
          "type": "float",
          "ref": false,
          "description": "The volume of the sound."
        },
        {
          "name": "soundLevel",
          "type": "int32",
          "ref": false,
          "description": "The level of the sound."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Additional flags for sound playback."
        },
        {
          "name": "pitch",
          "type": "int32",
          "ref": false,
          "description": "The pitch of the sound."
        },
        {
          "name": "origin",
          "type": "vec3",
          "ref": false,
          "description": "The origin of the sound in 3D space."
        },
        {
          "name": "soundTime",
          "type": "float",
          "ref": false,
          "description": "The time at which the sound should be played."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "EntIndexToEntPointer",
      "group": "Entities",
      "description": "Converts an entity index into an entity pointer.",
      "funcName": "EntIndexToEntPointer",
      "paramTypes": [
        {
          "name": "entityIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the entity to convert."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity instance, or nullptr if the entity does not exist."
      }
    },
    {
      "name": "EntPointerToEntIndex",
      "group": "Entities",
      "description": "Retrieves the entity index from an entity pointer.",
      "funcName": "EntPointerToEntIndex",
      "paramTypes": [
        {
          "name": "entity",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the entity whose index is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The index of the entity, or -1 if the entity is nullptr."
      }
    },
    {
      "name": "EntPointerToEntHandle",
      "group": "Entities",
      "description": "Converts an entity pointer into an entity handle.",
      "funcName": "EntPointerToEntHandle",
      "paramTypes": [
        {
          "name": "entity",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the entity to convert."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle as an integer, or INVALID_EHANDLE_INDEX if the entity is nullptr."
      }
    },
    {
      "name": "EntHandleToEntPointer",
      "group": "Entities",
      "description": "Retrieves the entity pointer from an entity handle.",
      "funcName": "EntHandleToEntPointer",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The entity handle to convert."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity instance, or nullptr if the handle is invalid."
      }
    },
    {
      "name": "EntIndexToEntHandle",
      "group": "Entities",
      "description": "Converts an entity index into an entity handle.",
      "funcName": "EntIndexToEntHandle",
      "paramTypes": [
        {
          "name": "entityIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the entity to convert."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle as an integer, or INVALID_EHANDLE_INDEX if the entity index is invalid."
      }
    },
    {
      "name": "EntHandleToEntIndex",
      "group": "Entities",
      "description": "Retrieves the entity index from an entity handle.",
      "funcName": "EntHandleToEntIndex",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The entity handle from which to retrieve the index."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The index of the entity, or -1 if the handle is invalid."
      }
    },
    {
      "name": "IsValidEntHandle",
      "group": "Entities",
      "description": "Checks if the provided entity handle is valid.",
      "funcName": "IsValidEntHandle",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The entity handle to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the entity handle is valid, false otherwise."
      }
    },
    {
      "name": "IsValidEntPointer",
      "group": "Entities",
      "description": "Checks if the provided entity pointer is valid.",
      "funcName": "IsValidEntPointer",
      "paramTypes": [
        {
          "name": "entity",
          "type": "ptr64",
          "ref": false,
          "description": "The entity pointer to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the entity pointer is valid, false otherwise."
      }
    },
    {
      "name": "GetFirstActiveEntity",
      "group": "Entities",
      "description": "Retrieves the pointer to the first active entity.",
      "funcName": "GetFirstActiveEntity",
      "paramTypes": [],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the first active entity."
      }
    },
    {
      "name": "GetConcreteEntityListPointer",
      "group": "Entities",
      "description": "Retrieves a pointer to the concrete entity list.",
      "funcName": "GetConcreteEntityListPointer",
      "paramTypes": [],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity list structure."
      }
    },
    {
      "name": "HookEntityOutput",
      "group": "Entities",
      "description": "Adds an entity output hook on a specified entity class name.",
      "funcName": "HookEntityOutput",
      "paramTypes": [
        {
          "name": "szClassname",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity to hook the output for."
        },
        {
          "name": "szOutput",
          "type": "string",
          "ref": false,
          "description": "The output event name to hook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to invoke when the output is fired.",
          "prototype": {
            "name": "HookEntityOutputCallback",
            "description": "This function is a callback handler for entity output events. It is triggered when a specific output event is activated, and it handles the process by passing the activator, the caller, and a delay parameter for the output.",
            "paramTypes": [
              {
                "name": "activatorHandle",
                "type": "int32",
                "description": "The activator is an identifier for the entity or object that triggers the event. It is typically a reference to the entity that caused the output to occur."
              },
              {
                "name": "callerHandle",
                "type": "int32",
                "description": "The caller represents the entity or object that calls the output function. It can be used to identify which entity initiated the action that caused the event."
              },
              {
                "name": "flDelay",
                "type": "float",
                "description": "This parameter specifies the delay in seconds before the output action is executed. It allows the output to be triggered after a certain period of time, providing flexibility in handling time-based behaviors."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether the hook should be a post-hook (true) or pre-hook (false)."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "UnhookEntityOutput",
      "group": "Entities",
      "description": "Removes an entity output hook.",
      "funcName": "UnhookEntityOutput",
      "paramTypes": [
        {
          "name": "szClassname",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity from which to unhook the output."
        },
        {
          "name": "szOutput",
          "type": "string",
          "ref": false,
          "description": "The output event name to unhook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function that was previously hooked.",
          "prototype": {
            "name": "HookEntityOutputCallback",
            "description": "This function is a callback handler for entity output events. It is triggered when a specific output event is activated, and it handles the process by passing the activator, the caller, and a delay parameter for the output.",
            "paramTypes": [
              {
                "name": "activatorHandle",
                "type": "int32",
                "description": "The activator is an identifier for the entity or object that triggers the event. It is typically a reference to the entity that caused the output to occur."
              },
              {
                "name": "callerHandle",
                "type": "int32",
                "description": "The caller represents the entity or object that calls the output function. It can be used to identify which entity initiated the action that caused the event."
              },
              {
                "name": "flDelay",
                "type": "float",
                "description": "This parameter specifies the delay in seconds before the output action is executed. It allows the output to be triggered after a certain period of time, providing flexibility in handling time-based behaviors."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether the hook was a post-hook (true) or pre-hook (false)."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "FindEntityByClassname",
      "group": "Entities",
      "description": "Searches for an entity by classname.",
      "funcName": "FindEntityByClassname",
      "paramTypes": [
        {
          "name": "startEntity",
          "type": "int32",
          "ref": false,
          "description": "The entity handle from which to start the search."
        },
        {
          "name": "classname",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity to search for."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle of the found entity, or INVALID_EHANDLE_INDEX if no entity is found."
      }
    },
    {
      "name": "FindEntityByName",
      "group": "Entities",
      "description": "Searches for an entity by name.",
      "funcName": "FindEntityByName",
      "paramTypes": [
        {
          "name": "startEntity",
          "type": "int32",
          "ref": false,
          "description": "The entity handle from which to start the search."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the entity to search for."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle of the found entity, or INVALID_EHANDLE_INDEX if no entity is found."
      }
    },
    {
      "name": "CreateEntityByName",
      "group": "Entities",
      "description": "Creates an entity by string name but does not spawn it.",
      "funcName": "CreateEntityByName",
      "paramTypes": [
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity to create."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle of the created entity, or INVALID_EHANDLE_INDEX if the entity could not be created."
      }
    },
    {
      "name": "DispatchSpawn",
      "group": "Entities",
      "description": "Spawns an entity into the game.",
      "funcName": "DispatchSpawn",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity to spawn."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "DispatchSpawn2",
      "group": "Entities",
      "description": "Spawns an entity into the game with key-value properties.",
      "funcName": "DispatchSpawn2",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity to spawn."
        },
        {
          "name": "keys",
          "type": "string[]",
          "ref": false,
          "description": "A vector of keys representing the property names to set on the entity."
        },
        {
          "name": "values",
          "type": "any[]",
          "ref": false,
          "description": "A vector of values corresponding to the keys, representing the property values to set on the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveEntity",
      "group": "Entities",
      "description": "Marks an entity for deletion.",
      "funcName": "RemoveEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity to be deleted."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityClassname",
      "group": "Entities",
      "description": "Retrieves the class name of an entity.",
      "funcName": "GetEntityClassname",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose class name is to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the class name will be stored."
      }
    },
    {
      "name": "GetEntityName",
      "group": "Entities",
      "description": "Retrieves the name of an entity.",
      "funcName": "GetEntityName",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose name is to be retrieved."
        }
      ],
      "retType": {
        "type": "string"
      }
    },
    {
      "name": "SetEntityName",
      "group": "Entities",
      "description": "Sets the name of an entity.",
      "funcName": "SetEntityName",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose name is to be set."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The new name to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityMoveType",
      "group": "Entities",
      "description": "Retrieves the movement type of an entity.",
      "funcName": "GetEntityMoveType",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose movement type is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The movement type of the entity, or 0 if the entity is invalid.",
        "enum": {
          "name": "MoveType",
          "description": "Enum representing various movement types for entities.",
          "values": [
            {
              "value": 0,
              "name": "None",
              "description": "Never moves."
            },
            {
              "value": 1,
              "name": "Isometric",
              "description": "Previously isometric movement type."
            },
            {
              "value": 2,
              "name": "Walk",
              "description": "Player only - moving on the ground."
            },
            {
              "value": 3,
              "name": "Fly",
              "description": "No gravity, but still collides with stuff."
            },
            {
              "value": 4,
              "name": "Flygravity",
              "description": "Flies through the air and is affected by gravity."
            },
            {
              "value": 5,
              "name": "Vphysics",
              "description": "Uses VPHYSICS for simulation."
            },
            {
              "value": 6,
              "name": "Push",
              "description": "No clip to world, push and crush."
            },
            {
              "value": 7,
              "name": "Noclip",
              "description": "No gravity, no collisions, still has velocity/avelocity."
            },
            {
              "value": 8,
              "name": "Ladder",
              "description": "Used by players only when going onto a ladder."
            },
            {
              "value": 9,
              "name": "Observer",
              "description": "Observer movement, depends on player's observer mode."
            },
            {
              "value": 10,
              "name": "Custom",
              "description": "Allows the entity to describe its own physics."
            }
          ]
        }
      }
    },
    {
      "name": "SetEntityMoveType",
      "group": "Entities",
      "description": "Sets the movement type of an entity.",
      "funcName": "SetEntityMoveType",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose movement type is to be set."
        },
        {
          "name": "moveType",
          "type": "int32",
          "ref": false,
          "description": "The new movement type to set for the entity.",
          "enum": {
            "name": "MoveType",
            "description": "Enum representing various movement types for entities.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "Never moves."
              },
              {
                "value": 1,
                "name": "Isometric",
                "description": "Previously isometric movement type."
              },
              {
                "value": 2,
                "name": "Walk",
                "description": "Player only - moving on the ground."
              },
              {
                "value": 3,
                "name": "Fly",
                "description": "No gravity, but still collides with stuff."
              },
              {
                "value": 4,
                "name": "Flygravity",
                "description": "Flies through the air and is affected by gravity."
              },
              {
                "value": 5,
                "name": "Vphysics",
                "description": "Uses VPHYSICS for simulation."
              },
              {
                "value": 6,
                "name": "Push",
                "description": "No clip to world, push and crush."
              },
              {
                "value": 7,
                "name": "Noclip",
                "description": "No gravity, no collisions, still has velocity/avelocity."
              },
              {
                "value": 8,
                "name": "Ladder",
                "description": "Used by players only when going onto a ladder."
              },
              {
                "value": 9,
                "name": "Observer",
                "description": "Observer movement, depends on player's observer mode."
              },
              {
                "value": 10,
                "name": "Custom",
                "description": "Allows the entity to describe its own physics."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityGravity",
      "group": "Entities",
      "description": "Retrieves the gravity scale of an entity.",
      "funcName": "GetEntityGravity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose gravity scale is to be retrieved."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The gravity scale of the entity, or 0.0f if the entity is invalid."
      }
    },
    {
      "name": "SetEntityGravity",
      "group": "Entities",
      "description": "Sets the gravity scale of an entity.",
      "funcName": "SetEntityGravity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose gravity scale is to be set."
        },
        {
          "name": "gravity",
          "type": "float",
          "ref": false,
          "description": "The new gravity scale to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityFlags",
      "group": "Entities",
      "description": "Retrieves the flags of an entity.",
      "funcName": "GetEntityFlags",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose flags are to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The flags of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityFlags",
      "group": "Entities",
      "description": "Sets the flags of an entity.",
      "funcName": "SetEntityFlags",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose flags are to be set."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "The new flags to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityRenderColor",
      "group": "Entities",
      "description": "Retrieves the render color of an entity.",
      "funcName": "GetEntityRenderColor",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render color is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The raw color value of the entity's render color, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityRenderColor",
      "group": "Entities",
      "description": "Sets the render color of an entity.",
      "funcName": "SetEntityRenderColor",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render color is to be set."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The new raw color value to set for the entity's render color."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityRenderMode",
      "group": "Entities",
      "description": "Retrieves the render mode of an entity.",
      "funcName": "GetEntityRenderMode",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render mode is to be retrieved."
        }
      ],
      "retType": {
        "type": "int8",
        "description": "The render mode of the entity, or 0 if the entity is invalid.",
        "enum": {
          "name": "RenderMode",
          "description": "Enum representing rendering modes for materials.",
          "values": [
            {
              "value": 0,
              "name": "Normal",
              "description": "Standard rendering mode (src)."
            },
            {
              "value": 1,
              "name": "TransColor",
              "description": "Composite: c*a + dest*(1-a)."
            },
            {
              "value": 2,
              "name": "TransTexture",
              "description": "Composite: src*a + dest*(1-a)."
            },
            {
              "value": 3,
              "name": "Glow",
              "description": "Composite: src*a + dest -- No Z buffer checks -- Fixed size in screen space."
            },
            {
              "value": 4,
              "name": "TransAlpha",
              "description": "Composite: src*srca + dest*(1-srca)."
            },
            {
              "value": 5,
              "name": "TransAdd",
              "description": "Composite: src*a + dest."
            },
            {
              "value": 6,
              "name": "Environmental",
              "description": "Not drawn, used for environmental effects."
            },
            {
              "value": 7,
              "name": "TransAddFrameBlend",
              "description": "Uses a fractional frame value to blend between animation frames."
            },
            {
              "value": 8,
              "name": "TransAlphaAdd",
              "description": "Composite: src + dest*(1-a)."
            },
            {
              "value": 9,
              "name": "WorldGlow",
              "description": "Same as Glow but not fixed size in screen space."
            },
            {
              "value": 10,
              "name": "None",
              "description": "No rendering."
            },
            {
              "value": 11,
              "name": "DevVisualizer",
              "description": "Developer visualizer rendering mode."
            }
          ]
        }
      }
    },
    {
      "name": "SetEntityRenderMode",
      "group": "Entities",
      "description": "Sets the render mode of an entity.",
      "funcName": "SetEntityRenderMode",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render mode is to be set."
        },
        {
          "name": "renderMode",
          "type": "int8",
          "ref": false,
          "description": "The new render mode to set for the entity.",
          "enum": {
            "name": "RenderMode",
            "description": "Enum representing rendering modes for materials.",
            "values": [
              {
                "value": 0,
                "name": "Normal",
                "description": "Standard rendering mode (src)."
              },
              {
                "value": 1,
                "name": "TransColor",
                "description": "Composite: c*a + dest*(1-a)."
              },
              {
                "value": 2,
                "name": "TransTexture",
                "description": "Composite: src*a + dest*(1-a)."
              },
              {
                "value": 3,
                "name": "Glow",
                "description": "Composite: src*a + dest -- No Z buffer checks -- Fixed size in screen space."
              },
              {
                "value": 4,
                "name": "TransAlpha",
                "description": "Composite: src*srca + dest*(1-srca)."
              },
              {
                "value": 5,
                "name": "TransAdd",
                "description": "Composite: src*a + dest."
              },
              {
                "value": 6,
                "name": "Environmental",
                "description": "Not drawn, used for environmental effects."
              },
              {
                "value": 7,
                "name": "TransAddFrameBlend",
                "description": "Uses a fractional frame value to blend between animation frames."
              },
              {
                "value": 8,
                "name": "TransAlphaAdd",
                "description": "Composite: src + dest*(1-a)."
              },
              {
                "value": 9,
                "name": "WorldGlow",
                "description": "Same as Glow but not fixed size in screen space."
              },
              {
                "value": 10,
                "name": "None",
                "description": "No rendering."
              },
              {
                "value": 11,
                "name": "DevVisualizer",
                "description": "Developer visualizer rendering mode."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityHealth",
      "group": "Entities",
      "description": "Retrieves the health of an entity.",
      "funcName": "GetEntityHealth",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose health is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The health of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityHealth",
      "group": "Entities",
      "description": "Sets the health of an entity.",
      "funcName": "SetEntityHealth",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose health is to be set."
        },
        {
          "name": "health",
          "type": "int32",
          "ref": false,
          "description": "The new health value to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetTeamEntity",
      "group": "Entities",
      "description": "Retrieves the team number of an entity.",
      "funcName": "GetTeamEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose team number is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The team number of the entity, or 0 if the entity is invalid.",
        "enum": {
          "name": "CSTeam",
          "description": "Enum representing the possible teams in Counter-Strike.",
          "values": [
            {
              "value": 0,
              "name": "None",
              "description": "No team."
            },
            {
              "value": 1,
              "name": "Spectator",
              "description": "Spectator team."
            },
            {
              "value": 2,
              "name": "T",
              "description": "Terrorist team."
            },
            {
              "value": 3,
              "name": "CT",
              "description": "Counter-Terrorist team."
            }
          ]
        }
      }
    },
    {
      "name": "SetTeamEntity",
      "group": "Entities",
      "description": "Sets the team number of an entity.",
      "funcName": "SetTeamEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose team number is to be set."
        },
        {
          "name": "team",
          "type": "int32",
          "ref": false,
          "description": "The new team number to set for the entity.",
          "enum": {
            "name": "CSTeam",
            "description": "Enum representing the possible teams in Counter-Strike.",
            "values": [
              {
                "value": 0,
                "name": "None",
                "description": "No team."
              },
              {
                "value": 1,
                "name": "Spectator",
                "description": "Spectator team."
              },
              {
                "value": 2,
                "name": "T",
                "description": "Terrorist team."
              },
              {
                "value": 3,
                "name": "CT",
                "description": "Counter-Terrorist team."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityOwner",
      "group": "Entities",
      "description": "Retrieves the owner of an entity.",
      "funcName": "GetEntityOwner",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose owner is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The handle of the owner entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
      }
    },
    {
      "name": "SetEntityOwner",
      "group": "Entities",
      "description": "Sets the owner of an entity.",
      "funcName": "SetEntityOwner",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose owner is to be set."
        },
        {
          "name": "ownerHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the new owner entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityParent",
      "group": "Entities",
      "description": "Retrieves the parent of an entity.",
      "funcName": "GetEntityParent",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose parent is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The handle of the parent entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
      }
    },
    {
      "name": "SetEntityParent",
      "group": "Entities",
      "description": "Sets the parent of an entity.",
      "funcName": "SetEntityParent",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose parent is to be set."
        },
        {
          "name": "parentHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the new parent entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityAbsOrigin",
      "group": "Entities",
      "description": "Retrieves the absolute origin of an entity.",
      "funcName": "GetEntityAbsOrigin",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute origin is to be retrieved."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A vector where the absolute origin will be stored."
      }
    },
    {
      "name": "SetEntityAbsOrigin",
      "group": "Entities",
      "description": "Sets the absolute origin of an entity.",
      "funcName": "SetEntityAbsOrigin",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute origin is to be set."
        },
        {
          "name": "origin",
          "type": "vec3",
          "ref": false,
          "description": "The new absolute origin to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityAngRotation",
      "group": "Entities",
      "description": "Retrieves the angular rotation of an entity.",
      "funcName": "GetEntityAngRotation",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose angular rotation is to be retrieved."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A QAngle where the angular rotation will be stored."
      }
    },
    {
      "name": "SetEntityAngRotation",
      "group": "Entities",
      "description": "Sets the angular rotation of an entity.",
      "funcName": "SetEntityAngRotation",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose angular rotation is to be set."
        },
        {
          "name": "angle",
          "type": "vec3",
          "ref": false,
          "description": "The new angular rotation to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityAbsVelocity",
      "group": "Entities",
      "description": "Retrieves the absolute velocity of an entity.",
      "funcName": "GetEntityAbsVelocity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute velocity is to be retrieved."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A vector where the absolute velocity will be stored."
      }
    },
    {
      "name": "SetEntityAbsVelocity",
      "group": "Entities",
      "description": "Sets the absolute velocity of an entity.",
      "funcName": "SetEntityAbsVelocity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute velocity is to be set."
        },
        {
          "name": "velocity",
          "type": "vec3",
          "ref": false,
          "description": "The new absolute velocity to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityModel",
      "group": "Entities",
      "description": "Retrieves the model name of an entity.",
      "funcName": "GetEntityModel",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose model name is to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the model name will be stored."
      }
    },
    {
      "name": "SetEntityModel",
      "group": "Entities",
      "description": "Sets the model name of an entity.",
      "funcName": "SetEntityModel",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose model name is to be set."
        },
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The new model name to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityWaterLevel",
      "group": "Entities",
      "description": "Retrieves the water level of an entity.",
      "funcName": "GetEntityWaterLevel",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose water level is to be retrieved."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The water level of the entity, or 0.0f if the entity is invalid."
      }
    },
    {
      "name": "GetEntityGroundEntity",
      "group": "Entities",
      "description": "Retrieves the ground entity of an entity.",
      "funcName": "GetEntityGroundEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose ground entity is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The handle of the ground entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
      }
    },
    {
      "name": "GetEntityEffects",
      "group": "Entities",
      "description": "Retrieves the effects of an entity.",
      "funcName": "GetEntityEffects",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose effects are to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The effect flags of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "TeleportEntity",
      "group": "Entities",
      "description": "Teleports an entity to a specified location and orientation.",
      "funcName": "TeleportEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity to teleport."
        },
        {
          "name": "origin",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to a Vector representing the new absolute position. Can be nullptr."
        },
        {
          "name": "angles",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to a QAngle representing the new orientation. Can be nullptr."
        },
        {
          "name": "velocity",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to a Vector representing the new velocity. Can be nullptr."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AcceptInput",
      "group": "Entities",
      "description": "Invokes a named input method on a specified entity.",
      "funcName": "AcceptInput",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the target entity that will receive the input."
        },
        {
          "name": "inputName",
          "type": "string",
          "ref": false,
          "description": "The name of the input action to invoke."
        },
        {
          "name": "activatorHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity that initiated the sequence of actions."
        },
        {
          "name": "callerHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity sending this event."
        },
        {
          "name": "value",
          "type": "any",
          "ref": false,
          "description": "The value associated with the input action."
        },
        {
          "name": "type",
          "type": "int32",
          "ref": false,
          "description": "The type or classification of the value.",
          "enum": {
            "name": "FieldType",
            "description": "Represents the possible types of data that can be passed as a value in input actions.",
            "values": [
              {
                "value": 0,
                "name": "Auto",
                "description": "Automatically detect the type of the value."
              },
              {
                "value": 1,
                "name": "Float32",
                "description": "A 32-bit floating-point number."
              },
              {
                "value": 2,
                "name": "Float64",
                "description": "A 64-bit floating-point number."
              },
              {
                "value": 3,
                "name": "Int32",
                "description": "A 32-bit signed integer."
              },
              {
                "value": 4,
                "name": "UInt32",
                "description": "A 32-bit unsigned integer."
              },
              {
                "value": 5,
                "name": "Int64",
                "description": "A 64-bit signed integer."
              },
              {
                "value": 6,
                "name": "UInt64",
                "description": "A 64-bit unsigned integer."
              },
              {
                "value": 7,
                "name": "Boolean",
                "description": "A boolean value (true or false)."
              },
              {
                "value": 8,
                "name": "Character",
                "description": "A single character."
              },
              {
                "value": 9,
                "name": "String",
                "description": "A managed string object."
              },
              {
                "value": 10,
                "name": "CString",
                "description": "A null-terminated C-style string."
              },
              {
                "value": 11,
                "name": "HScript",
                "description": "A script handle, typically for scripting integration."
              },
              {
                "value": 12,
                "name": "EHandle",
                "description": "An entity handle, used to reference an entity within the system."
              },
              {
                "value": 13,
                "name": "Resource",
                "description": "A resource handle, such as a file or asset reference."
              },
              {
                "value": 14,
                "name": "Vector3d",
                "description": "A 3D vector, typically representing position or direction."
              },
              {
                "value": 15,
                "name": "Vector2d",
                "description": "A 2D vector, for planar data or coordinates."
              },
              {
                "value": 16,
                "name": "Vector4d",
                "description": "A 4D vector, often used for advanced mathematical representations."
              },
              {
                "value": 17,
                "name": "Color32",
                "description": "A 32-bit color value (RGBA)."
              },
              {
                "value": 18,
                "name": "QAngle",
                "description": "A quaternion-based angle representation."
              },
              {
                "value": 19,
                "name": "Quaternion",
                "description": "A quaternion, used for rotation and orientation calculations."
              }
            ]
          }
        },
        {
          "name": "outputId",
          "type": "int32",
          "ref": false,
          "description": "An identifier for tracking the output of this operation."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "HookEvent",
      "group": "Events",
      "description": "Creates a hook for when a game event is fired.",
      "funcName": "HookEvent",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the event to hook."
        },
        {
          "name": "pCallback",
          "type": "function",
          "ref": false,
          "description": "The callback function to call when the event is fired.",
          "prototype": {
            "name": "EventCallback",
            "description": "Handles events triggered by the game event system. This function processes the event data, determines the necessary action, and optionally prevents event broadcasting.",
            "paramTypes": [
              {
                "name": "name",
                "type": "string",
                "description": "The name of the event being handled. This string is used to identify the type or category of the event."
              },
              {
                "name": "event",
                "type": "ptr64",
                "description": "A 64-bit pointer to the event data structure. This pointer contains detailed information about the event being processed."
              },
              {
                "name": "dontBroadcast",
                "type": "bool",
                "description": "A boolean flag indicating whether the event should be prevented from being broadcasted to other listeners. Set to `true` to suppress broadcasting."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the hook should be for a post event."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the hook operation."
      }
    },
    {
      "name": "UnhookEvent",
      "group": "Events",
      "description": "Removes a hook for when a game event is fired.",
      "funcName": "UnhookEvent",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the event to unhook."
        },
        {
          "name": "pCallback",
          "type": "function",
          "ref": false,
          "description": "The callback function to remove.",
          "prototype": {
            "name": "EventCallback",
            "description": "Handles events triggered by the game event system. This function processes the event data, determines the necessary action, and optionally prevents event broadcasting.",
            "paramTypes": [
              {
                "name": "name",
                "type": "string",
                "description": "The name of the event being handled. This string is used to identify the type or category of the event."
              },
              {
                "name": "event",
                "type": "ptr64",
                "description": "A 64-bit pointer to the event data structure. This pointer contains detailed information about the event being processed."
              },
              {
                "name": "dontBroadcast",
                "type": "bool",
                "description": "A boolean flag indicating whether the event should be prevented from being broadcasted to other listeners. Set to `true` to suppress broadcasting."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "Indicates the result of the action execution.",
              "enum": {
                "name": "ResultType",
                "description": "Enum representing the possible results of an operation.",
                "values": [
                  {
                    "value": 0,
                    "name": "Continue",
                    "description": "The action continues to be processed without interruption."
                  },
                  {
                    "value": 1,
                    "name": "Changed",
                    "description": "Indicates that the action has altered the state or behavior during execution."
                  },
                  {
                    "value": 2,
                    "name": "Handled",
                    "description": "The action has been successfully handled, and no further action is required."
                  },
                  {
                    "value": 3,
                    "name": "Stop",
                    "description": "The action processing is halted, and no further steps will be executed."
                  }
                ]
              }
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the hook is for a post event."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the unhook operation."
      }
    },
    {
      "name": "CreateEvent",
      "group": "Events",
      "description": "Creates a game event to be fired later.",
      "funcName": "CreateEvent",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the event to create."
        },
        {
          "name": "force",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to force the creation of the event."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created EventInfo structure."
      }
    },
    {
      "name": "FireEvent",
      "group": "Events",
      "description": "Fires a game event.",
      "funcName": "FireEvent",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "bDontBroadcast",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to broadcast the event."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "FireEventToClient",
      "group": "Events",
      "description": "Fires a game event to a specific client.",
      "funcName": "FireEventToClient",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client to fire the event to."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "CancelCreatedEvent",
      "group": "Events",
      "description": "Cancels a previously created game event that has not been fired.",
      "funcName": "CancelCreatedEvent",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure of the event to cancel."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEventBool",
      "group": "Events",
      "description": "Retrieves the boolean value of a game event's key.",
      "funcName": "GetEventBool",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the boolean value."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "The boolean value associated with the key."
      }
    },
    {
      "name": "GetEventFloat",
      "group": "Events",
      "description": "Retrieves the float value of a game event's key.",
      "funcName": "GetEventFloat",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the float value."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The float value associated with the key."
      }
    },
    {
      "name": "GetEventInt",
      "group": "Events",
      "description": "Retrieves the integer value of a game event's key.",
      "funcName": "GetEventInt",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the integer value."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The integer value associated with the key."
      }
    },
    {
      "name": "GetEventUInt64",
      "group": "Events",
      "description": "Retrieves the long integer value of a game event's key.",
      "funcName": "GetEventUInt64",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the long integer value."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "The long integer value associated with the key."
      }
    },
    {
      "name": "GetEventString",
      "group": "Events",
      "description": "Retrieves the string value of a game event's key.",
      "funcName": "GetEventString",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the string value."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the result will be stored."
      }
    },
    {
      "name": "GetEventPtr",
      "group": "Events",
      "description": "Retrieves the pointer value of a game event's key.",
      "funcName": "GetEventPtr",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the pointer value."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "The pointer value associated with the key."
      }
    },
    {
      "name": "GetEventPlayerController",
      "group": "Events",
      "description": "Retrieves the player controller address of a game event's key.",
      "funcName": "GetEventPlayerController",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the player controller address."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the player controller associated with the key."
      }
    },
    {
      "name": "GetEventPlayerIndex",
      "group": "Events",
      "description": "Retrieves the player index of a game event's key.",
      "funcName": "GetEventPlayerIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the player index."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The player index associated with the key."
      }
    },
    {
      "name": "GetEventPlayerPawn",
      "group": "Events",
      "description": "Retrieves the player pawn address of a game event's key.",
      "funcName": "GetEventPlayerPawn",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the player pawn address."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the player pawn associated with the key."
      }
    },
    {
      "name": "GetEventEntity",
      "group": "Events",
      "description": "Retrieves the entity address of a game event's key.",
      "funcName": "GetEventEntity",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the entity address."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity associated with the key."
      }
    },
    {
      "name": "GetEventEntityIndex",
      "group": "Events",
      "description": "Retrieves the entity index of a game event's key.",
      "funcName": "GetEventEntityIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the entity index."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity index associated with the key."
      }
    },
    {
      "name": "GetEventEntityHandle",
      "group": "Events",
      "description": "Retrieves the entity handle of a game event's key.",
      "funcName": "GetEventEntityHandle",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the entity handle."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle associated with the key."
      }
    },
    {
      "name": "GetEventName",
      "group": "Events",
      "description": "Retrieves the name of a game event.",
      "funcName": "GetEventName",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the result will be stored."
      }
    },
    {
      "name": "SetEventBool",
      "group": "Events",
      "description": "Sets the boolean value of a game event's key.",
      "funcName": "SetEventBool",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the boolean value."
        },
        {
          "name": "value",
          "type": "bool",
          "ref": false,
          "description": "The boolean value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventFloat",
      "group": "Events",
      "description": "Sets the floating point value of a game event's key.",
      "funcName": "SetEventFloat",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the float value."
        },
        {
          "name": "value",
          "type": "float",
          "ref": false,
          "description": "The float value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventInt",
      "group": "Events",
      "description": "Sets the integer value of a game event's key.",
      "funcName": "SetEventInt",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the integer value."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The integer value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventUInt64",
      "group": "Events",
      "description": "Sets the long integer value of a game event's key.",
      "funcName": "SetEventUInt64",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the long integer value."
        },
        {
          "name": "value",
          "type": "uint64",
          "ref": false,
          "description": "The long integer value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventString",
      "group": "Events",
      "description": "Sets the string value of a game event's key.",
      "funcName": "SetEventString",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the string value."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The string value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventPtr",
      "group": "Events",
      "description": "Sets the pointer value of a game event's key.",
      "funcName": "SetEventPtr",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the pointer value."
        },
        {
          "name": "value",
          "type": "ptr64",
          "ref": false,
          "description": "The pointer value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventPlayerController",
      "group": "Events",
      "description": "Sets the player controller address of a game event's key.",
      "funcName": "SetEventPlayerController",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the player controller address."
        },
        {
          "name": "value",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the player controller to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventPlayerIndex",
      "group": "Events",
      "description": "Sets the player index value of a game event's key.",
      "funcName": "SetEventPlayerIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the player index value."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The player index value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventEntity",
      "group": "Events",
      "description": "Sets the entity address of a game event's key.",
      "funcName": "SetEventEntity",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the entity address."
        },
        {
          "name": "value",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the entity to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventEntityIndex",
      "group": "Events",
      "description": "Sets the entity index of a game event's key.",
      "funcName": "SetEventEntityIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the entity index."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The entity index value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventEntityHandle",
      "group": "Events",
      "description": "Sets the entity handle of a game event's key.",
      "funcName": "SetEventEntityHandle",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the entity handle."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The entity handle value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventBroadcast",
      "group": "Events",
      "description": "Sets whether an event's broadcasting will be disabled or not.",
      "funcName": "SetEventBroadcast",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "dontBroadcast",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to disable broadcasting."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "LoadEventsFromFile",
      "group": "Events",
      "description": "Load game event descriptions from a file (e.g., \"resource/gameevents.res\").",
      "funcName": "LoadEventsFromFile",
      "paramTypes": [
        {
          "name": "path",
          "type": "string",
          "ref": false,
          "description": "The path to the file containing event descriptions."
        },
        {
          "name": "searchAll",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to search all paths for the file."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the loading operation."
      }
    },
    {
      "name": "CloseGameConfigFile",
      "group": "Gameconfig",
      "description": "Closes a game configuration file.",
      "funcName": "CloseGameConfigFile",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration to be closed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "LoadGameConfigFile",
      "group": "Gameconfig",
      "description": "Loads a game configuration file.",
      "funcName": "LoadGameConfigFile",
      "paramTypes": [
        {
          "name": "file",
          "type": "string",
          "ref": false,
          "description": "The path to the game configuration file to be loaded."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the loaded CGameConfig object, or nullptr if loading fails."
      }
    },
    {
      "name": "GetGameConfigPath",
      "group": "Gameconfig",
      "description": "Retrieves the path of a game configuration.",
      "funcName": "GetGameConfigPath",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration whose path is to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the path will be stored."
      }
    },
    {
      "name": "GetGameConfigLibrary",
      "group": "Gameconfig",
      "description": "Retrieves a library associated with the game configuration.",
      "funcName": "GetGameConfigLibrary",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the library."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the library to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the library will be stored."
      }
    },
    {
      "name": "GetGameConfigSignature",
      "group": "Gameconfig",
      "description": "Retrieves the signature associated with the game configuration.",
      "funcName": "GetGameConfigSignature",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the signature."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the signature to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the signature will be stored."
      }
    },
    {
      "name": "GetGameConfigSymbol",
      "group": "Gameconfig",
      "description": "Retrieves a symbol associated with the game configuration.",
      "funcName": "GetGameConfigSymbol",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the symbol."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the symbol to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the symbol will be stored."
      }
    },
    {
      "name": "GetGameConfigPatch",
      "group": "Gameconfig",
      "description": "Retrieves a patch associated with the game configuration.",
      "funcName": "GetGameConfigPatch",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the patch."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the patch to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the patch will be stored."
      }
    },
    {
      "name": "GetGameConfigOffset",
      "group": "Gameconfig",
      "description": "Retrieves the offset associated with a name from the game configuration.",
      "funcName": "GetGameConfigOffset",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the offset."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name whose offset is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The offset associated with the specified name."
      }
    },
    {
      "name": "GetGameConfigAddress",
      "group": "Gameconfig",
      "description": "Retrieves the address associated with a name from the game configuration.",
      "funcName": "GetGameConfigAddress",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the address."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name whose address is to be retrieved."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the address associated with the specified name."
      }
    },
    {
      "name": "GetGameConfigMemSig",
      "group": "Gameconfig",
      "description": "Retrieves the memory signature associated with a name from the game configuration.",
      "funcName": "GetGameConfigMemSig",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the memory signature."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name whose memory signature is to be resolved and retrieved."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the memory signature associated with the specified name."
      }
    },
    {
      "name": "RegisterLoggingChannel",
      "group": "Logger",
      "description": "Registers a new logging channel with specified properties.",
      "funcName": "RegisterLoggingChannel",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the logging channel."
        },
        {
          "name": "iFlags",
          "type": "int32",
          "ref": false,
          "description": "Flags associated with the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The verbosity level for the logging channel.",
          "enum": {
            "name": "LoggingVerbosity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Essential",
                "description": "Turns on vital logs."
              },
              {
                "value": 2,
                "name": "Default",
                "description": "Turns on most messages."
              },
              {
                "value": 3,
                "name": "Detailed",
                "description": "Allows for walls of text that are usually useful."
              },
              {
                "value": 4,
                "name": "Max",
                "description": "Allows everything."
              }
            ]
          }
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The color for messages logged to this channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The ID of the newly created logging channel."
      }
    },
    {
      "name": "AddLoggerTagToChannel",
      "group": "Logger",
      "description": "Adds a tag to a specified logging channel.",
      "funcName": "AddLoggerTagToChannel",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel to which the tag will be added."
        },
        {
          "name": "tagName",
          "type": "string",
          "ref": false,
          "description": "The name of the tag to add to the channel."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "HasLoggerTag",
      "group": "Logger",
      "description": "Checks if a specified tag exists in a logging channel.",
      "funcName": "HasLoggerTag",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "tag",
          "type": "string",
          "ref": false,
          "description": "The name of the tag to check for."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the tag exists in the channel, otherwise false."
      }
    },
    {
      "name": "IsLoggerChannelEnabledBySeverity",
      "group": "Logger",
      "description": "Checks if a logging channel is enabled based on severity.",
      "funcName": "IsLoggerChannelEnabledBySeverity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity of a logging operation.",
          "enum": {
            "name": "LoggingSeverity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Detailed",
                "description": "A debug message."
              },
              {
                "value": 2,
                "name": "Message",
                "description": "An informative logging message."
              },
              {
                "value": 3,
                "name": "Warning",
                "description": "A warning, typically non-fatal."
              },
              {
                "value": 4,
                "name": "Assert",
                "description": "A message caused by an Assert**() operation."
              },
              {
                "value": 5,
                "name": "Error",
                "description": "An error, typically fatal/unrecoverable."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the channel is enabled for the specified severity, otherwise false."
      }
    },
    {
      "name": "IsLoggerChannelEnabledByVerbosity",
      "group": "Logger",
      "description": "Checks if a logging channel is enabled based on verbosity.",
      "funcName": "IsLoggerChannelEnabledByVerbosity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The verbosity level to check.",
          "enum": {
            "name": "LoggingVerbosity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Essential",
                "description": "Turns on vital logs."
              },
              {
                "value": 2,
                "name": "Default",
                "description": "Turns on most messages."
              },
              {
                "value": 3,
                "name": "Detailed",
                "description": "Allows for walls of text that are usually useful."
              },
              {
                "value": 4,
                "name": "Max",
                "description": "Allows everything."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the channel is enabled for the specified verbosity, otherwise false."
      }
    },
    {
      "name": "GetLoggerChannelVerbosity",
      "group": "Logger",
      "description": "Retrieves the verbosity level of a logging channel.",
      "funcName": "GetLoggerChannelVerbosity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The verbosity level of the specified logging channel."
      }
    },
    {
      "name": "SetLoggerChannelVerbosity",
      "group": "Logger",
      "description": "Sets the verbosity level of a logging channel.",
      "funcName": "SetLoggerChannelVerbosity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The new verbosity level to set.",
          "enum": {
            "name": "LoggingVerbosity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Essential",
                "description": "Turns on vital logs."
              },
              {
                "value": 2,
                "name": "Default",
                "description": "Turns on most messages."
              },
              {
                "value": 3,
                "name": "Detailed",
                "description": "Allows for walls of text that are usually useful."
              },
              {
                "value": 4,
                "name": "Max",
                "description": "Allows everything."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetLoggerChannelVerbosityByName",
      "group": "Logger",
      "description": "Sets the verbosity level of a logging channel by name.",
      "funcName": "SetLoggerChannelVerbosityByName",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The new verbosity level to set.",
          "enum": {
            "name": "LoggingVerbosity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Essential",
                "description": "Turns on vital logs."
              },
              {
                "value": 2,
                "name": "Default",
                "description": "Turns on most messages."
              },
              {
                "value": 3,
                "name": "Detailed",
                "description": "Allows for walls of text that are usually useful."
              },
              {
                "value": 4,
                "name": "Max",
                "description": "Allows everything."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetLoggerChannelVerbosityByTag",
      "group": "Logger",
      "description": "Sets the verbosity level of a logging channel by tag.",
      "funcName": "SetLoggerChannelVerbosityByTag",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "tag",
          "type": "string",
          "ref": false,
          "description": "The name of the tag."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The new verbosity level to set.",
          "enum": {
            "name": "LoggingVerbosity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Essential",
                "description": "Turns on vital logs."
              },
              {
                "value": 2,
                "name": "Default",
                "description": "Turns on most messages."
              },
              {
                "value": 3,
                "name": "Detailed",
                "description": "Allows for walls of text that are usually useful."
              },
              {
                "value": 4,
                "name": "Max",
                "description": "Allows everything."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetLoggerChannelColor",
      "group": "Logger",
      "description": "Retrieves the color setting of a logging channel.",
      "funcName": "GetLoggerChannelColor",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The color value of the specified logging channel."
      }
    },
    {
      "name": "SetLoggerChannelColor",
      "group": "Logger",
      "description": "Sets the color setting of a logging channel.",
      "funcName": "SetLoggerChannelColor",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The new color value to set for the channel."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetLoggerChannelFlags",
      "group": "Logger",
      "description": "Retrieves the flags of a logging channel.",
      "funcName": "GetLoggerChannelFlags",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The flags of the specified logging channel."
      }
    },
    {
      "name": "SetLoggerChannelFlags",
      "group": "Logger",
      "description": "Sets the flags of a logging channel.",
      "funcName": "SetLoggerChannelFlags",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "eFlags",
          "type": "int32",
          "ref": false,
          "description": "The new flags to set for the channel.",
          "enum": {
            "name": "LoggingChannelFlags",
            "description": "Logging channel behavior flags, set on channel creation.",
            "values": [
              {
                "value": 1,
                "name": "ConsoleOnly",
                "description": "Indicates that the spew is only relevant to interactive consoles."
              },
              {
                "value": 2,
                "name": "DoNotEcho",
                "description": "Indicates that spew should not be echoed to any output devices."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "Log",
      "group": "Logger",
      "description": "Logs a message to a specified channel with a severity level.",
      "funcName": "Log",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message.",
          "enum": {
            "name": "LoggingSeverity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Detailed",
                "description": "A debug message."
              },
              {
                "value": 2,
                "name": "Message",
                "description": "An informative logging message."
              },
              {
                "value": 3,
                "name": "Warning",
                "description": "A warning, typically non-fatal."
              },
              {
                "value": 4,
                "name": "Assert",
                "description": "A message caused by an Assert**() operation."
              },
              {
                "value": 5,
                "name": "Error",
                "description": "An error, typically fatal/unrecoverable."
              }
            ]
          }
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
      "name": "LogColored",
      "group": "Logger",
      "description": "Logs a colored message to a specified channel with a severity level.",
      "funcName": "LogColored",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message.",
          "enum": {
            "name": "LoggingSeverity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Detailed",
                "description": "A debug message."
              },
              {
                "value": 2,
                "name": "Message",
                "description": "An informative logging message."
              },
              {
                "value": 3,
                "name": "Warning",
                "description": "A warning, typically non-fatal."
              },
              {
                "value": 4,
                "name": "Assert",
                "description": "A message caused by an Assert**() operation."
              },
              {
                "value": 5,
                "name": "Error",
                "description": "An error, typically fatal/unrecoverable."
              }
            ]
          }
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The color for the log message."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
      "name": "LogFull",
      "group": "Logger",
      "description": "Logs a detailed message to a specified channel, including source code info.",
      "funcName": "LogFull",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message.",
          "enum": {
            "name": "LoggingSeverity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Detailed",
                "description": "A debug message."
              },
              {
                "value": 2,
                "name": "Message",
                "description": "An informative logging message."
              },
              {
                "value": 3,
                "name": "Warning",
                "description": "A warning, typically non-fatal."
              },
              {
                "value": 4,
                "name": "Assert",
                "description": "A message caused by an Assert**() operation."
              },
              {
                "value": 5,
                "name": "Error",
                "description": "An error, typically fatal/unrecoverable."
              }
            ]
          }
        },
        {
          "name": "file",
          "type": "string",
          "ref": false,
          "description": "The file name where the log call occurred."
        },
        {
          "name": "line",
          "type": "int32",
          "ref": false,
          "description": "The line number where the log call occurred."
        },
        {
          "name": "function",
          "type": "string",
          "ref": false,
          "description": "The name of the function where the log call occurred."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
      "name": "LogFullColored",
      "group": "Logger",
      "description": "Logs a detailed colored message to a specified channel, including source code info.",
      "funcName": "LogFullColored",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message.",
          "enum": {
            "name": "LoggingSeverity",
            "description": "Enum representing the possible verbosity of a logger.",
            "values": [
              {
                "value": 0,
                "name": "Off",
                "description": "Turns off all spew."
              },
              {
                "value": 1,
                "name": "Detailed",
                "description": "A debug message."
              },
              {
                "value": 2,
                "name": "Message",
                "description": "An informative logging message."
              },
              {
                "value": 3,
                "name": "Warning",
                "description": "A warning, typically non-fatal."
              },
              {
                "value": 4,
                "name": "Assert",
                "description": "A message caused by an Assert**() operation."
              },
              {
                "value": 5,
                "name": "Error",
                "description": "An error, typically fatal/unrecoverable."
              }
            ]
          }
        },
        {
          "name": "file",
          "type": "string",
          "ref": false,
          "description": "The file name where the log call occurred."
        },
        {
          "name": "line",
          "type": "int32",
          "ref": false,
          "description": "The line number where the log call occurred."
        },
        {
          "name": "function",
          "type": "string",
          "ref": false,
          "description": "The name of the function where the log call occurred."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The color for the log message."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
        "name": "GetSchemaOffset",
        "group": "Schema",
        "description": "Get the offset of a member in a given schema class.",
        "funcName": "GetSchemaOffset",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member whose offset is to be retrieved."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The offset of the member in the class."
        }
    },
    {
        "name": "GetSchemaChainOffset",
        "group": "Schema",
        "description": "Get the offset of a chain in a given schema class.",
        "funcName": "GetSchemaChainOffset",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The offset of the chain entity in the class."
        }
    },
    {
        "name": "IsSchemaFieldNetworked",
        "group": "Schema",
        "description": "Check if a schema field is networked.",
        "funcName": "IsSchemaFieldNetworked",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member to check."
            }
        ],
        "retType": {
            "type": "bool",
            "description": "True if the member is networked, false otherwise."
        }
    },
    {
        "name": "GetSchemaClassSize",
        "group": "Schema",
        "description": "Get the size of a schema class.",
        "funcName": "GetSchemaClassSize",
        "paramTypes": [
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The size of the class in bytes, or -1 if the class is not found."
        }
    },
    {
        "name": "GetEntData2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the integer value at the given offset.",
        "funcName": "GetEntData2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "The integer value at the given memory location."
        }
    },
    {
        "name": "SetEntData2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the integer value at the given offset.",
        "funcName": "SetEntData2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataFloat2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the float value at the given offset.",
        "funcName": "GetEntDataFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "double",
            "description": "The float value at the given memory location."
        }
    },
    {
        "name": "SetEntDataFloat2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the float value at the given offset.",
        "funcName": "SetEntDataFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataString2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the string value at the given offset.",
        "funcName": "GetEntDataString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The string value at the given memory location."
        }
    },
    {
        "name": "SetEntDataString2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the string at the given offset.",
        "funcName": "SetEntDataString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataVector2",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the vector value at the given offset.",
        "funcName": "GetEntDataVector2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The vector value at the given memory location."
        }
    },
    {
        "name": "SetEntDataVector2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the vector at the given offset.",
        "funcName": "SetEntDataVector2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataEnt2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and retrieves the entity handle at the given offset.",
        "funcName": "GetEntDataEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle at the given memory location."
        }
    },
    {
        "name": "SetEntDataEnt2",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the entity handle at the given offset.",
        "funcName": "SetEntDataEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "ChangeEntityState2",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity pointer.",
        "funcName": "ChangeEntityState2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntData",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the integer value at the given offset.",
        "funcName": "GetEntData",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "The integer value at the given memory location."
        }
    },
    {
        "name": "SetEntData",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the integer value at the given offset.",
        "funcName": "SetEntData",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataFloat",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the float value at the given offset.",
        "funcName": "GetEntDataFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            }
        ],
        "retType": {
            "type": "double",
            "description": "The float value at the given memory location."
        }
    },
    {
        "name": "SetEntDataFloat",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the float value at the given offset.",
        "funcName": "SetEntDataFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "size",
                "type": "int32",
                "ref": false,
                "description": "Number of bytes to write (valid values are 1, 2, 4 or 8)."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataString",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the string value at the given offset.",
        "funcName": "GetEntDataString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "string",
            "description": "The string value at the given memory location."
        }
    },
    {
        "name": "SetEntDataString",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the string at the given offset.",
        "funcName": "SetEntDataString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataVector",
        "group": "Schema",
        "description": "Peeks into an entity's object schema and retrieves the vector value at the given offset.",
        "funcName": "GetEntDataVector",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "The vector value at the given memory location."
        }
    },
    {
        "name": "SetEntDataVector",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the vector at the given offset.",
        "funcName": "SetEntDataVector",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntDataEnt",
        "group": "Schema",
        "description": "Peeks into an entity's object data and retrieves the entity handle at the given offset.",
        "funcName": "GetEntDataEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "The entity handle at the given memory location."
        }
    },
    {
        "name": "SetEntDataEnt",
        "group": "Schema",
        "description": "Peeks into an entity's object data and sets the entity handle at the given offset.",
        "funcName": "SetEntDataEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "ChangeEntityState",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity handle.",
        "funcName": "ChangeEntityState",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "offset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the schema to use."
            },
            {
                "name": "chainOffset",
                "type": "int32",
                "ref": false,
                "description": "The offset of the chain entity in the class."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntSchemaArraySize2",
        "group": "Schema",
        "description": "Retrieves the count of values that an entity schema's array can store.",
        "funcName": "GetEntSchemaArraySize2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "Size of array (in elements) or 0 if schema is not an array."
        }
    },
    {
        "name": "GetEntSchema2",
        "group": "Schema",
        "description": "Retrieves an integer value from an entity's schema.",
        "funcName": "GetEntSchema2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchema2",
        "group": "Schema",
        "description": "Sets an integer value in an entity's schema.",
        "funcName": "SetEntSchema2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaFloat2",
        "group": "Schema",
        "description": "Retrieves a float value from an entity's schema.",
        "funcName": "GetEntSchemaFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "double",
            "description": "A float value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaFloat2",
        "group": "Schema",
        "description": "Sets a float value in an entity's schema.",
        "funcName": "SetEntSchemaFloat2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An float value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaString2",
        "group": "Schema",
        "description": "Retrieves a string value from an entity's schema.",
        "funcName": "GetEntSchemaString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaString2",
        "group": "Schema",
        "description": "Sets a string value in an entity's schema.",
        "funcName": "SetEntSchemaString2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An string value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector3D2",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector3D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A vector value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector3D2",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector3D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector2D2",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector2D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec2",
            "description": "A vector value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector2D2",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector2D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector4D2",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector4D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec4",
            "description": "A vector value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector4D2",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector4D2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec4",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaEnt2",
        "group": "Schema",
        "description": "Retrieves an entity handle from an entity's schema.",
        "funcName": "GetEntSchemaEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaEnt2",
        "group": "Schema",
        "description": "Sets an entity handle in an entity's schema.",
        "funcName": "SetEntSchemaEnt2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An entity handle at the given schema offset."
        }
    },
    {
        "name": "NetworkStateChanged2",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity pointer.",
        "funcName": "NetworkStateChanged2",
        "paramTypes": [
            {
                "name": "entity",
                "type": "ptr64",
                "ref": false,
                "description": "Pointer to the instance of the class where the value is to be set."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class that contains the member."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member to be set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
        "name": "GetEntSchemaArraySize",
        "group": "Schema",
        "description": "Retrieves the count of values that an entity schema's array can store.",
        "funcName": "GetEntSchemaArraySize",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "Size of array (in elements) or 0 if schema is not an array."
        }
    },
    {
        "name": "GetEntSchema",
        "group": "Schema",
        "description": "Retrieves an integer value from an entity's schema.",
        "funcName": "GetEntSchema",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int64",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchema",
        "group": "Schema",
        "description": "Sets an integer value in an entity's schema.",
        "funcName": "SetEntSchema",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int64",
                "ref": false,
                "description": "The integer value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An integer value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaFloat",
        "group": "Schema",
        "description": "Retrieves a float value from an entity's schema.",
        "funcName": "GetEntSchemaFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "double",
            "description": "A float value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaFloat",
        "group": "Schema",
        "description": "Sets a float value in an entity's schema.",
        "funcName": "SetEntSchemaFloat",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "double",
                "ref": false,
                "description": "The float value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An float value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaString",
        "group": "Schema",
        "description": "Retrieves a string value from an entity's schema.",
        "funcName": "GetEntSchemaString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "string",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaString",
        "group": "Schema",
        "description": "Sets a string value in an entity's schema.",
        "funcName": "SetEntSchemaString",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "string",
                "ref": false,
                "description": "The string value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An string value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector3D",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector3D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec3",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector3D",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector3D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec3",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector2D",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector2D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec2",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector2D",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector2D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec2",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaVector4D",
        "group": "Schema",
        "description": "Retrieves a vector value from an entity's schema.",
        "funcName": "GetEntSchemaVector4D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "vec4",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaVector4D",
        "group": "Schema",
        "description": "Sets a vector value in an entity's schema.",
        "funcName": "SetEntSchemaVector4D",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "vec4",
                "ref": false,
                "description": "The vector value to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An vector value at the given schema offset."
        }
    },
    {
        "name": "GetEntSchemaEnt",
        "group": "Schema",
        "description": "Retrieves an entity handle from an entity's schema.",
        "funcName": "GetEntSchemaEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "int32",
            "description": "A string value at the given schema offset."
        }
    },
    {
        "name": "SetEntSchemaEnt",
        "group": "Schema",
        "description": "Sets an entity handle in an entity's schema.",
        "funcName": "SetEntSchemaEnt",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the schema member."
            },
            {
                "name": "value",
                "type": "int32",
                "ref": false,
                "description": "The entity handle to set."
            },
            {
                "name": "changeState",
                "type": "bool",
                "ref": false,
                "description": "If true, change will be sent over the network."
            },
            {
                "name": "element",
                "type": "int32",
                "ref": false,
                "description": "Element # (starting from 0) if schema is an array."
            }
        ],
        "retType": {
            "type": "void",
            "description": "An entity handle at the given schema offset."
        }
    },
    {
        "name": "NetworkStateChanged",
        "group": "Schema",
        "description": "Updates the networked state of a schema field for a given entity handle.",
        "funcName": "NetworkStateChanged",
        "paramTypes": [
            {
                "name": "entityHandle",
                "type": "int32",
                "ref": false,
                "description": "The handle of the entity from which the value is to be retrieved."
            },
            {
                "name": "className",
                "type": "string",
                "ref": false,
                "description": "The name of the class that contains the member."
            },
            {
                "name": "memberName",
                "type": "string",
                "ref": false,
                "description": "The name of the member to be set."
            }
        ],
        "retType": {
            "type": "void"
        }
    },
    {
      "name": "CreateTimer",
      "group": "Timers",
      "description": "Creates a new timer that executes a callback function at specified intervals.",
      "funcName": "CreateTimer",
      "paramTypes": [
        {
          "name": "interval",
          "type": "double",
          "ref": false,
          "description": "The time interval in seconds between each callback execution."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The function to be called when the timer expires.",
          "prototype": {
            "name": "TimerCallback",
            "description": "This function is invoked when a timer event occurs. It handles the timer-related logic and performs necessary actions based on the event.",
            "paramTypes": [
              {
                "name": "timer",
                "type": "uint64",
                "description": "A handle to the timer object. This object contains the details of the timer, such as its current state, duration, and any associated data."
              },
              {
                "name": "userData",
                "type": "any[]",
                "ref": false,
                "description": "An array intended to hold user-related data, allowing for elements of any type."
              }
            ],
            "retType": {
              "type": "void",
              "description": "This function does not return any value. All necessary operations are performed directly during the callback."
            }
          }
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that modify the behavior of the timer (e.g., no-map change, repeating).",
          "enum": {
            "name": "TimerFlag",
            "description": "Enum representing the possible flags of a timer.",
            "values": [
              {
                "value": 0,
                "name": "Default",
                "description": "Timer with no unique properties."
              },
              {
                "value": 1,
                "name": "Repeat",
                "description": "Timer will repeat until stopped."
              },
              {
                "value": 2,
                "name": "NoMapChange",
                "description": "Timer will not carry over mapchanges."
              }
            ]
          }
        },
        {
          "name": "userData",
          "type": "any[]",
          "ref": false,
          "description": "An array intended to hold user-related data, allowing for elements of any type."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "A handle to the newly created CTimer object, or -1 if the timer could not be created."
      }
    },
    {
      "name": "KillsTimer",
      "group": "Timers",
      "description": "Stops and removes an existing timer.",
      "funcName": "KillsTimer",
      "paramTypes": [
        {
          "name": "timer",
          "type": "uint64",
          "ref": false,
          "description": "A handle of the CTimer object to be stopped and removed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetTickInterval",
      "group": "Timers",
      "description": "Returns the number of seconds in between game server ticks.",
      "funcName": "GetTickInterval",
      "paramTypes": [],
      "retType": {
        "type": "double",
        "description": "The tick interval value."
      }
    },
    {
      "name": "GetTickedTime",
      "group": "Timers",
      "description": "Returns the simulated game time.",
      "funcName": "GetTickedTime",
      "paramTypes": [],
      "retType": {
        "type": "double",
        "description": "The ticked time value."
      }
    },

    {
      "name": "OnClientConnect_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientConnect_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectCallback",
            "description": "Called on client connection. If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected. If the client is rejected by this forward or any other, OnClientDisconnect will not be called.<br>Note: Do not write to rejectmsg if you plan on returning true. If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The client name"
              },
              {
                "name": "networkId",
                "type": "string",
                "description": "The client id"
              }
            ],
            "retType": {
              "type": "bool",
              "description": "True to validate client's connection, false to refuse it."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnect_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientConnect_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectCallback",
            "description": "Called on client connection. If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected. If the client is rejected by this forward or any other, OnClientDisconnect will not be called.<br>Note: Do not write to rejectmsg if you plan on returning true. If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The client name"
              },
              {
                "name": "networkId",
                "type": "string",
                "description": "The client id"
              }
            ],
            "retType": {
              "type": "bool",
              "description": "True to validate client's connection, false to refuse it."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnect_Post_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientConnect_Post_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnect_PostCallback",
            "description": "Called on client connection.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnect_Post_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientConnect_Post_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnect_PostCallback",
            "description": "Called on client connection.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnected_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientConnected_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectedCallback",
            "description": "Called once a client successfully connects. This callback is paired with OnClientDisconnect.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnected_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientConnected_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectedCallback",
            "description": "Called once a client successfully connects. This callback is paired with OnClientDisconnect.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientPutInServer_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientPutInServer_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientPutInServerCallback",
            "description": "Called when a client is entering the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientPutInServer_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientPutInServer_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientPutInServerCallback",
            "description": "Called when a client is entering the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientDisconnect_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnectCallback",
            "description": "Called when a client is disconnecting from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientDisconnect_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnectCallback",
            "description": "Called when a client is disconnecting from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Post_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientDisconnect_Post_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnect_PostCallback",
            "description": "Called when a client is disconnected from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "reason",
                "type": "int32",
                "description": "The reason for disconnect"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Post_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientDisconnect_Post_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnect_PostCallback",
            "description": "Called when a client is disconnected from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "reason",
                "type": "int32",
                "description": "The reason for disconnect"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientActive_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientActive_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientActiveCallback",
            "description": "Called when a client is activated by the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "isActive",
                "type": "bool",
                "description": "Active state"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientActive_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientActive_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientActiveCallback",
            "description": "Called when a client is activated by the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "isActive",
                "type": "bool",
                "description": "Active state"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientFullyConnect_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientFullyConnect_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientFullyConnectCallback",
            "description": "Called when a client is fully connected to the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientFullyConnect_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientFullyConnect_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientFullyConnectCallback",
            "description": "Called when a client is fully connected to the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelInit_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnLevelInit_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelInitCallback",
            "description": "Called when the map starts loading.",
            "paramTypes": [
              {
                "name": "mapName",
                "type": "string",
                "description": "The name of the map"
              },
              {
                "name": "mapEntities",
                "type": "string",
                "description": "The entities of the map"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelInit_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnLevelInit_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelInitCallback",
            "description": "Called when the map starts loading.",
            "paramTypes": [
              {
                "name": "mapName",
                "type": "string",
                "description": "The name of the map"
              },
              {
                "name": "mapEntities",
                "type": "string",
                "description": "The entities of the map"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelShutdown_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnLevelShutdown_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelShutdownCallback",
            "description": "Called right before a map ends.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelShutdown_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnLevelShutdown_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelShutdownCallback",
            "description": "Called right before a map ends.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntitySpawned_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntitySpawned_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntitySpawnedCallback",
            "description": "Called when an entity is spawned.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The spawned entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntitySpawned_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntitySpawned_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntitySpawnedCallback",
            "description": "Called when an entity is spawned.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The spawned entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityCreated_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntityCreated_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityCreatedCallback",
            "description": "Called when an entity is created.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The created entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityCreated_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntityCreated_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityCreatedCallback",
            "description": "Called when an entity is created.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The created entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityDeleted_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntityDeleted_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityDeletedCallback",
            "description": "Called when when an entity is destroyed.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The deleted entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityDeleted_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntityDeleted_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityDeletedCallback",
            "description": "Called when when an entity is destroyed.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The deleted entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityParentChanged_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntityParentChanged_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityParentChangedCallback",
            "description": "When an entity is reparented to another entity.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The entity whose parent changed"
              },
              {
                "name": "newParent",
                "type": "ptr64",
                "description": "The new parent entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityParentChanged_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntityParentChanged_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityParentChangedCallback",
            "description": "When an entity is reparented to another entity.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The entity whose parent changed"
              },
              {
                "name": "newParent",
                "type": "ptr64",
                "description": "The new parent entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnServerStartup_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnServerStartup_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnServerStartupCallback",
            "description": "Called on every server startup.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnServerStartup_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnServerStartup_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnServerStartupCallback",
            "description": "Called on every server startup.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnServerActivate_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnServerActivate_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnServerActivateCallback",
            "description": "Called on every server activate.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnServerActivate_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnServerActivate_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnServerActivateCallback",
            "description": "Called on every server activate.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnGameFrame_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnGameFrame_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnGameFrameCallback",
            "description": "Called before every server frame. Note that you should avoid doing expensive computations or declaring large local arrays.",
            "paramTypes": [
              {
                "name": "simulating",
                "type": "bool",
                "description": ""
              },
              {
                "name": "firstTick",
                "type": "bool",
                "description": ""
              },
              {
                "name": "lastTick",
                "type": "bool",
                "description": ""
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnGameFrame_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnGameFrame_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnGameFrameCallback",
            "description": "Called before every server frame. Note that you should avoid doing expensive computations or declaring large local arrays.",
            "paramTypes": [
              {
                "name": "simulating",
                "type": "bool",
                "description": ""
              },
              {
                "name": "firstTick",
                "type": "bool",
                "description": ""
              },
              {
                "name": "lastTick",
                "type": "bool",
                "description": ""
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnUpdateWhenNotInGame_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnUpdateWhenNotInGame_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnUpdateWhenNotInGameCallback",
            "description": "",
            "paramTypes": [
              {
                "name": "deltaTime",
                "type": "float",
                "description": "Time elapsed since last update"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnUpdateWhenNotInGame_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnUpdateWhenNotInGame_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnUpdateWhenNotInGameCallback",
            "description": "",
            "paramTypes": [
              {
                "name": "deltaTime",
                "type": "float",
                "description": "Time elapsed since last update"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnPreWorldUpdate_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnPreWorldUpdate_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnPreWorldUpdateCallback",
            "description": "",
            "paramTypes": [
              {
                "name": "simulating",
                "type": "bool",
                "description": ""
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnPreWorldUpdate_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnPreWorldUpdate_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnPreWorldUpdateCallback",
            "description": "",
            "paramTypes": [
              {
                "name": "simulating",
                "type": "bool",
                "description": ""
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetGameRules",
      "group": "Gamerules",
      "description": "Retrieves the pointer to the current game rules instance.",
      "funcName": "GetGameRules",
      "paramTypes": [],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the game rules object."
      }
    },
    {
      "name": "TerminateRound",
      "group": "Gamerules",
      "description": "Forces the round to end with a specified reason and delay.",
      "funcName": "TerminateRound",
      "paramTypes": [
        {
          "name": "delay",
          "type": "float",
          "ref": false,
          "description": "Time (in seconds) to delay before the next round starts."
        },
        {
          "name": "reason",
          "type": "int32",
          "ref": false,
          "description": "The reason for ending the round, defined by the CSRoundEndReason enum.",
          "enum": {
            "name": "CSRoundEndReason",
            "description": "Enum representing the possible reasons for a round ending in Counter-Strike.",
            "values": [
              {
                "value": 1,
                "name": "TargetBombed",
                "description": "Target successfully bombed."
              },
              {
                "value": 2,
                "name": "VIPEscaped",
                "description": "The VIP has escaped (not present in CS:GO)."
              },
              {
                "value": 3,
                "name": "VIPKilled",
                "description": "VIP has been assassinated (not present in CS:GO)."
              },
              {
                "value": 4,
                "name": "TerroristsEscaped",
                "description": "The terrorists have escaped."
              },
              {
                "value": 5,
                "name": "CTStoppedEscape",
                "description": "The CTs have prevented most of the terrorists from escaping."
              },
              {
                "value": 6,
                "name": "TerroristsStopped",
                "description": "Escaping terrorists have all been neutralized."
              },
              {
                "value": 7,
                "name": "BombDefused",
                "description": "The bomb has been defused."
              },
              {
                "value": 8,
                "name": "CTWin",
                "description": "Counter-Terrorists win."
              },
              {
                "value": 9,
                "name": "TerroristWin",
                "description": "Terrorists win."
              },
              {
                "value": 10,
                "name": "Draw",
                "description": "Round draw."
              },
              {
                "value": 11,
                "name": "HostagesRescued",
                "description": "All hostages have been rescued."
              },
              {
                "value": 12,
                "name": "TargetSaved",
                "description": "Target has been saved."
              },
              {
                "value": 13,
                "name": "HostagesNotRescued",
                "description": "Hostages have not been rescued."
              },
              {
                "value": 14,
                "name": "TerroristsNotEscaped",
                "description": "Terrorists have not escaped."
              },
              {
                "value": 15,
                "name": "VIPNotEscaped",
                "description": "VIP has not escaped (not present in CS:GO)."
              },
              {
                "value": 16,
                "name": "GameStart",
                "description": "Game commencing."
              },
              {
                "value": 17,
                "name": "TerroristsSurrender",
                "description": "Terrorists surrender."
              },
              {
                "value": 18,
                "name": "CTSurrender",
                "description": "CTs surrender."
              },
              {
                "value": 19,
                "name": "TerroristsPlanted",
                "description": "Terrorists planted the bomb."
              },
              {
                "value": 20,
                "name": "CTsReachedHostage",
                "description": "CTs reached the hostage."
              },
              {
                "value": 21,
                "name": "SurvivalWin",
                "description": "Survival mode win."
              },
              {
                "value": 22,
                "name": "SurvivalDraw",
                "description": "Survival mode draw."
              }
            ]
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetWeaponVData",
      "group": "Weapons",
      "description": "Retrieves the weapon VData for a given weapon.",
      "funcName": "GetWeaponVData",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity from which to retrieve the weapon VData."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "The handle of the entity from which to retrieve the weapon VData."
      }
    },
    {
      "name": "GetWeaponDefIndex",
      "group": "Weapons",
      "description": "etrieves the weapon definition index for a given entity handle.",
      "funcName": "GetWeaponDefIndex",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity from which to retrieve the weapon def index."
        }
      ],
      "retType": {
        "type": "uint16",
        "description": "The weapon definition index as a `uint16_t`, or 0 if the entity handle is invalid."
      }
    }
  ]
}