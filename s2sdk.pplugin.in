{
  "fileVersion": 1,
  "version": ${S2SDK_VERSION},
  "versionName": "v${S2SDK_VERSION}",
  "friendlyName": "CS2-SDK",
  "description": "Provides functionality for other plugins from Source 2 engine",
  "createdBy": "untrustedmodders",
  "createdByURL": "https://github.com/untrustedmodders/",
  "docsURL": "https://github.com/untrustedmodders/plugify-source-2",
  "downloadURL": "https://github.com/untrustedmodders/plugify-source-2/releases/download/v${S2SDK_VERSION}/${S2SDK_PACKAGE}.zip",
  "updateURL": "https://untrustedmodders.github.io/plugify-source-2/s2sdk.json",
  "entryPoint": "bin/s2sdk",
  "supportedPlatforms": [],
  "resourceDirectories": [
    "configs",
    "gamedata"
  ],
  "languageModule": {
    "name": "cpp"
  },
  "dependencies": [
    {
      "name": "polyhook"
    }
  ],
  "exportedMethods": [
    {
      "name": "GetClientAuthId",
      "group": "Clients",
      "description": "Retrieves a client's authentication string (SteamID).",
      "funcName": "GetClientAuthId",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client whose authentication string is being retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The authentication string."
      }
    },
    {
      "name": "GetClientAccountId",
      "group": "Clients",
      "description": "Returns the client's Steam account ID, a unique number identifying a given Steam account.",
      "funcName": "GetClientAccountId",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "uint64_t Steam account ID."
      }
    },
    {
      "name": "GetClientIp",
      "group": "Clients",
      "description": "Retrieves a client's IP address.",
      "funcName": "GetClientIp",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The IP address."
      }
    },
    {
      "name": "GetClientName",
      "group": "Clients",
      "description": "Returns the client's name.",
      "funcName": "GetClientName",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The client's name."
      }
    },
    {
      "name": "GetClientTime",
      "group": "Clients",
      "description": "Returns the client's connection time in seconds.",
      "funcName": "GetClientTime",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "float",
        "description": "float Connection time in seconds."
      }
    },
    {
      "name": "GetClientLatency",
      "group": "Clients",
      "description": "Returns the client's current latency (RTT).",
      "funcName": "GetClientLatency",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "float",
        "description": "float Latency value."
      }
    },
    {
      "name": "GetUserFlagBits",
      "group": "Clients",
      "description": "Returns the client's access flags.",
      "funcName": "GetUserFlagBits",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "uint64 Access flags as a bitmask."
      }
    },
    {
      "name": "SetUserFlagBits",
      "group": "Clients",
      "description": "Sets the access flags on a client using a bitmask.",
      "funcName": "SetUserFlagBits",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "flags",
          "type": "uint64",
          "ref": false,
          "description": "Bitmask representing the flags to be set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AddUserFlags",
      "group": "Clients",
      "description": "Adds access flags to a client.",
      "funcName": "AddUserFlags",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "flags",
          "type": "uint64",
          "ref": false,
          "description": "Bitmask representing the flags to be added."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveUserFlags",
      "group": "Clients",
      "description": "Removes access flags from a client.",
      "funcName": "RemoveUserFlags",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "flags",
          "type": "uint64",
          "ref": false,
          "description": "Bitmask representing the flags to be removed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "IsClientAuthorized",
      "group": "Clients",
      "description": "Checks if a certain player has been authenticated.",
      "funcName": "IsClientAuthorized",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the player is authenticated, false otherwise."
      }
    },
    {
      "name": "IsClientConnected",
      "group": "Clients",
      "description": "Checks if a certain player is connected.",
      "funcName": "IsClientConnected",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the player is connected, false otherwise."
      }
    },
    {
      "name": "IsClientInGame",
      "group": "Clients",
      "description": "Checks if a certain player has entered the game.",
      "funcName": "IsClientInGame",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the player is in the game, false otherwise."
      }
    },
    {
      "name": "IsClientSourceTV",
      "group": "Clients",
      "description": "Checks if a certain player is the SourceTV bot.",
      "funcName": "IsClientSourceTV",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the client is the SourceTV bot, false otherwise."
      }
    },
    {
      "name": "IsClientAlive",
      "group": "Clients",
      "description": "Checks if the client is alive or dead.",
      "funcName": "IsClientAlive",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the client is alive, false if dead."
      }
    },
    {
      "name": "IsFakeClient",
      "group": "Clients",
      "description": "Checks if a certain player is a fake client.",
      "funcName": "IsFakeClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "true if the client is a fake client, false otherwise."
      }
    },
    {
      "name": "GetClientTeam",
      "group": "Clients",
      "description": "Retrieves a client's team index.",
      "funcName": "GetClientTeam",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "int The team index of the client."
      }
    },
    {
      "name": "GetClientHealth",
      "group": "Clients",
      "description": "Returns the client's health.",
      "funcName": "GetClientHealth",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "int The health value of the client."
      }
    },
    {
      "name": "GetClientArmor",
      "group": "Clients",
      "description": "Returns the client's armor value.",
      "funcName": "GetClientArmor",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "int The armor value of the client."
      }
    },
    {
      "name": "GetClientAbsOrigin",
      "group": "Clients",
      "description": "Retrieves the client's origin vector.",
      "funcName": "GetClientAbsOrigin",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A Vector where the client's origin will be stored."
      }
    },
    {
      "name": "GetClientAbsAngles",
      "group": "Clients",
      "description": "Retrieves the client's position angle.",
      "funcName": "GetClientAbsAngles",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A QAngle where the client's position angle will be stored."
      }
    },
    {
      "name": "ProcessTargetString",
      "group": "Clients",
      "description": "Processes the target string to determine if one user can target another.",
      "funcName": "ProcessTargetString",
      "paramTypes": [
        {
          "name": "caller",
          "type": "int32",
          "ref": false,
          "description": "Index of the client making the target request."
        },
        {
          "name": "target",
          "type": "string",
          "ref": false,
          "description": "The target string specifying the player or players to be targeted."
        }
      ],
      "retType": {
        "type": "int32[]",
        "description": "A vector where the result of the targeting operation will be stored."
      }
    },
    {
      "name": "ChangeClientTeam",
      "group": "Clients",
      "description": "Changes a client's team.",
      "funcName": "ChangeClientTeam",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "team",
          "type": "int32",
          "ref": false,
          "description": "The team index to assign the client to."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SwitchClientTeam",
      "group": "Clients",
      "description": "Switches the player's team.",
      "funcName": "SwitchClientTeam",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "team",
          "type": "int32",
          "ref": false,
          "description": "The team index to switch the client to."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RespawnClient",
      "group": "Clients",
      "description": "Respawns a player.",
      "funcName": "RespawnClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to respawn."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "ForcePlayerSuicide",
      "group": "Clients",
      "description": "Forces a player to commit suicide.",
      "funcName": "ForcePlayerSuicide",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client."
        },
        {
          "name": "explode",
          "type": "bool",
          "ref": false,
          "description": "If true, the client will explode upon death."
        },
        {
          "name": "force",
          "type": "bool",
          "ref": false,
          "description": "If true, the suicide will be forced."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "KickClient",
      "group": "Clients",
      "description": "Disconnects a client from the server as soon as the next frame starts.",
      "funcName": "KickClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to be kicked."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "BanClient",
      "group": "Clients",
      "description": "Bans a client for a specified duration.",
      "funcName": "BanClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to be banned."
        },
        {
          "name": "duration",
          "type": "float",
          "ref": false,
          "description": "Duration of the ban in seconds."
        },
        {
          "name": "kick",
          "type": "bool",
          "ref": false,
          "description": "If true, the client will be kicked immediately after being banned."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "BanIdentity",
      "group": "Clients",
      "description": "Bans an identity (either an IP address or a Steam authentication string).",
      "funcName": "BanIdentity",
      "paramTypes": [
        {
          "name": "steamId",
          "type": "uint64",
          "ref": false,
          "description": "The Steam ID to ban."
        },
        {
          "name": "duration",
          "type": "float",
          "ref": false,
          "description": "Duration of the ban in seconds."
        },
        {
          "name": "kick",
          "type": "bool",
          "ref": false,
          "description": "If true, the client will be kicked immediately after being banned."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AddAdminCommand",
      "group": "Commands",
      "description": "Creates a console command as an administrative command.",
      "funcName": "AddAdminCommand",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console command."
        },
        {
          "name": "adminFlags",
          "type": "int64",
          "ref": false,
          "description": "The admin flags that indicate which admin level can use this command."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of what the command does."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Command flags that define the behavior of the command."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function that is invoked when the command is executed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the command execution. The possible values are:\n\n- `Continue = 0`: The command continues to be processed without interruption.\n- `Changed = 1`: Indicates that the command has altered the state or behavior during execution.\n- `Handled = 3`: The command has been successfully handled, and no further action is required.\n- `Stop = 4`: The command processing is halted, and no further steps will be executed."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AddConsoleCommand",
      "group": "Commands",
      "description": "Creates a console command or hooks an already existing one.",
      "funcName": "AddConsoleCommand",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console command."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of what the command does."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "Command flags that define the behavior of the command."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function that is invoked when the command is executed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the command execution. The possible values are:\n\n- `Continue = 0`: The command continues to be processed without interruption.\n- `Changed = 1`: Indicates that the command has altered the state or behavior during execution.\n- `Handled = 3`: The command has been successfully handled, and no further action is required.\n- `Stop = 4`: The command processing is halted, and no further steps will be executed."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveCommand",
      "group": "Commands",
      "description": "Removes a console command from the system.",
      "funcName": "RemoveCommand",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the command to be removed."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function associated with the command to be removed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the command execution. The possible values are:\n\n- `Continue = 0`: The command continues to be processed without interruption.\n- `Changed = 1`: Indicates that the command has altered the state or behavior during execution.\n- `Handled = 3`: The command has been successfully handled, and no further action is required.\n- `Stop = 4`: The command processing is halted, and no further steps will be executed."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "AddCommandListener",
      "group": "Commands",
      "description": "Adds a callback that will fire when a command is sent to the server.",
      "funcName": "AddCommandListener",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the command."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function that will be invoked when the command is executed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the command execution. The possible values are:\n\n- `Continue = 0`: The command continues to be processed without interruption.\n- `Changed = 1`: Indicates that the command has altered the state or behavior during execution.\n- `Handled = 3`: The command has been successfully handled, and no further action is required.\n- `Stop = 4`: The command processing is halted, and no further steps will be executed."
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the callback should fire after the command is executed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveCommandListener",
      "group": "Commands",
      "description": "Removes a callback that fires when a command is sent to the server.",
      "funcName": "RemoveCommandListener",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the command."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to be removed.",
          "prototype": {
            "name": "CommandCallback",
            "description": "Handles the execution of a command triggered by a caller. This function processes the command, interprets its context, and handles any provided arguments.",
            "paramTypes": [
              {
                "name": "caller",
                "type": "int32",
                "description": "An identifier for the entity or object invoking the command. Typically used to track the source of the command."
              },
              {
                "name": "context",
                "type": "int32",
                "description": "The context in which the command is being executed. This value can be used to provide additional information about the environment or state related to the command."
              },
              {
                "name": "arguments",
                "type": "string[]",
                "description": "An array of strings representing the arguments passed to the command. These arguments define the parameters or options provided by the caller."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the command execution. The possible values are:\n\n- `Continue = 0`: The command continues to be processed without interruption.\n- `Changed = 1`: Indicates that the command has altered the state or behavior during execution.\n- `Handled = 3`: The command has been successfully handled, and no further action is required.\n- `Stop = 4`: The command processing is halted, and no further steps will be executed."
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the callback should be removed for post-execution."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "ServerCommand",
      "group": "Commands",
      "description": "Executes a server command as if it were run on the server console or through RCON.",
      "funcName": "ServerCommand",
      "paramTypes": [
        {
          "name": "command",
          "type": "string",
          "ref": false,
          "description": "The command to execute on the server."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "ClientCommand",
      "group": "Commands",
      "description": "Executes a client command.",
      "funcName": "ClientCommand",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client executing the command."
        },
        {
          "name": "command",
          "type": "string",
          "ref": false,
          "description": "The command to execute on the client."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "FakeClientCommand",
      "group": "Commands",
      "description": "Executes a client command on the server without network communication.",
      "funcName": "FakeClientCommand",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client."
        },
        {
          "name": "command",
          "type": "string",
          "ref": false,
          "description": "The command to be executed by the client."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToServer",
      "group": "Console",
      "description": "Sends a message to the server console.",
      "funcName": "PrintToServer",
      "paramTypes": [
        {
          "name": "msg",
          "type": "string",
          "ref": false,
          "description": "The message to be sent to the server console."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToConsole",
      "group": "Console",
      "description": "Sends a message to a client's console.",
      "funcName": "PrintToConsole",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be sent to the client's console."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChat",
      "group": "Console",
      "description": "Prints a message to a specific client in the chat area.",
      "funcName": "PrintToChat",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the chat area."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCenterText",
      "group": "Console",
      "description": "Prints a message to a specific client in the center of the screen.",
      "funcName": "PrintCenterText",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the center of the screen."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintAlertText",
      "group": "Console",
      "description": "Prints a message to a specific client with an alert box.",
      "funcName": "PrintAlertText",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the alert box."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCentreHtml",
      "group": "Console",
      "description": "Prints a html message to a specific client in the center of the screen.",
      "funcName": "PrintCentreHtml",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The HTML-formatted message to be printed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToConsoleAll",
      "group": "Console",
      "description": "Sends a message to every client's console.",
      "funcName": "PrintToConsoleAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be sent to all clients' consoles."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChatAll",
      "group": "Console",
      "description": "Prints a message to all clients in the chat area.",
      "funcName": "PrintToChatAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the chat area for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCenterTextAll",
      "group": "Console",
      "description": "Prints a message to all clients in the center of the screen.",
      "funcName": "PrintCenterTextAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the center of the screen for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintAlertTextToAll",
      "group": "Console",
      "description": "Prints a message to all clients with an alert box.",
      "funcName": "PrintAlertTextToAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in an alert box for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintCentreHtmlAll",
      "group": "Console",
      "description": "Prints a html message to all clients in the center of the screen.",
      "funcName": "PrintCentreHtmlAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The HTML-formatted message to be printed in the center of the screen for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChatColored",
      "group": "Console",
      "description": "Prints a colored message to a specific client in the chat area.",
      "funcName": "PrintToChatColored",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "Index of the client to whom the message will be sent."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to be printed in the chat area with color."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "PrintToChatColoredAll",
      "group": "Console",
      "description": "Prints a colored message to all clients in the chat area.",
      "funcName": "PrintToChatColoredAll",
      "paramTypes": [
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The colored message to be printed in the chat area for all clients."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "CreateConVar",
      "group": "Cvars",
      "description": "Creates a new console variable.",
      "funcName": "CreateConVar",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "string",
          "ref": false,
          "description": "The default value of the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A description of the console variable's purpose."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Additional flags for the console variable."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable."
      }
    },
    {
      "name": "CreateConVarBool",
      "group": "Cvars",
      "description": "Creates a new boolean console variable.",
      "funcName": "CreateConVarBool",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "bool",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "bool",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "bool",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarInt16",
      "group": "Cvars",
      "description": "Creates a new 16-bit signed integer console variable.",
      "funcName": "CreateConVarInt16",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int16",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int16",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int16",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarUInt16",
      "group": "Cvars",
      "description": "Creates a new 16-bit unsigned integer console variable.",
      "funcName": "CreateConVarUInt16",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "uint16",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "uint16",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "uint16",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarInt32",
      "group": "Cvars",
      "description": "Creates a new 32-bit signed integer console variable.",
      "funcName": "CreateConVarInt32",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int32",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int32",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int32",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarUInt32",
      "group": "Cvars",
      "description": "Creates a new 32-bit unsigned integer console variable.",
      "funcName": "CreateConVarUInt32",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "uint32",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "uint32",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "uint32",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarInt64",
      "group": "Cvars",
      "description": "Creates a new 64-bit signed integer console variable.",
      "funcName": "CreateConVarInt64",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int64",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int64",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int64",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarUInt64",
      "group": "Cvars",
      "description": "Creates a new 64-bit unsigned integer console variable.",
      "funcName": "CreateConVarUInt64",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "uint64",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "uint64",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "uint64",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarFloat",
      "group": "Cvars",
      "description": "Creates a new floating-point console variable.",
      "funcName": "CreateConVarFloat",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "float",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "float",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "float",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarDouble",
      "group": "Cvars",
      "description": "Creates a new double-precision console variable.",
      "funcName": "CreateConVarDouble",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "double",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "double",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "double",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarColor",
      "group": "Cvars",
      "description": "Creates a new color console variable.",
      "funcName": "CreateConVarColor",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "int32",
          "ref": false,
          "description": "The default color value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "int32",
          "ref": false,
          "description": "The minimum color value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "int32",
          "ref": false,
          "description": "The maximum color value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarVector2",
      "group": "Cvars",
      "description": "Creates a new 2D vector console variable.",
      "funcName": "CreateConVarVector2",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec2",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec2",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec2",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarVector3",
      "group": "Cvars",
      "description": "Creates a new 3D vector console variable.",
      "funcName": "CreateConVarVector3",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec3",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec3",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec3",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarVector4",
      "group": "Cvars",
      "description": "Creates a new 4D vector console variable.",
      "funcName": "CreateConVarVector4",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec4",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec4",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec4",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "CreateConVarQangle",
      "group": "Cvars",
      "description": "Creates a new quaternion angle console variable.",
      "funcName": "CreateConVarQangle",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "defaultValue",
          "type": "vec3",
          "ref": false,
          "description": "The default value for the console variable."
        },
        {
          "name": "description",
          "type": "string",
          "ref": false,
          "description": "A brief description of the console variable."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that define the behavior of the console variable."
        },
        {
          "name": "hasMin",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a minimum value is provided."
        },
        {
          "name": "min",
          "type": "vec3",
          "ref": false,
          "description": "The minimum value if hasMin is true."
        },
        {
          "name": "hasMax",
          "type": "bool",
          "ref": false,
          "description": "Indicates if a maximum value is provided."
        },
        {
          "name": "max",
          "type": "vec3",
          "ref": false,
          "description": "The maximum value if hasMax is true."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created console variable data."
      }
    },
    {
      "name": "FindConVar",
      "group": "Cvars",
      "description": "Searches for a console variable.",
      "funcName": "FindConVar",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to search for."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "Pointer to the console variable data if found; otherwise, nullptr."
      }
    },
    {
      "name": "HookConVarChange",
      "group": "Cvars",
      "description": "Creates a hook for when a console variable's value is changed.",
      "funcName": "HookConVarChange",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to hook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to be executed when the variable's value changes.",
          "prototype": {
            "name": "ChangeCallback",
            "description": "Handles changes to a console variable's value. This function is called whenever the value of a specific console variable is modified.",
            "paramTypes": [
              {
                "name": "pConVar",
                "type": "ptr64",
                "description": "A 64-bit pointer to the console variable that is being changed. This provides access to the variable's metadata and current state."
              },
              {
                "name": "newValue",
                "type": "string",
                "description": "The new value being assigned to the console variable. This string contains the updated value after the change."
              },
              {
                "name": "oldValue",
                "type": "string",
                "description": "The previous value of the console variable before the change. This string contains the value that was overridden."
              }
            ],
            "retType": {
              "type": "void",
              "description": "This function does not return a value. It performs any necessary processing related to the value change directly."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "UnhookConVarChange",
      "group": "Cvars",
      "description": "Removes a hook for when a console variable's value is changed.",
      "funcName": "UnhookConVarChange",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to unhook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to be removed.",
          "prototype": {
            "name": "ChangeCallback",
            "description": "Handles changes to a console variable's value. This function is called whenever the value of a specific console variable is modified.",
            "paramTypes": [
              {
                "name": "pConVar",
                "type": "ptr64",
                "description": "A 64-bit pointer to the console variable that is being changed. This provides access to the variable's metadata and current state."
              },
              {
                "name": "newValue",
                "type": "string",
                "description": "The new value being assigned to the console variable. This string contains the updated value after the change."
              },
              {
                "name": "oldValue",
                "type": "string",
                "description": "The previous value of the console variable before the change. This string contains the value that was overridden."
              }
            ],
            "retType": {
              "type": "void",
              "description": "This function does not return a value. It performs any necessary processing related to the value change directly."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "IsConVarFlagSet",
      "group": "Cvars",
      "description": "Checks if a specific flag is set for a console variable.",
      "funcName": "IsConVarFlagSet",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "flag",
          "type": "int64",
          "ref": false,
          "description": "The flag to check against the console variable."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the flag is set; otherwise, false."
      }
    },
    {
      "name": "AddConVarFlags",
      "group": "Cvars",
      "description": "Adds flags to a console variable.",
      "funcName": "AddConVarFlags",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "The flags to be added."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveConVarFlags",
      "group": "Cvars",
      "description": "Removes flags from a console variable.",
      "funcName": "RemoveConVarFlags",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "flags",
          "type": "int64",
          "ref": false,
          "description": "The flags to be removed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetConVarFlags",
      "group": "Cvars",
      "description": "Retrieves the current flags of a console variable.",
      "funcName": "GetConVarFlags",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "int64",
        "description": "The current flags set on the console variable."
      }
    },
    {
      "name": "GetConVarBounds",
      "group": "Cvars",
      "description": "Gets the specified bound (max or min) of a console variable and stores it in the output string.",
      "funcName": "GetConVarBounds",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "max",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether to get the maximum (true) or minimum (false) bound."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The bound value."
      }
    },
    {
      "name": "SetConVarBounds",
      "group": "Cvars",
      "description": "Sets the specified bound (max or min) for a console variable.",
      "funcName": "SetConVarBounds",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "max",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether to set the maximum (true) or minimum (false) bound."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to set as the bound."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetConVarValue",
      "group": "Cvars",
      "description": "Retrieves the current value of a console variable and stores it in the output string.",
      "funcName": "GetConVarValue",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The output value in string format."
      }
    },
    {
      "name": "GetConVarBool",
      "group": "Cvars",
      "description": "Retrieves the current value of a boolean console variable.",
      "funcName": "GetConVarBool",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "The current boolean value of the console variable."
      }
    },
    {
      "name": "GetConVarInt16",
      "group": "Cvars",
      "description": "Retrieves the current value of a signed 16-bit integer console variable.",
      "funcName": "GetConVarInt16",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "int16",
        "description": "The current int16_t value of the console variable."
      }
    },
    {
      "name": "GetConVarUInt16",
      "group": "Cvars",
      "description": "Retrieves the current value of an unsigned 16-bit integer console variable.",
      "funcName": "GetConVarUInt16",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "uint16",
        "description": "The current uint16_t value of the console variable."
      }
    },
    {
      "name": "GetConVarInt32",
      "group": "Cvars",
      "description": "Retrieves the current value of a signed 32-bit integer console variable.",
      "funcName": "GetConVarInt32",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The current int32_t value of the console variable."
      }
    },
    {
      "name": "GetConVarUInt32",
      "group": "Cvars",
      "description": "Retrieves the current value of an unsigned 32-bit integer console variable.",
      "funcName": "GetConVarUInt32",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "uint32",
        "description": "The current uint32_t value of the console variable."
      }
    },
    {
      "name": "GetConVarInt64",
      "group": "Cvars",
      "description": "Retrieves the current value of a signed 64-bit integer console variable.",
      "funcName": "GetConVarInt64",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "int64",
        "description": "The current int64_t value of the console variable."
      }
    },
    {
      "name": "GetConVarUInt64",
      "group": "Cvars",
      "description": "Retrieves the current value of an unsigned 64-bit integer console variable.",
      "funcName": "GetConVarUInt64",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "The current uint64_t value of the console variable."
      }
    },
    {
      "name": "GetConVarFloat",
      "group": "Cvars",
      "description": "Retrieves the current value of a float console variable.",
      "funcName": "GetConVarFloat",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The current float value of the console variable."
      }
    },
    {
      "name": "GetConVarDouble",
      "group": "Cvars",
      "description": "Retrieves the current value of a double console variable.",
      "funcName": "GetConVarDouble",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "double",
        "description": "The current double value of the console variable."
      }
    },
    {
      "name": "GetConVarString",
      "group": "Cvars",
      "description": "Retrieves the current value of a string console variable.",
      "funcName": "GetConVarString",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The current string value of the console variable."
      }
    },
    {
      "name": "GetConVarColor",
      "group": "Cvars",
      "description": "Retrieves the current value of a Color console variable.",
      "funcName": "GetConVarColor",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The current Color value of the console variable."
      }
    },
    {
      "name": "GetConVarVector2",
      "group": "Cvars",
      "description": "Retrieves the current value of a Vector2D console variable.",
      "funcName": "GetConVarVector2",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "vec2",
        "description": "The current Vector2D value of the console variable."
      }
    },
    {
      "name": "GetConVarVector",
      "group": "Cvars",
      "description": "Retrieves the current value of a Vector console variable.",
      "funcName": "GetConVarVector",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "The current Vector value of the console variable."
      }
    },
    {
      "name": "GetConVarVector4",
      "group": "Cvars",
      "description": "Retrieves the current value of a Vector4D console variable.",
      "funcName": "GetConVarVector4",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "vec4",
        "description": "The current Vector4D value of the console variable."
      }
    },
    {
      "name": "GetConVarQangle",
      "group": "Cvars",
      "description": "Retrieves the current value of a QAngle console variable.",
      "funcName": "GetConVarQangle",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "The current QAngle value of the console variable."
      }
    },
    {
      "name": "SetConVarValue",
      "group": "Cvars",
      "description": "Sets the value of a console variable.",
      "funcName": "SetConVarValue",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarBool",
      "group": "Cvars",
      "description": "Sets the value of a boolean console variable.",
      "funcName": "SetConVarBool",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "bool",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarInt16",
      "group": "Cvars",
      "description": "Sets the value of a signed 16-bit integer console variable.",
      "funcName": "SetConVarInt16",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "int16",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarUInt16",
      "group": "Cvars",
      "description": "Sets the value of an unsigned 16-bit integer console variable.",
      "funcName": "SetConVarUInt16",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "uint16",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarInt32",
      "group": "Cvars",
      "description": "Sets the value of a signed 32-bit integer console variable.",
      "funcName": "SetConVarInt32",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarUInt32",
      "group": "Cvars",
      "description": "Sets the value of an unsigned 32-bit integer console variable.",
      "funcName": "SetConVarUInt32",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "uint32",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarInt64",
      "group": "Cvars",
      "description": "Sets the value of a signed 64-bit integer console variable.",
      "funcName": "SetConVarInt64",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "int64",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarUInt64",
      "group": "Cvars",
      "description": "Sets the value of an unsigned 64-bit integer console variable.",
      "funcName": "SetConVarUInt64",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "uint64",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarFloat",
      "group": "Cvars",
      "description": "Sets the value of a floating-point console variable.",
      "funcName": "SetConVarFloat",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "float",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarDouble",
      "group": "Cvars",
      "description": "Sets the value of a double-precision floating-point console variable.",
      "funcName": "SetConVarDouble",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "double",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarString",
      "group": "Cvars",
      "description": "Sets the value of a string console variable.",
      "funcName": "SetConVarString",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarColor",
      "group": "Cvars",
      "description": "Sets the value of a color console variable.",
      "funcName": "SetConVarColor",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarVector2",
      "group": "Cvars",
      "description": "Sets the value of a 2D vector console variable.",
      "funcName": "SetConVarVector2",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "vec2",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarVector3",
      "group": "Cvars",
      "description": "Sets the value of a 3D vector console variable.",
      "funcName": "SetConVarVector3",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "vec3",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarVector4",
      "group": "Cvars",
      "description": "Sets the value of a 4D vector console variable.",
      "funcName": "SetConVarVector4",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "vec4",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetConVarQangle",
      "group": "Cvars",
      "description": "Sets the value of a quaternion angle console variable.",
      "funcName": "SetConVarQangle",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "value",
          "type": "vec3",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SendConVarValue",
      "group": "Cvars",
      "description": "Replicates a console variable value to a specific client. This does not change the actual console variable value.",
      "funcName": "SendConVarValue",
      "paramTypes": [
        {
          "name": "conVar",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the console variable data."
        },
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client to replicate the value to."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to send to the client."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetClientConVarValue",
      "group": "Cvars",
      "description": "Retrieves the value of a client's console variable and stores it in the output string.",
      "funcName": "GetClientConVarValue",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client whose console variable value is being retrieved."
        },
        {
          "name": "convarName",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable to retrieve."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The output string to store the client's console variable value."
      }
    },
    {
      "name": "SetFakeClientConVarValue",
      "group": "Cvars",
      "description": "Replicates a console variable value to a specific fake client. This does not change the actual console variable value.",
      "funcName": "SetFakeClientConVarValue",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the fake client to replicate the value to."
        },
        {
          "name": "convarName",
          "type": "string",
          "ref": false,
          "description": "The name of the console variable."
        },
        {
          "name": "convarValue",
          "type": "string",
          "ref": false,
          "description": "The value to set for the console variable."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetGameDirectory",
      "group": "Engine",
      "description": "Returns the path of the game's directory.",
      "funcName": "GetGameDirectory",
      "paramTypes": [
        {
          "name": "result",
          "type": "string",
          "ref": true,
          "description": "A reference to a string where the game directory path will be stored."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetCurrentMap",
      "group": "Engine",
      "description": "Returns the current map name.",
      "funcName": "GetCurrentMap",
      "paramTypes": [
        {
          "name": "result",
          "type": "string",
          "ref": true,
          "description": "A reference to a string where the current map name will be stored."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "IsMapValid",
      "group": "Engine",
      "description": "Returns whether a specified map is valid or not.",
      "funcName": "IsMapValid",
      "paramTypes": [
        {
          "name": "mapname",
          "type": "string",
          "ref": false,
          "description": "The name of the map to check for validity."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the map is valid, false otherwise."
      }
    },
    {
      "name": "GetGameTime",
      "group": "Engine",
      "description": "Returns the game time based on the game tick.",
      "funcName": "GetGameTime",
      "paramTypes": [],
      "retType": {
        "type": "float",
        "description": "The current game time."
      }
    },
    {
      "name": "GetGameTickCount",
      "group": "Engine",
      "description": "Returns the game's internal tick count.",
      "funcName": "GetGameTickCount",
      "paramTypes": [],
      "retType": {
        "type": "int32",
        "description": "The current tick count of the game."
      }
    },
    {
      "name": "GetGameFrameTime",
      "group": "Engine",
      "description": "Returns the time the game took processing the last frame.",
      "funcName": "GetGameFrameTime",
      "paramTypes": [],
      "retType": {
        "type": "float",
        "description": "The frame time of the last processed frame."
      }
    },
    {
      "name": "GetEngineTime",
      "group": "Engine",
      "description": "Returns a high-precision time value for profiling the engine.",
      "funcName": "GetEngineTime",
      "paramTypes": [],
      "retType": {
        "type": "double",
        "description": "A high-precision time value."
      }
    },
    {
      "name": "GetMaxClients",
      "group": "Engine",
      "description": "Returns the maximum number of clients that can connect to the server.",
      "funcName": "GetMaxClients",
      "paramTypes": [],
      "retType": {
        "type": "int32",
        "description": "The maximum client count, or -1 if global variables are not initialized."
      }
    },
    {
      "name": "PrecacheGeneric",
      "group": "Engine",
      "description": "Precaches a given generic file.",
      "funcName": "PrecacheGeneric",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the model to be precached."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer identifier for the generic file."
      }
    },
    {
      "name": "IsGenericPrecache",
      "group": "Engine",
      "description": "Checks if a specified generic file is precached.",
      "funcName": "IsGenericPrecache",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the generic file to check."
        }
      ],
      "retType": {
        "type": "bool"
      }
    },
    {
      "name": "PrecacheModel",
      "group": "Engine",
      "description": "Precaches a specified model.",
      "funcName": "PrecacheModel",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the model to be precached."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer identifier for the model."
      }
    },
    {
      "name": "IsModelPrecache",
      "group": "Engine",
      "description": "Checks if a specified model is precached.",
      "funcName": "IsModelPrecache",
      "paramTypes": [
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The name of the model to check."
        }
      ],
      "retType": {
        "type": "bool"
      }
    },
    {
      "name": "PrecacheSound",
      "group": "Engine",
      "description": "Precaches a specified sound.",
      "funcName": "PrecacheSound",
      "paramTypes": [
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to be precached."
        },
        {
          "name": "preload",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating if the sound should be preloaded."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the sound is successfully precached, false otherwise."
      }
    },
    {
      "name": "IsSoundPrecached",
      "group": "Engine",
      "description": "Checks if a specified sound is precached.",
      "funcName": "IsSoundPrecached",
      "paramTypes": [
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the sound is precached, false otherwise."
      }
    },
    {
      "name": "PrecacheDecal",
      "group": "Engine",
      "description": "Precaches a specified decal.",
      "funcName": "PrecacheDecal",
      "paramTypes": [
        {
          "name": "decal",
          "type": "string",
          "ref": false,
          "description": "The name of the decal to be precached."
        },
        {
          "name": "preload",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating if the decal should be preloaded."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer identifier for the decal."
      }
    },
    {
      "name": "IsDecalPrecached",
      "group": "Engine",
      "description": "Checks if a specified decal is precached.",
      "funcName": "IsDecalPrecached",
      "paramTypes": [
        {
          "name": "decal",
          "type": "string",
          "ref": false,
          "description": "The name of the decal to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the decal is precached, false otherwise."
      }
    },
    {
      "name": "GetEconItemSystem",
      "group": "Engine",
      "description": "Returns a pointer to the Economy Item System.",
      "funcName": "GetEconItemSystem",
      "paramTypes": [],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the Econ Item System."
      }
    },
    {
      "name": "IsServerPaused",
      "group": "Engine",
      "description": "Checks if the server is currently paused.",
      "funcName": "IsServerPaused",
      "paramTypes": [],
      "retType": {
        "type": "bool",
        "description": "True if the server is paused, false otherwise."
      }
    },
    {
      "name": "QueueTaskForNextFrame",
      "group": "Engine",
      "description": "Queues a task to be executed on the next frame.",
      "funcName": "QueueTaskForNextFrame",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function to be executed on the next frame.",
          "prototype": {
            "name": "TaskCallback",
            "description": "Defines a QueueTask Callback.",
            "paramTypes": [],
            "retType": {
              "type": "void"
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "QueueTaskForNextWorldUpdate",
      "group": "Engine",
      "description": "Queues a task to be executed on the next world update.",
      "funcName": "QueueTaskForNextWorldUpdate",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "A callback function to be executed on the next world update.",
          "prototype": {
            "name": "TaskCallback",
            "description": "Defines a QueueTask Callback.",
            "paramTypes": [],
            "retType": {
              "type": "void"
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetSoundDuration",
      "group": "Engine",
      "description": "Returns the duration of a specified sound.",
      "funcName": "GetSoundDuration",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to check."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The duration of the sound in seconds."
      }
    },
    {
      "name": "EmitSound",
      "group": "Engine",
      "description": "Emits a sound from a specified entity.",
      "funcName": "EmitSound",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity that will emit the sound."
        },
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to emit."
        },
        {
          "name": "pitch",
          "type": "int32",
          "ref": false,
          "description": "The pitch of the sound."
        },
        {
          "name": "volume",
          "type": "float",
          "ref": false,
          "description": "The volume of the sound."
        },
        {
          "name": "delay",
          "type": "float",
          "ref": false,
          "description": "The delay before the sound is played."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "EmitSoundToClient",
      "group": "Engine",
      "description": "Emits a sound to a specific client.",
      "funcName": "EmitSoundToClient",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client to whom the sound will be emitted."
        },
        {
          "name": "channel",
          "type": "int32",
          "ref": false,
          "description": "The channel through which the sound will be played."
        },
        {
          "name": "sound",
          "type": "string",
          "ref": false,
          "description": "The name of the sound to emit."
        },
        {
          "name": "volume",
          "type": "float",
          "ref": false,
          "description": "The volume of the sound."
        },
        {
          "name": "soundLevel",
          "type": "int32",
          "ref": false,
          "description": "The level of the sound."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Additional flags for sound playback."
        },
        {
          "name": "pitch",
          "type": "int32",
          "ref": false,
          "description": "The pitch of the sound."
        },
        {
          "name": "origin",
          "type": "vec3",
          "ref": false,
          "description": "The origin of the sound in 3D space."
        },
        {
          "name": "soundTime",
          "type": "float",
          "ref": false,
          "description": "The time at which the sound should be played."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "EntIndexToEntPointer",
      "group": "Entities",
      "description": "Converts an entity index into an entity pointer.",
      "funcName": "EntIndexToEntPointer",
      "paramTypes": [
        {
          "name": "entityIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the entity to convert."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity instance, or nullptr if the entity does not exist."
      }
    },
    {
      "name": "EntPointerToEntIndex",
      "group": "Entities",
      "description": "Retrieves the entity index from an entity pointer.",
      "funcName": "EntPointerToEntIndex",
      "paramTypes": [
        {
          "name": "entity",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the entity whose index is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The index of the entity, or -1 if the entity is nullptr."
      }
    },
    {
      "name": "EntPointerToEntHandle",
      "group": "Entities",
      "description": "Converts an entity pointer into an entity handle.",
      "funcName": "EntPointerToEntHandle",
      "paramTypes": [
        {
          "name": "entity",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the entity to convert."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle as an integer, or INVALID_EHANDLE_INDEX if the entity is nullptr."
      }
    },
    {
      "name": "EntHandleToEntPointer",
      "group": "Entities",
      "description": "Retrieves the entity pointer from an entity handle.",
      "funcName": "EntHandleToEntPointer",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The entity handle to convert."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity instance, or nullptr if the handle is invalid."
      }
    },
    {
      "name": "EntIndexToEntHandle",
      "group": "Entities",
      "description": "Converts an entity index into an entity handle.",
      "funcName": "EntIndexToEntHandle",
      "paramTypes": [
        {
          "name": "entityIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the entity to convert."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle as an integer, or INVALID_EHANDLE_INDEX if the entity index is invalid."
      }
    },
    {
      "name": "EntHandleToEntIndex",
      "group": "Entities",
      "description": "Retrieves the entity index from an entity handle.",
      "funcName": "EntHandleToEntIndex",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The entity handle from which to retrieve the index."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The index of the entity, or -1 if the handle is invalid."
      }
    },
    {
      "name": "IsValidEntHandle",
      "group": "Entities",
      "description": "Checks if the provided entity handle is valid.",
      "funcName": "IsValidEntHandle",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The entity handle to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the entity handle is valid, false otherwise."
      }
    },
    {
      "name": "GetFirstActiveEntity",
      "group": "Entities",
      "description": "Retrieves the pointer to the first active entity.",
      "funcName": "GetFirstActiveEntity",
      "paramTypes": [],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the first active entity."
      }
    },
    {
      "name": "GetConcreteEntityListPointer",
      "group": "Entities",
      "description": "Retrieves a pointer to the concrete entity list.",
      "funcName": "GetConcreteEntityListPointer",
      "paramTypes": [],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity list structure."
      }
    },
    {
      "name": "HookEntityOutput",
      "group": "Entities",
      "description": "Adds an entity output hook on a specified entity class name.",
      "funcName": "HookEntityOutput",
      "paramTypes": [
        {
          "name": "szClassname",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity to hook the output for."
        },
        {
          "name": "szOutput",
          "type": "string",
          "ref": false,
          "description": "The output event name to hook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function to invoke when the output is fired.",
          "prototype": {
            "name": "HookEntityOutputCallback",
            "description": "This function is a callback handler for entity output events. It is triggered when a specific output event is activated, and it handles the process by passing the activator, the caller, and a delay parameter for the output.",
            "paramTypes": [
              {
                "name": "activator",
                "type": "int32",
                "description": "The activator is an identifier for the entity or object that triggers the event. It is typically a reference to the entity that caused the output to occur."
              },
              {
                "name": "caller",
                "type": "int32",
                "description": "The caller represents the entity or object that calls the output function. It can be used to identify which entity initiated the action that caused the event."
              },
              {
                "name": "flDelay",
                "type": "float",
                "description": "This parameter specifies the delay in seconds before the output action is executed. It allows the output to be triggered after a certain period of time, providing flexibility in handling time-based behaviors."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the callback execution. The possible values are:\n\n- `Continue`: The event continues without interruption.\n- `Changed`: The event has been altered or modified.\n- `Handled`: The event has been handled successfully.\n- `Stop`: The event processing is stopped."
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether the hook should be a post-hook (true) or pre-hook (false)."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "UnhookEntityOutput",
      "group": "Entities",
      "description": "Removes an entity output hook.",
      "funcName": "UnhookEntityOutput",
      "paramTypes": [
        {
          "name": "szClassname",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity from which to unhook the output."
        },
        {
          "name": "szOutput",
          "type": "string",
          "ref": false,
          "description": "The output event name to unhook."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The callback function that was previously hooked.",
          "prototype": {
            "name": "HookEntityOutputCallback",
            "description": "This function is a callback handler for entity output events. It is triggered when a specific output event is activated, and it handles the process by passing the activator, the caller, and a delay parameter for the output.",
            "paramTypes": [
              {
                "name": "activator",
                "type": "int32",
                "description": "The activator is an identifier for the entity or object that triggers the event. It is typically a reference to the entity that caused the output to occur."
              },
              {
                "name": "caller",
                "type": "int32",
                "description": "The caller represents the entity or object that calls the output function. It can be used to identify which entity initiated the action that caused the event."
              },
              {
                "name": "flDelay",
                "type": "float",
                "description": "This parameter specifies the delay in seconds before the output action is executed. It allows the output to be triggered after a certain period of time, providing flexibility in handling time-based behaviors."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the callback execution. The possible values are:\n\n- `Continue`: The event continues without interruption.\n- `Changed`: The event has been altered or modified.\n- `Handled`: The event has been handled successfully.\n- `Stop`: The event processing is stopped."
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "Indicates whether the hook was a post-hook (true) or pre-hook (false)."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "FindEntityByClassname",
      "group": "Entities",
      "description": "Searches for an entity by classname.",
      "funcName": "FindEntityByClassname",
      "paramTypes": [
        {
          "name": "startEntity",
          "type": "int32",
          "ref": false,
          "description": "The entity handle from which to start the search."
        },
        {
          "name": "classname",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity to search for."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle of the found entity, or INVALID_EHANDLE_INDEX if no entity is found."
      }
    },
    {
      "name": "FindEntityByName",
      "group": "Entities",
      "description": "Searches for an entity by name.",
      "funcName": "FindEntityByName",
      "paramTypes": [
        {
          "name": "startEntity",
          "type": "int32",
          "ref": false,
          "description": "The entity handle from which to start the search."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the entity to search for."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle of the found entity, or INVALID_EHANDLE_INDEX if no entity is found."
      }
    },
    {
      "name": "CreateEntityByName",
      "group": "Entities",
      "description": "Creates an entity by string name but does not spawn it.",
      "funcName": "CreateEntityByName",
      "paramTypes": [
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The class name of the entity to create."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle of the created entity, or INVALID_EHANDLE_INDEX if the entity could not be created."
      }
    },
    {
      "name": "DispatchSpawn",
      "group": "Entities",
      "description": "Spawns an entity into the game.",
      "funcName": "DispatchSpawn",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity to spawn."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "RemoveEntity",
      "group": "Entities",
      "description": "Marks an entity for deletion.",
      "funcName": "RemoveEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity to be deleted."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityClassname",
      "group": "Entities",
      "description": "Retrieves the class name of an entity.",
      "funcName": "GetEntityClassname",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose class name is to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the class name will be stored."
      }
    },
    {
      "name": "GetEntityName",
      "group": "Entities",
      "description": "Retrieves the name of an entity.",
      "funcName": "GetEntityName",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose name is to be retrieved."
        }
      ],
      "retType": {
        "type": "string"
      }
    },
    {
      "name": "SetEntityName",
      "group": "Entities",
      "description": "Sets the name of an entity.",
      "funcName": "SetEntityName",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose name is to be set."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The new name to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityMoveType",
      "group": "Entities",
      "description": "Retrieves the movement type of an entity.",
      "funcName": "GetEntityMoveType",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose movement type is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The movement type of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityMoveType",
      "group": "Entities",
      "description": "Sets the movement type of an entity.",
      "funcName": "SetEntityMoveType",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose movement type is to be set."
        },
        {
          "name": "moveType",
          "type": "int32",
          "ref": false,
          "description": "The new movement type to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityGravity",
      "group": "Entities",
      "description": "Retrieves the gravity scale of an entity.",
      "funcName": "GetEntityGravity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose gravity scale is to be retrieved."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The gravity scale of the entity, or 0.0f if the entity is invalid."
      }
    },
    {
      "name": "SetEntityGravity",
      "group": "Entities",
      "description": "Sets the gravity scale of an entity.",
      "funcName": "SetEntityGravity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose gravity scale is to be set."
        },
        {
          "name": "gravity",
          "type": "float",
          "ref": false,
          "description": "The new gravity scale to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityFlags",
      "group": "Entities",
      "description": "Retrieves the flags of an entity.",
      "funcName": "GetEntityFlags",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose flags are to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The flags of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityFlags",
      "group": "Entities",
      "description": "Sets the flags of an entity.",
      "funcName": "SetEntityFlags",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose flags are to be set."
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "The new flags to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityRenderColor",
      "group": "Entities",
      "description": "Retrieves the render color of an entity.",
      "funcName": "GetEntityRenderColor",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render color is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The raw color value of the entity's render color, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityRenderColor",
      "group": "Entities",
      "description": "Sets the render color of an entity.",
      "funcName": "SetEntityRenderColor",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render color is to be set."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The new raw color value to set for the entity's render color."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityRenderMode",
      "group": "Entities",
      "description": "Retrieves the render mode of an entity.",
      "funcName": "GetEntityRenderMode",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render mode is to be retrieved."
        }
      ],
      "retType": {
        "type": "int8",
        "description": "The render mode of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityRenderMode",
      "group": "Entities",
      "description": "Sets the render mode of an entity.",
      "funcName": "SetEntityRenderMode",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose render mode is to be set."
        },
        {
          "name": "renderMode",
          "type": "int8",
          "ref": false,
          "description": "The new render mode to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityHealth",
      "group": "Entities",
      "description": "Retrieves the health of an entity.",
      "funcName": "GetEntityHealth",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose health is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The health of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetEntityHealth",
      "group": "Entities",
      "description": "Sets the health of an entity.",
      "funcName": "SetEntityHealth",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose health is to be set."
        },
        {
          "name": "health",
          "type": "int32",
          "ref": false,
          "description": "The new health value to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetTeamEntity",
      "group": "Entities",
      "description": "Retrieves the team number of an entity.",
      "funcName": "GetTeamEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose team number is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The team number of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "SetTeamEntity",
      "group": "Entities",
      "description": "Sets the team number of an entity.",
      "funcName": "SetTeamEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose team number is to be set."
        },
        {
          "name": "team",
          "type": "int32",
          "ref": false,
          "description": "The new team number to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityOwner",
      "group": "Entities",
      "description": "Retrieves the owner of an entity.",
      "funcName": "GetEntityOwner",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose owner is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The handle of the owner entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
      }
    },
    {
      "name": "SetEntityOwner",
      "group": "Entities",
      "description": "Sets the owner of an entity.",
      "funcName": "SetEntityOwner",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose owner is to be set."
        },
        {
          "name": "ownerHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the new owner entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityParent",
      "group": "Entities",
      "description": "Retrieves the parent of an entity.",
      "funcName": "GetEntityParent",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose parent is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The handle of the parent entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
      }
    },
    {
      "name": "SetEntityParent",
      "group": "Entities",
      "description": "Sets the parent of an entity.",
      "funcName": "SetEntityParent",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose parent is to be set."
        },
        {
          "name": "parentHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the new parent entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityAbsOrigin",
      "group": "Entities",
      "description": "Retrieves the absolute origin of an entity.",
      "funcName": "GetEntityAbsOrigin",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute origin is to be retrieved."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A vector where the absolute origin will be stored."
      }
    },
    {
      "name": "SetEntityAbsOrigin",
      "group": "Entities",
      "description": "Sets the absolute origin of an entity.",
      "funcName": "SetEntityAbsOrigin",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute origin is to be set."
        },
        {
          "name": "origin",
          "type": "vec3",
          "ref": false,
          "description": "The new absolute origin to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityAngRotation",
      "group": "Entities",
      "description": "Retrieves the angular rotation of an entity.",
      "funcName": "GetEntityAngRotation",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose angular rotation is to be retrieved."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A QAngle where the angular rotation will be stored."
      }
    },
    {
      "name": "SetEntityAngRotation",
      "group": "Entities",
      "description": "Sets the angular rotation of an entity.",
      "funcName": "SetEntityAngRotation",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose angular rotation is to be set."
        },
        {
          "name": "angle",
          "type": "vec3",
          "ref": false,
          "description": "The new angular rotation to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityAbsVelocity",
      "group": "Entities",
      "description": "Retrieves the absolute velocity of an entity.",
      "funcName": "GetEntityAbsVelocity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute velocity is to be retrieved."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "A vector where the absolute velocity will be stored."
      }
    },
    {
      "name": "SetEntityAbsVelocity",
      "group": "Entities",
      "description": "Sets the absolute velocity of an entity.",
      "funcName": "SetEntityAbsVelocity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose absolute velocity is to be set."
        },
        {
          "name": "velocity",
          "type": "vec3",
          "ref": false,
          "description": "The new absolute velocity to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityModel",
      "group": "Entities",
      "description": "Retrieves the model name of an entity.",
      "funcName": "GetEntityModel",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose model name is to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the model name will be stored."
      }
    },
    {
      "name": "SetEntityModel",
      "group": "Entities",
      "description": "Sets the model name of an entity.",
      "funcName": "SetEntityModel",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose model name is to be set."
        },
        {
          "name": "model",
          "type": "string",
          "ref": false,
          "description": "The new model name to set for the entity."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEntityWaterLevel",
      "group": "Entities",
      "description": "Retrieves the water level of an entity.",
      "funcName": "GetEntityWaterLevel",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose water level is to be retrieved."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The water level of the entity, or 0.0f if the entity is invalid."
      }
    },
    {
      "name": "GetEntityGroundEntity",
      "group": "Entities",
      "description": "Retrieves the ground entity of an entity.",
      "funcName": "GetEntityGroundEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose ground entity is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The handle of the ground entity, or INVALID_EHANDLE_INDEX if the entity is invalid."
      }
    },
    {
      "name": "GetEntityEffects",
      "group": "Entities",
      "description": "Retrieves the effects of an entity.",
      "funcName": "GetEntityEffects",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity whose effects are to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The effect flags of the entity, or 0 if the entity is invalid."
      }
    },
    {
      "name": "TeleportEntity",
      "group": "Entities",
      "description": "Teleports an entity to a specified location and orientation.",
      "funcName": "TeleportEntity",
      "paramTypes": [
        {
          "name": "entityHandle",
          "type": "int32",
          "ref": false,
          "description": "The handle of the entity to teleport."
        },
        {
          "name": "origin",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to a Vector representing the new absolute position. Can be nullptr."
        },
        {
          "name": "angles",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to a QAngle representing the new orientation. Can be nullptr."
        },
        {
          "name": "velocity",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to a Vector representing the new velocity. Can be nullptr."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "HookEvent",
      "group": "Events",
      "description": "Creates a hook for when a game event is fired.",
      "funcName": "HookEvent",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the event to hook."
        },
        {
          "name": "pCallback",
          "type": "function",
          "ref": false,
          "description": "The callback function to call when the event is fired.",
          "prototype": {
            "name": "EventCallback",
            "description": "Handles events triggered by the game event system. This function processes the event data, determines the necessary action, and optionally prevents event broadcasting.",
            "paramTypes": [
              {
                "name": "name",
                "type": "string",
                "description": "The name of the event being handled. This string is used to identify the type or category of the event."
              },
              {
                "name": "event",
                "type": "ptr64",
                "description": "A 64-bit pointer to the event data structure. This pointer contains detailed information about the event being processed."
              },
              {
                "name": "dontBroadcast",
                "type": "bool",
                "description": "A boolean flag indicating whether the event should be prevented from being broadcasted to other listeners. Set to `true` to suppress broadcasting."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the event callback execution. The possible values are:\n\n- `Continue = 0`: The event continues without interruption.\n- `Changed = 1`: Indicates that the event has been modified or altered in some way during processing.\n- `Handled = 3`: The event has been successfully handled, and no further action is needed.\n- `Stop = 4`: The event processing is halted, and no further actions will be taken."
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the hook should be for a post event."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the hook operation."
      }
    },
    {
      "name": "UnhookEvent",
      "group": "Events",
      "description": "Removes a hook for when a game event is fired.",
      "funcName": "UnhookEvent",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the event to unhook."
        },
        {
          "name": "pCallback",
          "type": "function",
          "ref": false,
          "description": "The callback function to remove.",
          "prototype": {
            "name": "EventCallback",
            "description": "Handles events triggered by the game event system. This function processes the event data, determines the necessary action, and optionally prevents event broadcasting.",
            "paramTypes": [
              {
                "name": "name",
                "type": "string",
                "description": "The name of the event being handled. This string is used to identify the type or category of the event."
              },
              {
                "name": "event",
                "type": "ptr64",
                "description": "A 64-bit pointer to the event data structure. This pointer contains detailed information about the event being processed."
              },
              {
                "name": "dontBroadcast",
                "type": "bool",
                "description": "A boolean flag indicating whether the event should be prevented from being broadcasted to other listeners. Set to `true` to suppress broadcasting."
              }
            ],
            "retType": {
              "type": "int32",
              "description": "The return type is an enum class `ResultType`, which indicates the result of the event callback execution. The possible values are:\n\n- `Continue = 0`: The event continues without interruption.\n- `Changed = 1`: Indicates that the event has been modified or altered in some way during processing.\n- `Handled = 3`: The event has been successfully handled, and no further action is needed.\n- `Stop = 4`: The event processing is halted, and no further actions will be taken."
            }
          }
        },
        {
          "name": "post",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether the hook is for a post event."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the unhook operation."
      }
    },
    {
      "name": "CreateEvent",
      "group": "Events",
      "description": "Creates a game event to be fired later.",
      "funcName": "CreateEvent",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the event to create."
        },
        {
          "name": "force",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to force the creation of the event."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the created EventInfo structure."
      }
    },
    {
      "name": "FireEvent",
      "group": "Events",
      "description": "Fires a game event.",
      "funcName": "FireEvent",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "bDontBroadcast",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to broadcast the event."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "FireEventToClient",
      "group": "Events",
      "description": "Fires a game event to a specific client.",
      "funcName": "FireEventToClient",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client to fire the event to."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "CancelCreatedEvent",
      "group": "Events",
      "description": "Cancels a previously created game event that has not been fired.",
      "funcName": "CancelCreatedEvent",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure of the event to cancel."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetEventBool",
      "group": "Events",
      "description": "Retrieves the boolean value of a game event's key.",
      "funcName": "GetEventBool",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the boolean value."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "The boolean value associated with the key."
      }
    },
    {
      "name": "GetEventFloat",
      "group": "Events",
      "description": "Retrieves the float value of a game event's key.",
      "funcName": "GetEventFloat",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the float value."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The float value associated with the key."
      }
    },
    {
      "name": "GetEventInt",
      "group": "Events",
      "description": "Retrieves the integer value of a game event's key.",
      "funcName": "GetEventInt",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the integer value."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The integer value associated with the key."
      }
    },
    {
      "name": "GetEventUInt64",
      "group": "Events",
      "description": "Retrieves the long integer value of a game event's key.",
      "funcName": "GetEventUInt64",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the long integer value."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "The long integer value associated with the key."
      }
    },
    {
      "name": "GetEventString",
      "group": "Events",
      "description": "Retrieves the string value of a game event's key.",
      "funcName": "GetEventString",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the string value."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the result will be stored."
      }
    },
    {
      "name": "GetEventPtr",
      "group": "Events",
      "description": "Retrieves the pointer value of a game event's key.",
      "funcName": "GetEventPtr",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the pointer value."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "The pointer value associated with the key."
      }
    },
    {
      "name": "GetEventPlayerController",
      "group": "Events",
      "description": "Retrieves the player controller address of a game event's key.",
      "funcName": "GetEventPlayerController",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the player controller address."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the player controller associated with the key."
      }
    },
    {
      "name": "GetEventPlayerIndex",
      "group": "Events",
      "description": "Retrieves the player index of a game event's key.",
      "funcName": "GetEventPlayerIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the player index."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The player index associated with the key."
      }
    },
    {
      "name": "GetEventPlayerPawn",
      "group": "Events",
      "description": "Retrieves the player pawn address of a game event's key.",
      "funcName": "GetEventPlayerPawn",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the player pawn address."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the player pawn associated with the key."
      }
    },
    {
      "name": "GetEventEntity",
      "group": "Events",
      "description": "Retrieves the entity address of a game event's key.",
      "funcName": "GetEventEntity",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the entity address."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the entity associated with the key."
      }
    },
    {
      "name": "GetEventEntityIndex",
      "group": "Events",
      "description": "Retrieves the entity index of a game event's key.",
      "funcName": "GetEventEntityIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the entity index."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity index associated with the key."
      }
    },
    {
      "name": "GetEventEntityHandle",
      "group": "Events",
      "description": "Retrieves the entity handle of a game event's key.",
      "funcName": "GetEventEntityHandle",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to retrieve the entity handle."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The entity handle associated with the key."
      }
    },
    {
      "name": "GetEventName",
      "group": "Events",
      "description": "Retrieves the name of a game event.",
      "funcName": "GetEventName",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the result will be stored."
      }
    },
    {
      "name": "SetEventBool",
      "group": "Events",
      "description": "Sets the boolean value of a game event's key.",
      "funcName": "SetEventBool",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the boolean value."
        },
        {
          "name": "value",
          "type": "bool",
          "ref": false,
          "description": "The boolean value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventFloat",
      "group": "Events",
      "description": "Sets the floating point value of a game event's key.",
      "funcName": "SetEventFloat",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the float value."
        },
        {
          "name": "value",
          "type": "float",
          "ref": false,
          "description": "The float value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventInt",
      "group": "Events",
      "description": "Sets the integer value of a game event's key.",
      "funcName": "SetEventInt",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the integer value."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The integer value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventUInt64",
      "group": "Events",
      "description": "Sets the long integer value of a game event's key.",
      "funcName": "SetEventUInt64",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the long integer value."
        },
        {
          "name": "value",
          "type": "uint64",
          "ref": false,
          "description": "The long integer value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventString",
      "group": "Events",
      "description": "Sets the string value of a game event's key.",
      "funcName": "SetEventString",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the string value."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The string value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventPtr",
      "group": "Events",
      "description": "Sets the pointer value of a game event's key.",
      "funcName": "SetEventPtr",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the pointer value."
        },
        {
          "name": "value",
          "type": "ptr64",
          "ref": false,
          "description": "The pointer value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventPlayerController",
      "group": "Events",
      "description": "Sets the player controller address of a game event's key.",
      "funcName": "SetEventPlayerController",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the player controller address."
        },
        {
          "name": "value",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the player controller to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventPlayerIndex",
      "group": "Events",
      "description": "Sets the player index value of a game event's key.",
      "funcName": "SetEventPlayerIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the player index value."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The player index value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventEntity",
      "group": "Events",
      "description": "Sets the entity address of a game event's key.",
      "funcName": "SetEventEntity",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the entity address."
        },
        {
          "name": "value",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the entity to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventEntityIndex",
      "group": "Events",
      "description": "Sets the entity index of a game event's key.",
      "funcName": "SetEventEntityIndex",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the entity index."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The entity index value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventEntityHandle",
      "group": "Events",
      "description": "Sets the entity handle of a game event's key.",
      "funcName": "SetEventEntityHandle",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "key",
          "type": "string",
          "ref": false,
          "description": "The key for which to set the entity handle."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The entity handle value to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetEventBroadcast",
      "group": "Events",
      "description": "Sets whether an event's broadcasting will be disabled or not.",
      "funcName": "SetEventBroadcast",
      "paramTypes": [
        {
          "name": "pInfo",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the EventInfo structure containing event data."
        },
        {
          "name": "dontBroadcast",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to disable broadcasting."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "LoadEventsFromFile",
      "group": "Events",
      "description": "Load game event descriptions from a file (e.g., \"resource/gameevents.res\").",
      "funcName": "LoadEventsFromFile",
      "paramTypes": [
        {
          "name": "path",
          "type": "string",
          "ref": false,
          "description": "The path to the file containing event descriptions."
        },
        {
          "name": "searchAll",
          "type": "bool",
          "ref": false,
          "description": "A boolean indicating whether to search all paths for the file."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the loading operation."
      }
    },
    {
      "name": "CloseGameConfigFile",
      "group": "Gameconfig",
      "description": "Closes a game configuration file.",
      "funcName": "CloseGameConfigFile",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration to be closed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "LoadGameConfigFile",
      "group": "Gameconfig",
      "description": "Loads a game configuration file.",
      "funcName": "LoadGameConfigFile",
      "paramTypes": [
        {
          "name": "file",
          "type": "string",
          "ref": false,
          "description": "The path to the game configuration file to be loaded."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the loaded CGameConfig object, or nullptr if loading fails."
      }
    },
    {
      "name": "GetGameConfigPath",
      "group": "Gameconfig",
      "description": "Retrieves the path of a game configuration.",
      "funcName": "GetGameConfigPath",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration whose path is to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the path will be stored."
      }
    },
    {
      "name": "GetGameConfigLibrary",
      "group": "Gameconfig",
      "description": "Retrieves a library associated with the game configuration.",
      "funcName": "GetGameConfigLibrary",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the library."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the library to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the library will be stored."
      }
    },
    {
      "name": "GetGameConfigSignature",
      "group": "Gameconfig",
      "description": "Retrieves the signature associated with the game configuration.",
      "funcName": "GetGameConfigSignature",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the signature."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the signature to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the signature will be stored."
      }
    },
    {
      "name": "GetGameConfigSymbol",
      "group": "Gameconfig",
      "description": "Retrieves a symbol associated with the game configuration.",
      "funcName": "GetGameConfigSymbol",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the symbol."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the symbol to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the symbol will be stored."
      }
    },
    {
      "name": "GetGameConfigPatch",
      "group": "Gameconfig",
      "description": "Retrieves a patch associated with the game configuration.",
      "funcName": "GetGameConfigPatch",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the patch."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the patch to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "A string where the patch will be stored."
      }
    },
    {
      "name": "GetGameConfigOffset",
      "group": "Gameconfig",
      "description": "Retrieves the offset associated with a name from the game configuration.",
      "funcName": "GetGameConfigOffset",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the offset."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name whose offset is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The offset associated with the specified name."
      }
    },
    {
      "name": "GetGameConfigAddress",
      "group": "Gameconfig",
      "description": "Retrieves the address associated with a name from the game configuration.",
      "funcName": "GetGameConfigAddress",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the address."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name whose address is to be retrieved."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the address associated with the specified name."
      }
    },
    {
      "name": "GetGameConfigMemSig",
      "group": "Gameconfig",
      "description": "Retrieves the memory signature associated with a name from the game configuration.",
      "funcName": "GetGameConfigMemSig",
      "paramTypes": [
        {
          "name": "pGameConfig",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the game configuration from which to retrieve the memory signature."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name whose memory signature is to be resolved and retrieved."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the memory signature associated with the specified name."
      }
    },
    {
      "name": "RegisterLoggingChannel",
      "group": "Logger",
      "description": "Registers a new logging channel with specified properties.",
      "funcName": "RegisterLoggingChannel",
      "paramTypes": [
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the logging channel."
        },
        {
          "name": "iFlags",
          "type": "int32",
          "ref": false,
          "description": "Flags associated with the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The verbosity level for the logging channel."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The color for messages logged to this channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The ID of the newly created logging channel."
      }
    },
    {
      "name": "AddLoggerTagToChannel",
      "group": "Logger",
      "description": "Adds a tag to a specified logging channel.",
      "funcName": "AddLoggerTagToChannel",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel to which the tag will be added."
        },
        {
          "name": "tagName",
          "type": "string",
          "ref": false,
          "description": "The name of the tag to add to the channel."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "HasLoggerTag",
      "group": "Logger",
      "description": "Checks if a specified tag exists in a logging channel.",
      "funcName": "HasLoggerTag",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "tag",
          "type": "string",
          "ref": false,
          "description": "The name of the tag to check for."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the tag exists in the channel, otherwise false."
      }
    },
    {
      "name": "IsLoggerChannelEnabledBySeverity",
      "group": "Logger",
      "description": "Checks if a logging channel is enabled based on severity.",
      "funcName": "IsLoggerChannelEnabledBySeverity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the channel is enabled for the specified severity, otherwise false."
      }
    },
    {
      "name": "IsLoggerChannelEnabledByVerbosity",
      "group": "Logger",
      "description": "Checks if a logging channel is enabled based on verbosity.",
      "funcName": "IsLoggerChannelEnabledByVerbosity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The verbosity level to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the channel is enabled for the specified verbosity, otherwise false."
      }
    },
    {
      "name": "GetLoggerChannelVerbosity",
      "group": "Logger",
      "description": "Retrieves the verbosity level of a logging channel.",
      "funcName": "GetLoggerChannelVerbosity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The verbosity level of the specified logging channel."
      }
    },
    {
      "name": "SetLoggerChannelVerbosity",
      "group": "Logger",
      "description": "Sets the verbosity level of a logging channel.",
      "funcName": "SetLoggerChannelVerbosity",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The new verbosity level to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetLoggerChannelVerbosityByName",
      "group": "Logger",
      "description": "Sets the verbosity level of a logging channel by name.",
      "funcName": "SetLoggerChannelVerbosityByName",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "name",
          "type": "string",
          "ref": false,
          "description": "The name of the logging channel."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The new verbosity level to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetLoggerChannelVerbosityByTag",
      "group": "Logger",
      "description": "Sets the verbosity level of a logging channel by tag.",
      "funcName": "SetLoggerChannelVerbosityByTag",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "tag",
          "type": "string",
          "ref": false,
          "description": "The name of the tag."
        },
        {
          "name": "verbosity",
          "type": "int32",
          "ref": false,
          "description": "The new verbosity level to set."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetLoggerChannelColor",
      "group": "Logger",
      "description": "Retrieves the color setting of a logging channel.",
      "funcName": "GetLoggerChannelColor",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The color value of the specified logging channel."
      }
    },
    {
      "name": "SetLoggerChannelColor",
      "group": "Logger",
      "description": "Sets the color setting of a logging channel.",
      "funcName": "SetLoggerChannelColor",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The new color value to set for the channel."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetLoggerChannelFlags",
      "group": "Logger",
      "description": "Retrieves the flags of a logging channel.",
      "funcName": "GetLoggerChannelFlags",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The flags of the specified logging channel."
      }
    },
    {
      "name": "SetLoggerChannelFlags",
      "group": "Logger",
      "description": "Sets the flags of a logging channel.",
      "funcName": "SetLoggerChannelFlags",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "eFlags",
          "type": "int32",
          "ref": false,
          "description": "The new flags to set for the channel."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "Log",
      "group": "Logger",
      "description": "Logs a message to a specified channel with a severity level.",
      "funcName": "Log",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
      "name": "LogColored",
      "group": "Logger",
      "description": "Logs a colored message to a specified channel with a severity level.",
      "funcName": "LogColored",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The color for the log message."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
      "name": "LogFull",
      "group": "Logger",
      "description": "Logs a detailed message to a specified channel, including source code info.",
      "funcName": "LogFull",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message."
        },
        {
          "name": "file",
          "type": "string",
          "ref": false,
          "description": "The file name where the log call occurred."
        },
        {
          "name": "line",
          "type": "int32",
          "ref": false,
          "description": "The line number where the log call occurred."
        },
        {
          "name": "function",
          "type": "string",
          "ref": false,
          "description": "The name of the function where the log call occurred."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
      "name": "LogFullColored",
      "group": "Logger",
      "description": "Logs a detailed colored message to a specified channel, including source code info.",
      "funcName": "LogFullColored",
      "paramTypes": [
        {
          "name": "channelID",
          "type": "int32",
          "ref": false,
          "description": "The ID of the logging channel."
        },
        {
          "name": "severity",
          "type": "int32",
          "ref": false,
          "description": "The severity level for the log message."
        },
        {
          "name": "file",
          "type": "string",
          "ref": false,
          "description": "The file name where the log call occurred."
        },
        {
          "name": "line",
          "type": "int32",
          "ref": false,
          "description": "The line number where the log call occurred."
        },
        {
          "name": "function",
          "type": "string",
          "ref": false,
          "description": "The name of the function where the log call occurred."
        },
        {
          "name": "color",
          "type": "int32",
          "ref": false,
          "description": "The color for the log message."
        },
        {
          "name": "message",
          "type": "string",
          "ref": false,
          "description": "The message to log."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "An integer indicating the result of the logging operation."
      }
    },
    {
      "name": "GetSchemaOffset",
      "group": "Schema",
      "description": "Get the offset of a member in a given schema class.",
      "funcName": "GetSchemaOffset",
      "paramTypes": [
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose offset is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The offset of the member in the class."
      }
    },
    {
      "name": "IsSchemaFieldNetworked",
      "group": "Schema",
      "description": "Check if a schema field is networked.",
      "funcName": "IsSchemaFieldNetworked",
      "paramTypes": [
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to check."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "True if the member is networked, false otherwise."
      }
    },
    {
      "name": "GetSchemaClassSize",
      "group": "Schema",
      "description": "Get the size of a schema class.",
      "funcName": "GetSchemaClassSize",
      "paramTypes": [
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The size of the class in bytes, or -1 if the class is not found."
      }
    },
    {
      "name": "GetSchemaBoolByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaBoolByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "bool",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaInt8ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaInt8ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "int8",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaInt16ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaInt16ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "int16",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaInt32ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaInt32ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "int32",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaInt64ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaInt64ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "int64",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaUInt8ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaUInt8ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "uint8",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaUInt16ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaUInt16ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "uint16",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaUInt32ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaUInt32ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "uint32",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaUInt64ByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaUInt64ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "uint64",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaFloatByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaFloatByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "float",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaDoubleByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaDoubleByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "double",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaPointerByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaPointerByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaStringByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaStringByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "string",
        "description": "The value of the member."
      }
    },
    {
      "name": "GetSchemaVectorByName",
      "group": "Schema",
      "description": "Get a value from a schema member by its name.",
      "funcName": "GetSchemaVectorByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance from which the value is to be retrieved."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member whose value is to be retrieved."
        }
      ],
      "retType": {
        "type": "vec3",
        "description": "The value of the member."
      }
    },
    {
      "name": "SetSchemaValueBoolByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueBoolByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "bool",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueInt8ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueInt8ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "int8",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueInt16ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueInt16ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "int16",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueInt32ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueInt32ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "int32",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueInt64ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueInt64ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "int64",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueUInt8ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueUInt8ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "uint8",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueUInt16ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueUInt16ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "uint16",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueUInt32ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueUInt32ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "uint32",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueUInt64ByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueUInt64ByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "uint64",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueFloatByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueFloatByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "float",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueDoubleByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueDoubleByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "double",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueStringByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueStringByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "string",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "SetSchemaValueVectorByName",
      "group": "Schema",
      "description": "Set a value for a schema member by its name.",
      "funcName": "SetSchemaValueVectorByName",
      "paramTypes": [
        {
          "name": "instancePointer",
          "type": "ptr64",
          "ref": false,
          "description": "Pointer to the instance of the class where the value is to be set."
        },
        {
          "name": "className",
          "type": "string",
          "ref": false,
          "description": "The name of the class that contains the member."
        },
        {
          "name": "memberName",
          "type": "string",
          "ref": false,
          "description": "The name of the member to be set."
        },
        {
          "name": "value",
          "type": "vec3",
          "ref": false,
          "description": "The value to assign to the member."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "CreateTimer",
      "group": "Timers",
      "description": "Creates a new timer that executes a callback function at specified intervals.",
      "funcName": "CreateTimer",
      "paramTypes": [
        {
          "name": "interval",
          "type": "float",
          "ref": false,
          "description": "The time interval in seconds between each callback execution."
        },
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "The function to be called when the timer expires.",
          "prototype": {
            "name": "TimerCallback",
            "description": "This function is invoked when a timer event occurs. It handles the timer-related logic and performs necessary actions based on the event.",
            "paramTypes": [
              {
                "name": "timer",
                "type": "ptr64",
                "description": "A 64-bit pointer to the timer object. This object contains the details of the timer, such as its current state, duration, and any associated data."
              }
            ],
            "retType": {
              "type": "void",
              "description": "This function does not return any value. All necessary operations are performed directly during the callback."
            }
          }
        },
        {
          "name": "flags",
          "type": "int32",
          "ref": false,
          "description": "Flags that modify the behavior of the timer (e.g., no-map change, repeating)."
        }
      ],
      "retType": {
        "type": "ptr64",
        "description": "A pointer to the newly created CTimer object, or nullptr if the timer could not be created."
      }
    },
    {
      "name": "KillsTimer",
      "group": "Timers",
      "description": "Stops and removes an existing timer.",
      "funcName": "KillsTimer",
      "paramTypes": [
        {
          "name": "timer",
          "type": "ptr64",
          "ref": false,
          "description": "A pointer to the CTimer object to be stopped and removed."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetTickInterval",
      "group": "Timers",
      "description": "Returns the number of seconds in between game server ticks.",
      "funcName": "GetTickInterval",
      "paramTypes": [],
      "retType": {
        "type": "float",
        "description": "The tick interval value."
      }
    },
    {
      "name": "GetTickedTime",
      "group": "Timers",
      "description": "Returns the simulated game time.",
      "funcName": "GetTickedTime",
      "paramTypes": [],
      "retType": {
        "type": "double",
        "description": "The ticked time value."
      }
    },
    {
      "name": "SetClientListening",
      "group": "Voice",
      "description": "Sets the listening state of a client with respect to another client.",
      "funcName": "SetClientListening",
      "paramTypes": [
        {
          "name": "receiverIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client who will receive the audio."
        },
        {
          "name": "senderIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client who will be sending audio."
        },
        {
          "name": "listen",
          "type": "int8",
          "ref": false,
          "description": "The listening state override for the receiver with respect to the sender."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetClientListening",
      "group": "Voice",
      "description": "Retrieves the listening state of a client with respect to another client.",
      "funcName": "GetClientListening",
      "paramTypes": [
        {
          "name": "receiverIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client who receives the audio."
        },
        {
          "name": "senderIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client who sends the audio."
        }
      ],
      "retType": {
        "type": "int8",
        "description": "The listening state override for the receiver with respect to the sender."
      }
    },
    {
      "name": "SetClientVoiceFlags",
      "group": "Voice",
      "description": "Sets the voice flags for a specified client.",
      "funcName": "SetClientVoiceFlags",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client for whom the voice flags are being set."
        },
        {
          "name": "flags",
          "type": "uint8",
          "ref": false,
          "description": "The voice flags to be set for the client."
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "GetClientVoiceFlags",
      "group": "Voice",
      "description": "Retrieves the voice flags for a specified client.",
      "funcName": "GetClientVoiceFlags",
      "paramTypes": [
        {
          "name": "clientIndex",
          "type": "int32",
          "ref": false,
          "description": "The index of the client for whom the voice flags are being retrieved."
        }
      ],
      "retType": {
        "type": "uint8",
        "description": "The current voice flags for the specified client."
      }
    },

    {
      "name": "OnClientConnect_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientConnect_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectCallback",
            "description": "Called on client connection. If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected. If the client is rejected by this forward or any other, OnClientDisconnect will not be called.<br>Note: Do not write to rejectmsg if you plan on returning true. If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The client name"
              },
              {
                "name": "networkId",
                "type": "string",
                "description": "The client id"
              }
            ],
            "retType": {
              "type": "bool",
              "description": "True to validate client's connection, false to refuse it."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnect_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientConnect_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectCallback",
            "description": "Called on client connection. If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected. If the client is rejected by this forward or any other, OnClientDisconnect will not be called.<br>Note: Do not write to rejectmsg if you plan on returning true. If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The client name"
              },
              {
                "name": "networkId",
                "type": "string",
                "description": "The client id"
              }
            ],
            "retType": {
              "type": "bool",
              "description": "True to validate client's connection, false to refuse it."
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnect_Post_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientConnect_Post_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnect_PostCallback",
            "description": "Called on client connection.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnect_Post_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientConnect_Post_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnect_PostCallback",
            "description": "Called on client connection.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnected_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientConnected_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectedCallback",
            "description": "Called once a client successfully connects. This callback is paired with OnClientDisconnect.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientConnected_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientConnected_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientConnectedCallback",
            "description": "Called once a client successfully connects. This callback is paired with OnClientDisconnect.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientPutInServer_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientPutInServer_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientPutInServerCallback",
            "description": "Called when a client is entering the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientPutInServer_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientPutInServer_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientPutInServerCallback",
            "description": "Called when a client is entering the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientDisconnect_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnectCallback",
            "description": "Called when a client is disconnecting from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientDisconnect_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnectCallback",
            "description": "Called when a client is disconnecting from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Post_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientDisconnect_Post_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnect_PostCallback",
            "description": "Called when a client is disconnected from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "reason",
                "type": "int32",
                "description": "The reason for disconnect"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientDisconnect_Post_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientDisconnect_Post_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientDisconnect_PostCallback",
            "description": "Called when a client is disconnected from the server.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "reason",
                "type": "int32",
                "description": "The reason for disconnect"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientActive_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientActive_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientActiveCallback",
            "description": "Called when a client is activated by the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "isActive",
                "type": "bool",
                "description": "Active state"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientActive_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientActive_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientActiveCallback",
            "description": "Called when a client is activated by the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              },
              {
                "name": "isActive",
                "type": "bool",
                "description": "Active state"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientFullyConnect_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnClientFullyConnect_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientFullyConnectCallback",
            "description": "Called when a client is fully connected to the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnClientFullyConnect_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnClientFullyConnect_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnClientFullyConnectCallback",
            "description": "Called when a client is fully connected to the game.",
            "paramTypes": [
              {
                "name": "clientIndex",
                "type": "int32",
                "description": "The client index"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelInit_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnLevelInit_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelInitCallback",
            "description": "Called when the map starts loading.",
            "paramTypes": [
              {
                "name": "mapName",
                "type": "string",
                "description": "The name of the map"
              },
              {
                "name": "mapEntities",
                "type": "string",
                "description": "The entities of the map"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelInit_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnLevelInit_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelInitCallback",
            "description": "Called when the map starts loading.",
            "paramTypes": [
              {
                "name": "mapName",
                "type": "string",
                "description": "The name of the map"
              },
              {
                "name": "mapEntities",
                "type": "string",
                "description": "The entities of the map"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelShutdown_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnLevelShutdown_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelShutdownCallback",
            "description": "Called right before a map ends.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnLevelShutdown_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnLevelShutdown_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnLevelShutdownCallback",
            "description": "Called right before a map ends.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntitySpawned_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntitySpawned_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntitySpawnedCallback",
            "description": "Called when an entity is spawned.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The spawned entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntitySpawned_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntitySpawned_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntitySpawnedCallback",
            "description": "Called when an entity is spawned.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The spawned entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityCreated_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntityCreated_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityCreatedCallback",
            "description": "Called when an entity is created.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The created entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityCreated_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntityCreated_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityCreatedCallback",
            "description": "Called when an entity is created.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The created entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityDeleted_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntityDeleted_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityDeletedCallback",
            "description": "Called when when an entity is destroyed.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The deleted entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityDeleted_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntityDeleted_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityDeletedCallback",
            "description": "Called when when an entity is destroyed.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The deleted entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityParentChanged_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnEntityParentChanged_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityParentChangedCallback",
            "description": "When an entity is reparented to another entity.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The entity whose parent changed"
              },
              {
                "name": "newParent",
                "type": "ptr64",
                "description": "The new parent entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnEntityParentChanged_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnEntityParentChanged_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnEntityParentChangedCallback",
            "description": "When an entity is reparented to another entity.",
            "paramTypes": [
              {
                "name": "entity",
                "type": "ptr64",
                "description": "The entity whose parent changed"
              },
              {
                "name": "newParent",
                "type": "ptr64",
                "description": "The new parent entity instance"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnServerStartup_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnServerStartup_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnServerStartupCallback",
            "description": "Called on every server startup.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnServerStartup_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnServerStartup_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnServerStartupCallback",
            "description": "Called on every server startup.",
            "paramTypes": [],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnGameFrame_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnGameFrame_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnGameFrameCallback",
            "description": "Called before every server frame. Note that you should avoid doing expensive computations or declaring large local arrays.",
            "paramTypes": [
              {
                "name": "simulating",
                "type": "bool",
                "description": ""
              },
              {
                "name": "firstTick",
                "type": "bool",
                "description": ""
              },
              {
                "name": "lastTick",
                "type": "bool",
                "description": ""
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnGameFrame_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnGameFrame_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnGameFrameCallback",
            "description": "Called before every server frame. Note that you should avoid doing expensive computations or declaring large local arrays.",
            "paramTypes": [
              {
                "name": "simulating",
                "type": "bool",
                "description": ""
              },
              {
                "name": "firstTick",
                "type": "bool",
                "description": ""
              },
              {
                "name": "lastTick",
                "type": "bool",
                "description": ""
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnUpdateWhenNotInGame_Register",
      "group": "Listeners",
      "description": "Register callback to event.",
      "funcName": "OnUpdateWhenNotInGame_Register",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnUpdateWhenNotInGameCallback",
            "description": "",
            "paramTypes": [
              {
                "name": "deltaTime",
                "type": "float",
                "description": "Time elapsed since last update"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    },
    {
      "name": "OnUpdateWhenNotInGame_Unregister",
      "group": "Listeners",
      "description": "Unregister callback to event.",
      "funcName": "OnUpdateWhenNotInGame_Unregister",
      "paramTypes": [
        {
          "name": "callback",
          "type": "function",
          "ref": false,
          "description": "Function callback.",
          "prototype": {
            "name": "OnUpdateWhenNotInGameCallback",
            "description": "",
            "paramTypes": [
              {
                "name": "deltaTime",
                "type": "float",
                "description": "Time elapsed since last update"
              }
            ],
            "retType": {
              "type": "void",
              "description": ""
            }
          }
        }
      ],
      "retType": {
        "type": "void"
      }
    }
  ]
}